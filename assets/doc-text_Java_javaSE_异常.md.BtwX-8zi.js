import{_ as l,c as i,a2 as t,o as e}from"./chunks/framework.3VuPyQdv.js";const o="/docs-demo/javaSEImages/SE/03/1622843400375.png",r="/docs-demo/javaSEImages/SE/03/1622844236435.png",c="/docs-demo/javaSEImages/SE/03/1622854613584.png",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/Java/javaSE/异常.md","filePath":"doc-text/Java/javaSE/异常.md","lastUpdated":1754641264000}'),n={name:"doc-text/Java/javaSE/异常.md"};function s(u,a,p,h,d,E){return e(),i("div",null,a[0]||(a[0]=[t('<h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><h3 id="_1-什么是异常" tabindex="-1">1.什么是异常 <a class="header-anchor" href="#_1-什么是异常" aria-label="Permalink to &quot;1.什么是异常&quot;">​</a></h3><p>    实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或硬盘可能满了。等等。</p><p>    软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</p><p>    异常指程序运行中出现的不期而至的各种状况如：文件找不到、网络连接失败、非法参数等。异常发生在程序运行期间它影响了正常的程序执行流程。</p><blockquote><p>要理解Java异常处理是如何工作的，需要掌握以下三种类型的异常：</p></blockquote><ul><li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误==ERROR==：错误不是异常，而是脱离程序员控制的冋题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><h3 id="_2-异常体系结构" tabindex="-1">2.异常体系结构 <a class="header-anchor" href="#_2-异常体系结构" aria-label="Permalink to &quot;2.异常体系结构&quot;">​</a></h3><ul><li>Java把异常当作对象来处理，并定义一个基类 java. lang.Throwable作为所有异常的超类。</li><li>在 Java API中已经定义了许多异常类，这些异常类分为两大类，错误Error和异常 Exception。</li></ul><p><img src="'+o+'" alt="1622843400375"></p><blockquote><p>Error</p></blockquote><ul><li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误（ Virtual Machine Error），当JVM不再有继续执行操作所需的内存资源时，将出现 ==OutofMemory Error==。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</li><li>还有发生在虛拟机试图执行应用时，如类定义错误（ NoClass Deffound error）、链接错误（ Linkage Error）。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><blockquote><p>Exception</p></blockquote><ul><li>在 Exception分支中有一个重要的子类 Runtime Exception（运行时异常） <ul><li>ArraylndexOutOfBoundsException（数组下标越界）</li><li>NullPointerException（空指针异常）</li><li>ArithmeticException（算术异常）</li><li>Missing Resource Exception（丢失资源）</li><li>ClassNotFound Exception（找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</li></ul></li><li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li><li>Error和 Exception的区别：Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虛拟机（JVM）一般会选择终止线程；Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li></ul><h3 id="_3-java异常处理机制与处理异常" tabindex="-1">3.Java异常处理机制与处理异常 <a class="header-anchor" href="#_3-java异常处理机制与处理异常" aria-label="Permalink to &quot;3.Java异常处理机制与处理异常&quot;">​</a></h3><ul><li>抛出异常</li><li>捕获异常</li><li>异常处理五个关键字： <ul><li>try、catch、 finally、throw、throws</li></ul></li></ul><p><img src="'+r+'" alt="1622844236435"></p><h3 id="_4-自定义异常" tabindex="-1">4.自定义异常 <a class="header-anchor" href="#_4-自定义异常" aria-label="Permalink to &quot;4.自定义异常&quot;">​</a></h3><ul><li>使用Java内置的异常类可以描述在编程时岀现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承 Exception类即可。</li><li>在程序中使用自定义异常类，大体可分为以下几个步骤： <ol><li>创建自定义异常类。</li><li>在方法中通过 throw关键字抛出异常对象。</li><li>如果在当前抛出异常的方法中处理异常，可以使用try- catch语句捕获并处理；否则在方法的声明处通过 throws关键字指明要抛岀给方法调用者的异常，继续进行下一步操作。</li><li>在出现异常方法的调用者中捕获并处理异常。</li></ol></li></ul><p><img src="'+c+'" alt="1622854613584"></p><h3 id="_5-总结" tabindex="-1">5.总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5.总结&quot;">​</a></h3><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助 try-catch ；</li><li>处理在多重 catch块后面，可以加一个 catch（ Exception）来处理可能会被遗漏的异常；</li><li>对于不确定的代码，也可以加上try- catch，处理潜在的异常；</li><li>尽量去处理异常，切忌只是简单地调用 printStackTrace0去打印输出；</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定；</li><li>尽量添加 finally！语句块去释放占用的资源。</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',23)]))}const _=l(n,[["render",s]]);export{x as __pageData,_ as default};
