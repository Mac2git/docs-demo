import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.3VuPyQdv.js";const p="/docs-demo/javaSEImages/SE/03/1622547017370.png",t="/docs-demo/javaSEImages/SE/03/1622546943867.png",e="/docs-demo/javaSEImages/SE/03/1622695983197.png",r="/docs-demo/javaSEImages/SE/03/1622696301832.png",h="/docs-demo/javaSEImages/SE/03/1622700836289.png",o="/docs-demo/javaSEImages/SE/03/1622702066804.png",k="/docs-demo/javaSEImages/SE/03/1622718352404.png",c="/docs-demo/javaSEImages/SE/03/1622728924457.png",d="/docs-demo/javaSEImages/SE/03/1622780885608.png",g="/docs-demo/javaSEImages/SE/03/1622781139258.png",m="/docs-demo/javaSEImages/SE/03/1622790874214.png",E="/docs-demo/javaSEImages/SE/03/1622791107719.png",u="/docs-demo/javaSEImages/SE/03/1622794259098.png",b="/docs-demo/javaSEImages/SE/03/1622796718338.png",_="/docs-demo/javaSEImages/SE/03/1622814532980.png",y="/docs-demo/javaSEImages/SE/03/1622837775842.png",S="/docs-demo/javaSEImages/SE/03/1622838019416.png",v="/docs-demo/javaSEImages/SE/03/1622838137119.png",A="/docs-demo/javaSEImages/SE/03/1622838638772.png",D="/docs-demo/javaSEImages/SE/03/1622839303772.png",F="/docs-demo/javaSEImages/SE/03/1622839400252.png",j="/docs-demo/javaSEImages/SE/03/1622839591329.png",q="/docs-demo/javaSEImages/SE/03/1622839694925.png",I="/docs-demo/javaSEImages/SE/03/1622840028314.png",x="/docs-demo/javaSEImages/SE/03/1622840648753.png",f="/docs-demo/javaSEImages/SE/03/1622841402410.png",B="/docs-demo/javaSEImages/SE/03/1622842212114.png",H=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/Java/javaSE/面向对象.md","filePath":"doc-text/Java/javaSE/面向对象.md","lastUpdated":1743243781000}'),P={name:"doc-text/Java/javaSE/面向对象.md"};function O(C,s,w,J,$,N){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h2><h3 id="_1-初识面向对象" tabindex="-1">1.初识面向对象 <a class="header-anchor" href="#_1-初识面向对象" aria-label="Permalink to &quot;1.初识面向对象&quot;">​</a></h3><ul><li>面向过程思想 <ul><li>步骤清晰简单，第一步做什么，第二步做什么…</li><li>面对过程适合处理一些较为简单的问题。</li></ul></li><li>面向对象思想 <ul><li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题！</li></ul></li><li>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</li><li>面向对象编程（ Object- Oriented Programming,OOP）</li><li>面向对象编程的本质就是：==以类的方式组织代码，以对象的组织（封装）数据==。</li><li>三大特征： <ul><li><strong>继承</strong></li><li><strong>封装</strong></li><li><strong>多态</strong></li></ul></li><li>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</li><li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li></ul><h3 id="_2-方法回顾和加深" tabindex="-1">2.方法回顾和加深 <a class="header-anchor" href="#_2-方法回顾和加深" aria-label="Permalink to &quot;2.方法回顾和加深&quot;">​</a></h3><ul><li><p>方法的定义</p><ul><li>修饰符</li><li>返回类型</li><li>break：跳出 switch，结束循环和 return的区别。</li><li>方法名：注意规范就OK，见名知意</li><li>参数列表：(参数类型，参数名) ...</li><li>异常抛出：疑问，参考下文！</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.oop;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    修饰符 返回值类型 方法名(...){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法体</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        return 返回值;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello,world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 三元运算符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 数组下标越界：Arrayindexoutofbounds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></li><li><p>方法的调用</p><ul><li>静态方法</li></ul><p><img src="`+p+'" alt="1622547017370"></p><ul><li>非静态方法</li></ul><p><img src="'+t+'" alt="1622546943867"></p><ul><li>形参和实参</li><li>值传递和引用传递</li></ul><p><img src="'+e+'" alt="1622695983197"></p><p><img src="'+r+'" alt="1622696301832"></p><ul><li>this关键字</li></ul></li></ul><h3 id="_3-对象的创建分析" tabindex="-1">3.对象的创建分析 <a class="header-anchor" href="#_3-对象的创建分析" aria-label="Permalink to &quot;3.对象的创建分析&quot;">​</a></h3><ul><li>类是一种抽象的数据类型它是对某一类事物整体描述/定义但是并不能代表某一个具体的事物。</li><li>使用new关键字创建对象。</li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给刨建好的对象进行默认的初始化以及对类中构造器的调用。</li><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩个特点： <ul><li>1.必须和类的名字相同；</li><li>2.必须没有返回类型也不能写void。</li></ul></li><li>构造器： <ul><li>1.和类名初问</li><li>2.没有返回值</li></ul></li><li>作用： <ul><li>1.new本质在调用构造方法；</li><li>2.初始化对象的值。</li></ul></li><li>注意：定义有参构造之后，如果想使用无参构造，显示的定义一个无参构造。</li></ul><p><img src="'+h+'" alt="1622700836289"></p><p><img src="'+o+'" alt="1622702066804"></p><p><img src="'+k+'" alt="1622718352404"></p><h3 id="_4-面向对象三大特性" tabindex="-1">4.面向对象三大特性 <a class="header-anchor" href="#_4-面向对象三大特性" aria-label="Permalink to &quot;4.面向对象三大特性&quot;">​</a></h3><blockquote><p>封装：<strong>属性私有，get/set</strong></p></blockquote><ul><li>程序设计要追求高内聚低耦合。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用。</li><li>封装（数据的隐藏）：通常，应禁止直接访问一个对象中数据的实际表示，而应该通过操作接口来访问，这称为信息隐藏。</li></ul><p><img src="'+c+'" alt="1622728924457"></p><ul><li>封装的作用： <ul><li>提高了代码的安全性，保护数据；</li><li>隐藏代码的实现细则；</li><li>统一接口；</li><li>系统可维护增加了。</li></ul></li></ul><blockquote><p>继承：<strong>object类、super、方法重写</strong></p></blockquote><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extands的意思是“扩展”。子类是父类的扩展。</li><li>JAVA中类只有单继承，没有多继承！</li><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的俩个类，一个为子类（派生类），一个为父类（基类）。子类继承父类使用关键字 extends来表示。</li><li>子类和父类之间从意义上讲应该具有&quot;is a&quot;的关系。</li></ul><p><img src="'+d+'" alt="1622780885608"></p><p><img src="'+g+'" alt="1622781139258"></p><hr><ul><li>Super概述</li></ul><p><img src="'+m+'" alt="1622790874214"></p><p><img src="'+E+'" alt="1622791107719"></p><ul><li>私有的东西无法被继承！！！</li></ul><p><img src="'+u+'" alt="1622794259098"></p><p><strong>super注意点</strong>：</p><ol><li><p>super调用父类的构造方法，必须在构造方法的第一个</p></li><li><p>super必须只能出现在子类的方法或者构造方法中！</p></li><li><p>super和this不能同时调用构造方法！</p></li></ol><p><strong>VSthis</strong>：</p><ul><li>代表的对象不同： <ul><li>this：本身调用者这个对象；</li><li>super：代表父类对象的应用；</li></ul></li><li>前提 <ul><li>this：没有继承也可以使用；</li><li>super：只能在继承条件才可以使用；</li></ul></li><li>构造方法 <ul><li>this（）：本类的构造；</li><li>super（）：父类的构造。</li></ul></li></ul><hr><ul><li>方法的重写：</li></ul><p><img src="'+b+'" alt="1622796718338"></p><ul><li>重写：需要有继承关系，子类重写父类的方法！</li></ul><ol><li>方法名必须相同;</li><li>参数列表列表必须相同;</li><li>修饰符：范围可以扩大但不能缩小: public&gt;Protected&gt;Default&gt;private</li><li>抛出的异常：范围，可以被缩小，但不能扩大；ClassNotFoundException--&gt; Exception(大)</li></ol><ul><li>重写，子类的方法和父类必要一致；方法体不同！</li><li>为什么需要重写：父类的功能，子类不一定需要，或者不一定满足！</li></ul><blockquote><p>多态：</p></blockquote><ul><li>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多。</li><li>多态存在的条件： <ul><li>有继承关系；</li><li>子类重写父类方法；</li><li>父类引用指向子类对象。</li></ul></li></ul><p><img src="'+_+'" alt="1622814532980"></p><ul><li>多态注意事项： <ol><li>多态是方法的多态，属性没有多态；</li><li>父类和子类，有联系，类型转换异常！ClassCastException!</li><li>存在条件：继承条件，方法需要重写！父类引用指向子类对象！ <ol><li>static 方法，属于类，它不属于实例</li><li>final 常量；</li><li>private 方法；</li></ol></li></ol></li></ul><p><strong>instanceof</strong>：判断一个对象是什么类型。</p><p><img src="'+y+'" alt="1622837775842"></p><p><img src="'+S+'" alt="1622838019416"></p><p><img src="'+v+'" alt="1622838137119"></p><p><img src="'+A+'" alt="1622838638772"></p><p><strong>static关键字</strong></p><p><img src="'+D+'" alt="1622839303772"></p><p><img src="'+F+'" alt="1622839400252"></p><p><img src="'+j+'" alt="1622839591329"></p><p><img src="'+q+'" alt="1622839694925"></p><p><img src="'+I+'" alt="1622840028314"></p><h3 id="_5-抽象类和接口" tabindex="-1">5.抽象类和接口 <a class="header-anchor" href="#_5-抽象类和接口" aria-label="Permalink to &quot;5.抽象类和接口&quot;">​</a></h3><blockquote><p>抽象类</p></blockquote><ul><li>abstract修饰符可以用来修饰方法也可以修饰类如果修饰方法那么该方法就是抽象方法如果修饰类那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类，不能使用new关键字来创建对象它是用来让子类继承的。</li><li>抽象方法只有方法的声明没有方法的实现它是用来让子类实现的。</li><li>子类继承抽象类那么就必须要实现抽象类没有实现的抽象方法否则该子类也要声明为抽象类。</li></ul><p><img src="'+x+'" alt="1622840648753"></p><blockquote><p>接口</p></blockquote><ul><li>普通类：只有具体实现；</li><li>抽象类：具体实现和规范（抽象方法）都有！</li><li>接口：只有规范！</li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想。如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</li><li>接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、java、c#等），就是因为设计模式所硏究的，实际上就是如何合理的去抽象。</li><li>==声明类的关键字是 class，声明接口的关键字是 interface==。</li></ul><p><img src="'+f+'" alt="1622841402410"></p><h3 id="_6-内部类及oop实战" tabindex="-1">6.内部类及OOP实战 <a class="header-anchor" href="#_6-内部类及oop实战" aria-label="Permalink to &quot;6.内部类及OOP实战&quot;">​</a></h3><ul><li>内部类就是在一个类的内部在定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。 <ol><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ol></li></ul><p><img src="'+B+'" alt="1622842212114"></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',61)]))}const K=i(P,[["render",O]]);export{H as __pageData,K as default};
