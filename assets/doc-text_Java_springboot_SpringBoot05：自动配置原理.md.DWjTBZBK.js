import{_ as p,c as o,j as n,a,G as e,w as t,a2 as i,B as l,o as k}from"./chunks/framework.3VuPyQdv.js";const g="/docs-demo/SpringBoot-images/SpringBoot05%EF%BC%9A%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86.assets/1595493746481.png",h="/docs-demo/SpringBoot-images/SpringBoot05%EF%BC%9A%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86.assets/1595493884773.png",C=JSON.parse('{"title":"自动配置原理","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/Java/springboot/SpringBoot05：自动配置原理.md","filePath":"doc-text/Java/springboot/SpringBoot05：自动配置原理.md","lastUpdated":1742989189000}'),u={name:"doc-text/Java/springboot/SpringBoot05：自动配置原理.md"};function E(c,s,b,d,f,m){const r=l("font");return k(),o("div",null,[s[13]||(s[13]=n("h1",{id:"自动配置原理",tabindex:"-1"},[a("自动配置原理 "),n("a",{class:"header-anchor",href:"#自动配置原理","aria-label":'Permalink to "自动配置原理"'},"​")],-1)),n("p",null,[s[1]||(s[1]=a("配置文件到底能写什么？怎么写？")),e(r,{color:"red"},{default:t(()=>s[0]||(s[0]=[a("----联系----")])),_:1}),s[2]||(s[2]=a()),s[3]||(s[3]=n("code",null,"spring.factories",-1))]),s[14]||(s[14]=n("p",null,[a("SpringBoot官方文档中有大量的配置，我们无法全部记住,官网："),n("a",{href:"https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#core-properties",target:"_blank",rel:"noreferrer"},"https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#core-properties")],-1)),s[15]||(s[15]=n("p",null,[n("img",{src:g,alt:"1595493746481"})],-1)),s[16]||(s[16]=n("h2",{id:"分析自动配置原理",tabindex:"-1"},[a("分析自动配置原理 "),n("a",{class:"header-anchor",href:"#分析自动配置原理","aria-label":'Permalink to "分析自动配置原理"'},"​")],-1)),n("ol",null,[s[8]||(s[8]=n("li",null,[n("p",null,"SpringBoot启动的时候加载主配置类，开启了自动配置功能 @EnableAutoConfiguration")],-1)),n("li",null,[s[7]||(s[7]=n("p",null,"@EnableAutoConfiguration 作用",-1)),n("ul",null,[s[6]||(s[6]=i("<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件</p></li><li><p>可以查看selectImports()方法的内容,他返回了一个autoConfigurationEnty,来自<code>this.getAutoConfigurationEntry(autoConfigurationMetadata,annotationMetadata);</code>这个方法我们继续来跟踪：</p></li><li><p>这个方法有一个值：<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>叫做获取候选的配置 ，我们点击继续跟踪</p><ul><li><code>SpringFactoriesLoader.loadFactoryNames()</code></li><li>扫描所有jar包类路径下<code>META-INF/spring.factories</code></li><li>把扫描到的这些文件的内容包装成properties对象</li><li>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</li></ul></li>",3)),n("li",null,[e(r,{color:"red"},{default:t(()=>s[4]||(s[4]=[a("在类路径下,`META-INF/spring.factories`里面配置的所有EnableAutoConfiguration的值加入到容器中：")])),_:1}),s[5]||(s[5]=i(`<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Initializers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.context.ApplicationContextInitializer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Application Listeners</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.context.ApplicationListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Auto Configuration Import Listeners</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.AutoConfigurationImportListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Auto Configuration Import Filters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.condition.OnClassCondition,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Auto Configure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Failure analyzers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.diagnostics.FailureAnalyzer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Template availability providers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br></div></div><p>每一个这样的 xxxAutoConfiguration类都是容器中的一个<strong>组件，都加入到容器中；用他们来做自动配置；</strong></p>`,2))])])]),s[9]||(s[9]=i(`<li><p>每一个自动配置类进行自动配置功能；</p></li><li><p>我们以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//启动指定类的ConfigurationProperties功能；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //并把HttpProperties加入到ioc容器中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({HttpProperties.class}) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Spring底层@Conditional注解</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnWebApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type.SERVLET</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({CharacterEncodingFilter.class})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //如果不存在，判断也是成立的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;spring.http.encoding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    matchIfMissing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpEncodingAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //他已经和SpringBoot的配置文件映射了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Encoding properties;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpEncodingAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpProperties </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> properties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnMissingBean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //判断容器没有这个组件？</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CharacterEncodingFilter </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">characterEncodingFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CharacterEncodingFilter filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderedCharacterEncodingFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCharset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setForceRequestEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shouldForce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setForceResponseEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shouldForce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //。。。。。。。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div></li>`,2))]),s[17]||(s[17]=i(`<p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</p></li><li><p>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</p></li><li><p>配置文件能配置什么就可以参照某个功能对应的这个属性类</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//从配置文件中获取指定的值和bean的属性进行绑定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;spring.http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // .....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>我们去配置文件里面试试前缀，看提示！</p><p><img src="`+h+'" alt="1595493884773"></p><p><strong>这就是自动装配的原理！</strong></p><h2 id="精髓" tabindex="-1">精髓 <a class="header-anchor" href="#精髓" aria-label="Permalink to &quot;精髓&quot;">​</a></h2><ol><li><p>SpringBoot启动会加载大量的自动配置类</p></li><li><p>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p></li><li><p>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p></li><li><p>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p>**xxxxAutoConfigurartion：自动配置类；**给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p></li></ol><h2 id="conditional" tabindex="-1">@Conditional <a class="header-anchor" href="#conditional" aria-label="Permalink to &quot;@Conditional&quot;">​</a></h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p>',9)),n("p",null,[n("strong",null,[s[11]||(s[11]=a("@Conditional派生注解（")),e(r,{color:"red"},{default:t(()=>s[10]||(s[10]=[a("Spring注解版原生的@Conditional作用")])),_:1}),s[12]||(s[12]=a("）"))])]),s[18]||(s[18]=i(`<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table tabindex="0"><thead><tr><th>@Conditional扩展注解</th><th>作用(判断是否满足当前指定条件)</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnJava</td><td>容器中存在指定Bean ;</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean ;</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean ,或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><h2 id="自动配置类是否生效" tabindex="-1">自动配置类是否生效 <a class="header-anchor" href="#自动配置类是否生效" aria-label="Permalink to &quot;自动配置类是否生效&quot;">​</a></h2><p><strong>我们可以在application.properties通过启用 <code>debug=true</code>属性；</strong></p><p><strong>在控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#开启springboot的调试类</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">debug=true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p></li><li><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p></li><li><p><strong>Unconditional classes: （没有条件的类）</strong></p></li><li><p><strong>【演示：查看输出的日志】</strong></p></li></ul>`,8))])}const A=p(u,[["render",E]]);export{C as __pageData,A as default};
