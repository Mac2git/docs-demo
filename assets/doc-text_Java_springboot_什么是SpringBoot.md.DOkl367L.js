import{_ as p,c as e,a2 as o,G as i,w as n,B as a,o as l,a as g}from"./chunks/framework.3VuPyQdv.js";const d="/docs-demo/SpringBoot-images/%E4%BB%80%E4%B9%88%E6%98%AFSpringBoot/image-20211017223841534.png",s="/docs-demo/SpringBoot-images/%E4%BB%80%E4%B9%88%E6%98%AFSpringBoot/image-20211017223148167.png",b="/docs-demo/SpringBoot-images/%E4%BB%80%E4%B9%88%E6%98%AFSpringBoot/image-20211017231320406.png",c="/docs-demo/SpringBoot-images/%E4%BB%80%E4%B9%88%E6%98%AFSpringBoot/springboot.png",w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/Java/springboot/什么是SpringBoot.md","filePath":"doc-text/Java/springboot/什么是SpringBoot.md","lastUpdated":1745418909000}'),u={name:"doc-text/Java/springboot/什么是SpringBoot.md"};function S(m,t,B,h,k,f){const r=a("center");return l(),e("div",null,[t[1]||(t[1]=o('<p>idea springboot 2.x构建地址：<a href="https://start.aliyun.com/" target="_blank" rel="noreferrer">https://start.aliyun.com/</a> SpringBoot3 笔记链接：<a href="https://www.yuque.com/leifengyang/springboot3" target="_blank" rel="noreferrer">https://www.yuque.com/leifengyang/springboot3</a></p><h2 id="_1-什么是springboot" tabindex="-1">1.什么是SpringBoot <a class="header-anchor" href="#_1-什么是springboot" aria-label="Permalink to &quot;1.什么是SpringBoot&quot;">​</a></h2><blockquote><p>回顾什么是Spring？</p></blockquote><ul><li>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson 。</li><li><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发</strong>。</li></ul><blockquote><p>Spring是如何简化Java开发的？</p></blockquote><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p><p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p><p>3、基于切面（AOP）和惯例进行声明式编程；</p><p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p><blockquote><p>什么是SpringBoot？</p></blockquote><p>学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</p><p>言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置， you can &quot;just run&quot;，能迅速的开发web应用，几行代码开发一个http接口。</p><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p><p>是的，这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p><p>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p><blockquote><p><strong>Spring Boot的主要优点</strong>：</p></blockquote><ul><li>为所有Spring开发者更快的入门；</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置；</li><li>内嵌式容器简化Web项目；</li><li>没有冗余代码生成和XML配置的要求；</li></ul><h2 id="_2-什么是微服务架构" tabindex="-1">2.什么是微服务架构 <a class="header-anchor" href="#_2-什么是微服务架构" aria-label="Permalink to &quot;2.什么是微服务架构&quot;">​</a></h2><ul><li><a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noreferrer">参考原文</a></li><li><a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="noreferrer">参考译文</a></li></ul><blockquote><p>什么是微服务？</p></blockquote><p>微服务是一种架构风格，它要求我们在开发一个应用时，将单个应用程序开发为一组小服务的方法，每个小服务都在自己的进程中运行，并与轻量级机制（通常是 HTTP 资源 API）进行通信。简单说：==每个功能元素最终都是一个可独立替换和独立升级的软件单元==。</p><blockquote><p>单体应用架构</p></blockquote><ul><li><p>所谓单体应用架构（ all in one）是指，我们将一个应用的中的所有应用服务都封装在一个应用中。</p></li><li><p>无论是ERP、CRM或是其他什么系统，你都把数据库访问，web访问，等等各个功能放到一个war包内。</p></li><li><p>这样做的好处是，易于开发和测试；也十分方便部罢；当需要扩展时，只需要将war复制多份，然后放到多个服务器上，再做个负载均衡就可以了。</p></li><li><p>单体应用架构的缺点是，哪怕我要修改一个非常小的地方，我都需要停掉整个服务，重新打包、部署这个应用war包。特别是对于一个大型应用，我们不可能吧所有内容都放在一个应用里面，我们如何维护、如何分工合作都是问题。</p></li><li><p>例如：<a href="https://dubbo.apache.org/zh/" target="_blank" rel="noreferrer">Apache Dubbo</a></p></li></ul><p><img src="'+d+'" alt=""></p><blockquote><p>微服务架构</p></blockquote><p>all in one的架构方式，我们把所有的功能单元放在一个应用里面。然后我们把整个应用部罢到服务器上。如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后在负载均衡。</p><p>所谓微服务架构，就是打破之前 all in one的架构方式，把每个功能元素独立出来，肥独立出来的功能元素的动态组合，需要的功能元素才去拿来组合，需要多一些时可以整合多个功能元素。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</p><p>这样做的好处是：</p><ul><li>节省了调用资源。</li><li>每个功能元素的服都是一个可替换的、可独立升吸的软件代码。</li></ul>',33)),i(r,null,{default:n(()=>t[0]||(t[0]=[g("图1：单体和微服务")])),_:1}),t[2]||(t[2]=o('<p><img src="'+s+'" alt=""></p><blockquote><p>微服务技术栈有那些？</p></blockquote><table tabindex="0"><thead><tr><th>微服务技术条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><ul><li><a href="https://www.cnblogs.com/wangju/p/11813141.html" target="_blank" rel="noreferrer">各微服务框架对比</a></li></ul><blockquote><p>如何构建微服务？</p></blockquote><p>一个大型系统的微服务架构，就像一个复杂交织的神经网络，每一个神经元就是一个功能元素，它们各自完成自己的功能，然后通过http相互请求调用。比如一个电商系统，查缓存、连数据库、浏览页面、结账、支付等服务都是一个个独立的功能服务，都被微化了，它们作为一个个微服务共同构建了个庞大的系统。如果修改其中的一个功能，只需要更新升级其中一个功能服务单元即可。 但是这种庞大的系统架构给部罢和运维带来很大的难度。于是， spring为我们带来了构建大型分布式微服务的全套、全程产品：</p><ul><li>构建一个个功能独立的微服务应用单元，可以使用 Spring boot，可以帮我们快速构建一个应用；</li><li>大型分布式网络服务的调用，这部分由 Spring cloud来完成，实现分布式；</li><li>在分布式中间，进行流式数据计算、批处理，我们有 Spring cloud data flow。</li><li>Spring为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案。</li></ul><p><img src="'+b+'" alt="image-20211017231320406"></p><p><img src="'+c+'" alt="springboot"></p>',9))])}const q=p(u,[["render",S]]);export{w as __pageData,q as default};
