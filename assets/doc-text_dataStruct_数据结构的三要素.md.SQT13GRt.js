import{_ as d,c as a,j as o,a as l,G as r,w as i,a2 as n,B as p,o as e}from"./chunks/framework.3VuPyQdv.js";const u="/docs-demo/dataStructImage/%E9%9B%86%E5%90%88.png",E="/docs-demo/dataStructImage/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84.png",m="/docs-demo/dataStructImage/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.png",g="/docs-demo/dataStructImage/%E5%9B%BE%E7%BB%93%E6%9E%84.png",B="/docs-demo/dataStructImage/%E7%A6%8F%E5%B8%83%E6%96%AF%E6%8E%92%E8%A1%8C%E6%A6%9C.png",f="/docs-demo/dataStructImage/%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%E5%AD%98%E5%82%A8.png",k="/docs-demo/dataStructImage/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.png",b="/docs-demo/dataStructImage/%E7%B4%A2%E5%BC%95%E5%AD%98%E5%82%A8.png",A="/docs-demo/dataStructImage/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png",x="/docs-demo/dataStructImage/%E7%BA%BF%E6%80%A7%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png",y="/docs-demo/dataStructImage/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E4%B8%89%E8%A6%81%E7%B4%A0.png",D="/docs-demo/dataStructImage/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B.png",S="/docs-demo/dataStructImage/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",$=JSON.parse('{"title":"1、什么是数据？","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/dataStruct/数据结构的三要素.md","filePath":"doc-text/dataStruct/数据结构的三要素.md","lastUpdated":1743682937000}'),z={name:"doc-text/dataStruct/数据结构的三要素.md"},P={id:"逻辑结构-数据元素之间的逻辑关系是什么",tabindex:"-1"};function q(I,t,v,F,C,N){const s=p("font");return e(),a("div",null,[t[48]||(t[48]=o("h1",{id:"_1、什么是数据",tabindex:"-1"},[l("1、什么是数据？ "),o("a",{class:"header-anchor",href:"#_1、什么是数据","aria-label":'Permalink to "1、什么是数据？"'},"​")],-1)),o("p",null,[t[2]||(t[2]=l("数据是")),r(s,{color:"red"},{default:i(()=>t[0]||(t[0]=[l("信息的载体")])),_:1}),t[3]||(t[3]=l("，是描述客观事物属性的数、字符及所有能输入到计算机中并")),r(s,{color:"red"},{default:i(()=>t[1]||(t[1]=[l("被计算机程序识别(二进制的0和1)和处理")])),_:1}),t[4]||(t[4]=l("的符号的集合。数据是计算机程序加工的原料。"))]),t[49]||(t[49]=o("p",null,[o("strong",null,"早起的计算机：只适用于纯数值的问题。")],-1)),o("p",null,[o("strong",null,[t[6]||(t[6]=l("现代计算机：经常处理")),r(s,{color:"red"},{default:i(()=>t[5]||(t[5]=[l("非数值")])),_:1}),t[7]||(t[7]=l("型问题。"))])]),t[50]||(t[50]=o("h2",{id:"数据元素、数据项",tabindex:"-1"},[l("数据元素、数据项: "),o("a",{class:"header-anchor",href:"#数据元素、数据项","aria-label":'Permalink to "数据元素、数据项:"'},"​")],-1)),r(s,{color:"red",size:"4px"},{default:i(()=>t[8]||(t[8]=[l("数据元素")])),_:1}),t[51]||(t[51]=l("是数据的基本单位，通常作为一个整体进行考虑和处理。")),o("p",null,[t[10]||(t[10]=l("一个数据元素可由若干个")),r(s,{color:"red"},{default:i(()=>t[9]||(t[9]=[l("数据项")])),_:1}),t[11]||(t[11]=l("组成，数据项是构成数据元素的不可分割的最小单位。"))]),t[52]||(t[52]=o("h2",{id:"什么是数据对象",tabindex:"-1"},[l("什么是数据对象？ "),o("a",{class:"header-anchor",href:"#什么是数据对象","aria-label":'Permalink to "什么是数据对象？"'},"​")],-1)),o("p",null,[t[13]||(t[13]=o("strong",null,"数据对象",-1)),t[14]||(t[14]=l("是具有")),r(s,{color:"red"},{default:i(()=>t[12]||(t[12]=[l("相同性质")])),_:1}),t[15]||(t[15]=l("的数据元素的集合，是数据的一个子集。"))]),o("p",null,[t[17]||(t[17]=o("strong",null,"数据结构",-1)),t[18]||(t[18]=l("是相互之间存在一种或多种特定")),r(s,{color:"red"},{default:i(()=>t[16]||(t[16]=[l("关系")])),_:1}),t[19]||(t[19]=l("的数据元素的集合"))]),t[53]||(t[53]=o("p",null,"同一数据对象里的数据元素，可以组成不同的数据结构",-1)),t[54]||(t[54]=o("p",null,"不同数据对象里的数据元素，可以组成相同的数据结构",-1)),t[55]||(t[55]=o("h1",{id:"数据结构的三要素",tabindex:"-1"},[l("数据结构的三要素 "),o("a",{class:"header-anchor",href:"#数据结构的三要素","aria-label":'Permalink to "数据结构的三要素"'},"​")],-1)),t[56]||(t[56]=o("h2",{id:"_1、逻辑结构",tabindex:"-1"},[l("1、逻辑结构 "),o("a",{class:"header-anchor",href:"#_1、逻辑结构","aria-label":'Permalink to "1、逻辑结构"'},"​")],-1)),o("h3",P,[r(s,{size:"4px"},{default:i(()=>t[20]||(t[20]=[l("逻辑结构")])),_:1}),t[21]||(t[21]=l("--数据元素之间的逻辑关系是什么？ ")),t[22]||(t[22]=o("a",{class:"header-anchor",href:"#逻辑结构-数据元素之间的逻辑关系是什么","aria-label":`Permalink to "<font size='4px'>逻辑结构</font>--数据元素之间的逻辑关系是什么？"`},"​",-1))]),t[57]||(t[57]=n('<img src="'+u+'" style="zoom:60%;"><img src="'+E+'" style="zoom:60%;"><img src="'+m+'" style="zoom:60%;"><img src="'+g+'" style="zoom:60%;"><h2 id="_2、数据的运算" tabindex="-1">2、数据的运算 <a class="header-anchor" href="#_2、数据的运算" aria-label="Permalink to &quot;2、数据的运算&quot;">​</a></h2>',5)),r(s,{size:"4px"},{default:i(()=>t[23]||(t[23]=[l("**数据的运算**")])),_:1}),t[58]||(t[58]=l("--针对于某种逻辑结构，结合实际需求，定义")),r(s,{color:"red"},{default:i(()=>t[24]||(t[24]=[l("基本运算")])),_:1}),t[59]||(t[59]=n('<p>例：</p><p><img src="'+B+'" alt=""></p><p>逻辑结构--线性结构</p><p>基本运算：</p><ol><li>查找第i个数据元素</li><li>在第i个位置插入新的数据元素</li><li>删除第i个位置的数据元素......</li></ol><p>当我们有了<strong>数据结构</strong>和<strong>数据的运算</strong>就定义了一种数据结构，但我们需要考虑的是存储结构。</p><p>如何用计算机实现这种数据结构？</p><h2 id="_3、物理结构-存储结构" tabindex="-1">3、物理结构(存储结构) <a class="header-anchor" href="#_3、物理结构-存储结构" aria-label="Permalink to &quot;3、物理结构(存储结构)&quot;">​</a></h2>',8)),r(s,{size:"4px"},{default:i(()=>t[25]||(t[25]=[l("数据的物理结构(存储结构)")])),_:1}),t[60]||(t[60]=n(' --如何用计算机表示数据元素的逻辑关系？<p>数据的存储结构</p><ul><li>顺序存储(要求数据的各个元素是相邻存放的)</li><li><strong>非顺序存储</strong>或<strong>离散存储</strong>(可以把数据离散的存储在各个角落) <ul><li>链式存储</li><li>索引存储</li><li>散列存储</li></ul></li></ul><h3 id="线性存储" tabindex="-1">线性存储 <a class="header-anchor" href="#线性存储" aria-label="Permalink to &quot;线性存储&quot;">​</a></h3><p><img src="'+f+'" alt=""></p><h3 id="链式存储" tabindex="-1">链式存储 <a class="header-anchor" href="#链式存储" aria-label="Permalink to &quot;链式存储&quot;">​</a></h3>',6)),r(s,{color:"#60A0F"},{default:i(()=>t[26]||(t[26]=[l("逻辑上相邻的元素在物理位置上可以不相邻")])),_:1}),t[61]||(t[61]=n('，借助指示元素存储地址的指针来表示元素之间的逻辑关系。<img src="'+k+'" style="zoom:60%;"><h3 id="索引存储" tabindex="-1">索引存储 <a class="header-anchor" href="#索引存储" aria-label="Permalink to &quot;索引存储&quot;">​</a></h3><p>在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是(关键字、地址)</p><img src="'+b+'" style="zoom:60%;"><h3 id="散列存储" tabindex="-1">散列存储 <a class="header-anchor" href="#散列存储" aria-label="Permalink to &quot;散列存储&quot;">​</a></h3>',6)),o("p",null,[t[28]||(t[28]=l("根据元素的关键字直接计算出该元素的存储地址，又称")),r(s,{color:"red"},{default:i(()=>t[27]||(t[27]=[l("哈希（Hash） 存储")])),_:1})]),t[62]||(t[62]=o("img",{src:A,style:{zoom:"60%"}},null,-1)),o("ol",null,[o("li",null,[t[32]||(t[32]=l("若采用顺序存储，则各个数据元素在物理上必须是")),r(s,{color:"red"},{default:i(()=>t[29]||(t[29]=[l("连续的")])),_:1}),t[33]||(t[33]=l("；若采用")),r(s,{color:"red"},{default:i(()=>t[30]||(t[30]=[l("非顺序存储")])),_:1}),t[34]||(t[34]=l("，则各个数据元素在物理上可以是")),r(s,{color:"red"},{default:i(()=>t[31]||(t[31]=[l("离散的")])),_:1}),t[35]||(t[35]=l("。"))]),o("li",null,[t[38]||(t[38]=l("数据的")),r(s,{color:"red"},{default:i(()=>t[36]||(t[36]=[l("存储结构")])),_:1}),t[39]||(t[39]=l("会")),r(s,{color:"red"},{default:i(()=>t[37]||(t[37]=[l("影响存储空间分配的方便程度")])),_:1})]),o("li",null,[t[42]||(t[42]=l("数据的")),r(s,{color:"red"},{default:i(()=>t[40]||(t[40]=[l("存储结构")])),_:1}),t[43]||(t[43]=l("会")),r(s,{color:"red"},{default:i(()=>t[41]||(t[41]=[l("影响对数据运算的速度")])),_:1})])]),t[63]||(t[63]=o("img",{src:x,style:{zoom:"60%"}},null,-1)),r(s,{color:"red"},{default:i(()=>t[44]||(t[44]=[l("运算的定义")])),_:1}),t[64]||(t[64]=l("是")),r(s,{color:"red"},{default:i(()=>t[45]||(t[45]=[l("针对逻辑结构")])),_:1}),t[65]||(t[65]=l("的，指出运算的功能")),r(s,{color:"red"},{default:i(()=>t[46]||(t[46]=[l("运算的实现")])),_:1}),t[66]||(t[66]=l("是")),r(s,{color:"red"},{default:i(()=>t[47]||(t[47]=[l("针对存储结构")])),_:1}),t[67]||(t[67]=n('的，指出运算的具体操作步骤。<img src="'+y+`" style="zoom:60%;"><p>数据类型、抽象数据类型：</p><p><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。</p><ol><li><p>原子类型。其值不可再分的数据类型。</p><p>例：</p><p>​ <code>bool</code> 类型 int 类型</p><p><code>bool</code>类型</p><ul><li>值的范围：true 、false</li><li>可进行操作：与、或、非 ......</li></ul><p>int 类型</p><ul><li>值的范围(4<code>B</code>补码)：-2147483648~-2147483647</li><li>可进行操作：加、减、乘、除、模运算 ......</li></ul></li><li><p>结构类型。其值可以在分解为若干成分（分量）的数据类型</p><p>例：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Coordinate{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 横坐标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 纵坐标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>x、y 各占 4<code>B</code>，用补码表示。</li><li>&lt;x,y&gt; 是有序对，不可互换。</li><li>可进行的操作：加、减、计算到原点的距离 ...</li></ul></li></ol><p>抽象数据类型（Abstract Data Type，<strong>ADT</strong>）是抽象数据组织与之相关的操作。</p><img src="`+D+'" style="zoom:60%;"><h1 id="思维导图" tabindex="-1">思维导图： <a class="header-anchor" href="#思维导图" aria-label="Permalink to &quot;思维导图：&quot;">​</a></h1><img src="'+S+'" style="zoom:60%;">',9))])}const w=d(z,[["render",q]]);export{$ as __pageData,w as default};
