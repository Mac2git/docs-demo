import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.3VuPyQdv.js";const p="/docs-demo/emuImage/%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png",h="/docs-demo/emuImage/%E6%8C%87%E4%BB%A4%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E6%95%B0%E8%A1%A8%E5%BE%81%E6%96%B9%E6%B3%95.png",t="/docs-demo/emuImage/%E5%AF%84%E5%AD%98%E5%99%A8%E5%A6%82%E4%BD%95%E5%8F%96%E6%95%B0.png",e="/docs-demo/emuImage/EA.png",k="/docs-demo/emuImage/%E5%8F%98%E5%9D%80%E5%AF%BB%E5%9D%80.png",r="/docs-demo/emuImage/%E5%9F%BA%E5%9D%80%E5%8A%A0%E5%8F%98%E5%9D%80%E5%AF%BB%E5%9D%80.png",d="/docs-demo/emuImage/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png",E="/docs-demo/emuImage/JMP%E6%8C%87%E4%BB%A4%E8%BD%AC%E7%A7%BB.png",g="/docs-demo/emuImage/%E6%AE%B5%E5%86%85%E8%BD%AC%E7%A7%BB.png",F="/docs-demo/emuImage/%E5%90%8E%E8%BF%9B%E5%85%88%E5%87%BA.png",C="/docs-demo/emuImage/%E5%8E%8B%E6%A0%88%E6%93%8D%E4%BD%9C.png",c="/docs-demo/emuImage/8%E4%BD%8D%E9%99%A4%E6%B3%95.png",o="/docs-demo/emuImage/16%E4%BD%8D%E9%99%A4%E6%B3%95.png",y="/docs-demo/emuImage/%E7%BB%84%E5%90%88BCD%E5%92%8C%E9%9D%9E%E7%BB%84%E5%90%88BCD%E7%A0%81.png",b="/docs-demo/emuImage/%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C.png",u="/docs-demo/emuImage/image-20230924142302666.png",m="/docs-demo/emuImage/image-20230924142650976.png",H=JSON.parse('{"title":"寻址方式和指令系统","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu03.md","filePath":"doc-text/emu/emu03.md","lastUpdated":1743243781000}'),A={name:"doc-text/emu/emu03.md"};function B(D,s,P,v,X,O){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="寻址方式和指令系统" tabindex="-1">寻址方式和指令系统 <a class="header-anchor" href="#寻址方式和指令系统" aria-label="Permalink to &quot;寻址方式和指令系统&quot;">​</a></h1><h2 id="一、8086-8088指令系统的特点" tabindex="-1">一、8086/8088指令系统的特点 <a class="header-anchor" href="#一、8086-8088指令系统的特点" aria-label="Permalink to &quot;一、8086/8088指令系统的特点&quot;">​</a></h2><ol><li>指令系统的兼容性</li><li>指令格式的灵活性</li><li>寻址方式的多样性</li><li>可对多种类型的数据进行处理</li><li>可构成多处理机系统</li></ol><h2 id="二、指令格式" tabindex="-1">二、指令格式 <a class="header-anchor" href="#二、指令格式" aria-label="Permalink to &quot;二、指令格式&quot;">​</a></h2><p>指令：是指指示计算机完成特定操作的命令</p><p>指令系统：他取决于计算机的硬件设计，指令系统因机而异，没有通用性。</p><p>指令中应包含的信息：</p><ul><li>执行指令的运算 ①</li><li>运算结果的去向 ②</li><li>运算数据的来源 ③ <ul><li>例： <ul><li>③ i=a+b (a、b ②，+ ③)</li></ul></li></ul></li></ul><p>指令格式：</p><p>​ <img src="'+p+'" style="zoom:80%;"></p><p>源操作数：指令加工之前的数据(来源)</p><p>目的操作数：指令加工之后形成的数据(去向)</p><img src="'+h+`" style="zoom:80%;"><p>寄存器的东西是CPU内部的寄存器</p><p>存储器的东西是CPU外部的</p><h3 id="操作数类型-3种方式-寄存器操作数、立即数操作数、存储器操作数-左面最快-依次类推" tabindex="-1">操作数类型：3种方式(寄存器操作数、立即数操作数、存储器操作数(左面最快，依次类推)) <a class="header-anchor" href="#操作数类型-3种方式-寄存器操作数、立即数操作数、存储器操作数-左面最快-依次类推" aria-label="Permalink to &quot;操作数类型：3种方式(寄存器操作数、立即数操作数、存储器操作数(左面最快，依次类推))&quot;">​</a></h3><p>只有存储器有地址属性</p><h3 id="_1、立即数操作数-无存储空间、所以放不了数" tabindex="-1">1、立即数操作数(无存储空间、所以放不了数) <a class="header-anchor" href="#_1、立即数操作数-无存储空间、所以放不了数" aria-label="Permalink to &quot;1、立即数操作数(无存储空间、所以放不了数)&quot;">​</a></h3><p>表示参加操作的数据本身，可以是8位或16位</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		就是AX &lt;- 1234H （赋值）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>注意：</strong></p><p>立即数无法作为目的操作数</p><p>立即数可以是无符号或带符号数，其数值应在可取值范围内</p><h3 id="_2、寄存器操作数" tabindex="-1">2、寄存器操作数 <a class="header-anchor" href="#_2、寄存器操作数" aria-label="Permalink to &quot;2、寄存器操作数&quot;">​</a></h3><p>表示参加运算的数存放在指令给出寄存器中，可以是16位或8位。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   对应长度都是16位寄存器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3、存储器操作数" tabindex="-1">3、存储器操作数 <a class="header-anchor" href="#_3、存储器操作数" aria-label="Permalink to &quot;3、存储器操作数&quot;">​</a></h3><p>表示当前参加运算的数存放在存储器的某一个或两个单元中。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]		(中括号是一个偏移地址)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]		(去1200H里面取数，取多长根据寄存器长度决定，前面AX是16位，就应该取一个16位的长度给AX)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><img src="`+t+`" style="zoom:80%;"><p>高高低低(小端格式/小端存储)</p><ul><li>高位放到高位地址</li><li>低位放到低位地址</li></ul><p>指令的字长与指令的执行速度：</p><ol><li>指令字长由操作码的长度、操作数、地址长度、操作数个数决定</li><li>8086/8088 CPU采用变字长指令格式</li><li>指令的字长操作响应指令的执行速度</li></ol><p>对不同的操作数，指令执行的时间不同：</p><ul><li>(CPU外) 存储器——》立即数 (CPU外)——》 寄存器 (CPU内)</li><li>慢———&gt;快</li><li>MOV AX,BX 2字节(变长指令) 速度最快</li></ul><h2 id="寻址方式" tabindex="-1">寻址方式： <a class="header-anchor" href="#寻址方式" aria-label="Permalink to &quot;寻址方式：&quot;">​</a></h2><ol><li>就是寻找指令操作数所在地址的方式</li><li>只有存储器数有地址属性</li></ol><h3 id="_1、立即寻址-立即数寻址-立即数只有这一种方式-默认ds段" tabindex="-1">1、立即寻址(立即数寻址)：立即数只有这一种方式(默认ds段) <a class="header-anchor" href="#_1、立即寻址-立即数寻址-立即数只有这一种方式-默认ds段" aria-label="Permalink to &quot;1、立即寻址(立即数寻址)：立即数只有这一种方式(默认ds段)&quot;">​</a></h3><p>指令操作数部分直接给出指令的操作数，它与指令操作码相接，顺序存放在代码段中，立即数有8位和16位之分。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">《—— 立即数36H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2A50H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 《—— 立即数 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2A50H</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不能写MOV AL,-200 超出表示范围 ，表示范围为 -128~127</p><h4 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><ol><li>立即寻址不能超出范围</li><li>立即寻址方式只能用于源操作数，主要用于给寄存器赋值</li><li>立即寻址方式不执行总线周期，执行速度快。</li></ol><h3 id="_2、寄存器寻址-只有这一种-默认ds段" tabindex="-1">2、寄存器寻址：只有这一种(默认ds段) <a class="header-anchor" href="#_2、寄存器寻址-只有这一种-默认ds段" aria-label="Permalink to &quot;2、寄存器寻址：只有这一种(默认ds段)&quot;">​</a></h3><p>操作数放在寄存器内，由指令直接给某个寄存器的名字，以寄存器的内容作为操作数。</p><p>寄存器可以是16位的AX、BX、CX、DX、SI、DI、SP、BP寄存器，也可以是8位的AH、AL、BH、BL、CH、CL、DH、Dl寄存器</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		把CX给AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	DEC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		 AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，回送给AL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="注意-1" tabindex="-1">注意： <a class="header-anchor" href="#注意-1" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><ol><li>寄存器寻址方式的指令操作在CPU内部执行，不需要执行总线周期，执行速度快。</li><li>寄存器寻址方式既用于指令的源操作数，也可以用于目的操作数，并且可同时用于源操作数和目的操作数。</li></ol><h3 id="_3-8都是存储器数寻址方式" tabindex="-1">3-8都是存储器数寻址方式 <a class="header-anchor" href="#_3-8都是存储器数寻址方式" aria-label="Permalink to &quot;3-8都是存储器数寻址方式&quot;">​</a></h3><h3 id="_3、直接寻址-默认ds段" tabindex="-1">3、直接寻址(默认ds段) <a class="header-anchor" href="#_3、直接寻址-默认ds段" aria-label="Permalink to &quot;3、直接寻址(默认ds段)&quot;">​</a></h3><p>操作数在存储器中，指令中直接给出操作数所在存储单元的有效地址EA，即段内偏移地址，表示操作数所在存储单元距离段首地址的字节数。有效地址是一个无符号的16位二进制数。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2100H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]			将DS段中2100H单元的内容送给AH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2100H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]			将DS段中2100H单元送给AL；2101H单元的内容送给AH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 《—— (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="注意-2" tabindex="-1">注意： <a class="header-anchor" href="#注意-2" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><ol><li><p>直接寻址方式的操作数所在存储单元的段地址一般在数据寄存器DS中。</p></li><li><p>如果操作数在其他段，则需要在指令中用段超越前缀指出相应的段寄存器名。</p></li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]		超越到ES段去取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	将段附加器寄存器ES的内容乘16，再加上2000H作为操作数所在存储单元地址，取出该存储单元的内容送到寄存器AH中。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4、寄存器间接寻址-默认ds段-除bp默认ss段" tabindex="-1">4、寄存器间接寻址(默认ds段，除bp默认ss段) <a class="header-anchor" href="#_4、寄存器间接寻址-默认ds段-除bp默认ss段" aria-label="Permalink to &quot;4、寄存器间接寻址(默认ds段，除bp默认ss段)&quot;">​</a></h3><p>操作数在存储器中，指令中寄存器的内容作为操作数所在存储单元的有效地址EA(偏移地址)，寄存器仅限BX、BP、SI、DI</p><p>EA包括：[SI]、[DI]、[BX]、[BP]</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 	或	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EA:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>当使用BX、SI、DI 时，操作数所在存储单元的段地址存在数据段寄存器DS中。</li><li>当使用BP时，操作数所在存储单元的段地址存在堆栈段寄存器SS中。</li></ul><h4 id="注意-3" tabindex="-1">注意： <a class="header-anchor" href="#注意-3" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><ul><li>只有SI、DI、BX、SP可作为间址寄存器。</li><li>若操作数所在存储单元不在数据段DS中，需要在指令中用段超越前缀表明其所在段的段名。</li></ul><h3 id="_5、基址寻址-bx-偏移量-默认ds段-bp-偏移量默认ss段" tabindex="-1">5、基址寻址(bx+偏移量 默认ds段，bp+偏移量默认ss段) <a class="header-anchor" href="#_5、基址寻址-bx-偏移量-默认ds段-bp-偏移量默认ss段" aria-label="Permalink to &quot;5、基址寻址(bx+偏移量 默认ds段，bp+偏移量默认ss段)&quot;">​</a></h3><p>基址寻址就是用BX和BP进行寻址</p><p>操作数在存储器内，指令中寄存器(BX或BP)的内容与指令指定的位移量之和作为操作数所在存储单元的有效地址EA(偏移地址)</p><p><img src="`+e+`" alt=""></p><ul><li>使用BX时，段地址为DS的内容。</li><li>使用BP时，段地址为SS的内容。</li></ul><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	SS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(16位偏移量)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	指令：	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，COUNT[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	解:	物理地址=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+16位偏移量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			  =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			  =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23000H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		指令执行结果是将23000H和23001H单元的内容送入寄存器AX中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 或 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; (DS:[BX+2]-&gt;BL)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_6、变址寻址-跟基址一样-变址变成了si、di-默认ds段" tabindex="-1">6、变址寻址(跟基址一样，变址变成了SI、DI，默认ds段) <a class="header-anchor" href="#_6、变址寻址-跟基址一样-变址变成了si、di-默认ds段" aria-label="Permalink to &quot;6、变址寻址(跟基址一样，变址变成了SI、DI，默认ds段)&quot;">​</a></h3><p>操作数在存储器内，指令将变址寄存器SI、DI内容与指令指定的位移量之和作为操作数所在存储单元的有效地址EA（偏移地址）。段地址规定为DS的内容。</p><img src="`+k+`" style="zoom:80%;"><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	COUNT=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	指令：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，COUNT[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	解：物理地址=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+16位偏移量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33000H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	指令执行结果是将33000H和33001H单元的内容送入寄存器AX中。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_7、相对寻址-默认ds段" tabindex="-1">7、相对寻址(默认ds段) <a class="header-anchor" href="#_7、相对寻址-默认ds段" aria-label="Permalink to &quot;7、相对寻址(默认ds段)&quot;">​</a></h3><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+偏移量]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">si</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+偏移量]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">di</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+偏移量]|[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+偏移量]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_8、基址加变址寻址-bx-si或bx-di默认ds段-bp-si或bp-di默认ss段" tabindex="-1">8、基址加变址寻址(bx+si或bx+di默认ds段，bp+si或bp+di默认ss段) <a class="header-anchor" href="#_8、基址加变址寻址-bx-si或bx-di默认ds段-bp-si或bp-di默认ss段" aria-label="Permalink to &quot;8、基址加变址寻址(bx+si或bx+di默认ds段，bp+si或bp+di默认ss段)&quot;">​</a></h3><p>操作数在存储器内。指令将基址寄存器BX，BP与变址寄存器SI、DI的内容之和再加上偏移量(8位或16位)，得到操作数所在存储单元的有效地址EA。</p><p><img src="`+r+`" alt=""></p><ul><li>当使用BX时，段寄存器为DS</li><li>当使用BP时，段寄存器为SS。</li></ul><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	已知	</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0500H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		MK=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1120H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		指令： </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[MK+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			解：物理地址=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0500H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1120H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22620H</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="注意-4" tabindex="-1">注意： <a class="header-anchor" href="#注意-4" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><p>BX/SP只能出现一个，SI/DI只能出现一个+偏移地址，默认使用段由基址存储器决定</p><p>​ 例：[BP+SI] = SS×16+BP+SI</p><h3 id="_9-字符串寻址-不考" tabindex="-1">9.字符串寻址(不考) <a class="header-anchor" href="#_9-字符串寻址-不考" aria-label="Permalink to &quot;9.字符串寻址(不考)&quot;">​</a></h3><p>用于字符串操作指令。规定变址寄存器SI中的内容是源数据串的段内偏移地址，而变址寄存器DI中的内容是目标数据串的段内偏移地址</p><p>源数据串的段地址规定是数据段DS，目标数据串的段地址规定是附加段ES。指令执行后SI和DI的内容自动增量（或减量），增（或减）值为1或2。</p><p><strong>例 :</strong> <strong>MOVSB</strong></p><p>执行后： [DI]←[SI] SI←SI±1 DI←DI±1</p><h3 id="_10-i-o端口寻址-不考" tabindex="-1">10.I/O端口寻址(不考) <a class="header-anchor" href="#_10-i-o端口寻址-不考" aria-label="Permalink to &quot;10.I/O端口寻址(不考)&quot;">​</a></h3><p><strong>寻找输入输出设备的端口地址，可分为直接端口寻 址和间接端口寻址。</strong></p><p><strong>直接端口寻址</strong>：由指令直接给出I/O设备的端口地址。</p><p>​ 它规定端口地址为8位，能寻址256 个端口</p><p><strong>间接端口寻址</strong>：由DX给出I/O设备的端口地址。由于DX 是16位，因此间接端口寻址能寻址多达64K个端口。</p><p>例：IN AL，20H ；将地址为20H的外设内容读入AL中OUT DX，AL；AL中内容输出给以DX的内容为地址的外设</p><h3 id="_11、-隐含寻址" tabindex="-1">11、 隐含寻址 <a class="header-anchor" href="#_11、-隐含寻址" aria-label="Permalink to &quot;11、 隐含寻址&quot;">​</a></h3><p><strong>指令隐含了的一个或两个操作数的地址，即操作数在默认的地址中。</strong></p><p>例： AAA； 对AL中的内容进行十进制加法调整，并把调整后的结果放入AH和AL中。这条指令的隐含操作数是AH和AL。</p><h2 id="mov指令" tabindex="-1">mov指令 <a class="header-anchor" href="#mov指令" aria-label="Permalink to &quot;mov指令&quot;">​</a></h2><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op目，op源</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意：(适用于所有双操作数指令)</p><ol><li>操作数必须对齐(8位/16位)</li><li>两个操作数不能同为存储器数，也不能同为段寄存器</li><li>立即数不能作为目的操作数</li><li>cs段寄存器不能作为目的操作数，IP不能作为操作数</li><li>除 CS 段以外的寄存器可以作为目的操作数，但是只能用通用寄存器送入</li><li>立即数不能直接送入段寄存器</li><li>传送指令不影响标志位</li></ol><h2 id="转移指令" tabindex="-1">转移指令 <a class="header-anchor" href="#转移指令" aria-label="Permalink to &quot;转移指令&quot;">​</a></h2><h3 id="汇编的指令格式" tabindex="-1">汇编的指令格式： <a class="header-anchor" href="#汇编的指令格式" aria-label="Permalink to &quot;汇编的指令格式：&quot;">​</a></h3><ul><li>标号：操作码 操作数,操作数;注释 <ul><li>例： <ul><li>标号(START): 操作码(MOV)，操作数(AX),操作数(2000H);注释</li></ul></li></ul></li></ul><img src="`+d+'" style="zoom:80%;"><h3 id="_1、寻址方式" tabindex="-1">1、寻址方式 <a class="header-anchor" href="#_1、寻址方式" aria-label="Permalink to &quot;1、寻址方式&quot;">​</a></h3><p>控制转移指令在段内，段间转移时，使用直接(相对)寻址或间接寻址。</p><h4 id="_1、直接寻址方式-同一段内-jmp-标号" tabindex="-1">1、直接寻址方式(同一段内)(JMP,标号) <a class="header-anchor" href="#_1、直接寻址方式-同一段内-jmp-标号" aria-label="Permalink to &quot;1、直接寻址方式(同一段内)(JMP,标号)&quot;">​</a></h4><ul><li>段内直接寻址目标程序和源程序在同一个程序段内，只给出源地址和目标地址的差值。此差值是偏移量，他是一个以 IP 为基准段间直接寻址方式(不同代码段)</li><li>直接给出转移目标地址的段地址和段内位移量，用前者取代 CS 当前的值，用后者取代 IP 中当前的值，使程序从一个代码段转移到另一个代码段。</li></ul><h4 id="_2、间接寻址-需要把地址从寄存器或存储器中-取出来-在跳转" tabindex="-1">2、间接寻址(需要把地址从寄存器或存储器中，取出来，在跳转) <a class="header-anchor" href="#_2、间接寻址-需要把地址从寄存器或存储器中-取出来-在跳转" aria-label="Permalink to &quot;2、间接寻址(需要把地址从寄存器或存储器中，取出来，在跳转)&quot;">​</a></h4><h5 id="_1、段内间接寻址-同一段-代码段中" tabindex="-1">1、段内间接寻址(同一段，代码段中) <a class="header-anchor" href="#_1、段内间接寻址-同一段-代码段中" aria-label="Permalink to &quot;1、段内间接寻址(同一段，代码段中)&quot;">​</a></h5><p>​ 指令转移的有效地址存在一个寄存器或存储器中，用它取代当前 IP 的值，实现程序转移。</p><h5 id="_2、段间间接寻址方式-不同代码段" tabindex="-1">2、段间间接寻址方式(不同代码段) <a class="header-anchor" href="#_2、段间间接寻址方式-不同代码段" aria-label="Permalink to &quot;2、段间间接寻址方式(不同代码段)&quot;">​</a></h5><p>​ 指令给出一个存储器地址，从该地址的段内偏移量和段地址，这两个地址在指令执行时用于取代前面的 IP 和 CS 的内容，使程序从一个代码段到另一个代码段。</p><h3 id="_2、转移指令" tabindex="-1">2、转移指令 <a class="header-anchor" href="#_2、转移指令" aria-label="Permalink to &quot;2、转移指令&quot;">​</a></h3><p>通过修改指令的偏移地址或段地址及偏移地址实现程序的转移。</p><ol><li>无条件转移指令 <ol><li>无条件转移到目标地址，执行新的指令</li></ol></li><li>有条件转移指令 <ol><li>在具备一定条件下的情况下转移到目标地址</li></ol></li></ol><h4 id="_1、无条件转移指令" tabindex="-1">1、无条件转移指令 <a class="header-anchor" href="#_1、无条件转移指令" aria-label="Permalink to &quot;1、无条件转移指令&quot;">​</a></h4><ul><li>JMP 指令 <ul><li>格式：JMP OP</li><li>功能：无条件地将控制转移到目标地址去。</li></ul></li></ul><img src="'+E+'" style="zoom:60%;"><img src="'+g+`" style="zoom:80%;"><h4 id="_2、段内转移指令-cs不变、ip变" tabindex="-1">2、段内转移指令(CS不变、IP变) <a class="header-anchor" href="#_2、段内转移指令-cs不变、ip变" aria-label="Permalink to &quot;2、段内转移指令(CS不变、IP变)&quot;">​</a></h4><ol><li>段内直接短转移(修正IP) <ol><li>JMP SHORT(范围-128 ~ +127) OP IP &lt;—— IP+8位偏移量(下一个地址)</li></ol></li><li>段内直接近转移 <ol><li>JMP NEAR(范围 -32768 ~ +32767) PTR OP IP &lt;—— IP+16位偏移量(下一个地址)</li></ol></li><li>段内间接转移 <ol><li>JMP WORD PTR OP 或 JMP OP &lt;—— 寄存器 IP &lt;—— EA，WORD PTR 是运算符</li></ol></li></ol><p>当目标地址高于源地址时称为正向转移，偏移量是正数。</p><p>当目标地址低于源地址时称为反向偏移，偏移量是负数。</p><h4 id="_3、段内转移指令-不同代码段-cs、ip都变" tabindex="-1">3、段内转移指令(不同代码段，CS、IP都变) <a class="header-anchor" href="#_3、段内转移指令-不同代码段-cs、ip都变" aria-label="Permalink to &quot;3、段内转移指令(不同代码段，CS、IP都变)&quot;">​</a></h4><p>段直接转移(远转移) JMP FAR(段间转移运算符) DTR OP</p><p>IP &lt;—— OP的段内偏移地址</p><p>CS &lt;—— OP的段地址</p><h4 id="_4、段间间接转移-jmp-dword-双字节运算符-ptr-op" tabindex="-1">4、段间间接转移 JMP DWORD(双字节运算符) PTR OP <a class="header-anchor" href="#_4、段间间接转移-jmp-dword-双字节运算符-ptr-op" aria-label="Permalink to &quot;4、段间间接转移  JMP  DWORD(双字节运算符)  PTR  OP&quot;">​</a></h4><p>转移的目标段地址及偏移地址存放在内存的连续4个单元之内，前两个单元为偏移地址，后两个单元为段地址。</p><h3 id="条件重复" tabindex="-1">条件重复 <a class="header-anchor" href="#条件重复" aria-label="Permalink to &quot;条件重复&quot;">​</a></h3><p>REPE 相等重复</p><p>REPZ 为零重复</p><p>上面这两个都是 CX不等于0 ZF=1</p><p>REPNE 不相等重复</p><p>REPNZ 不为零重复</p><p>上面这两个都是 CX不等于0 ZF=0</p><h2 id="inc指令-指针加一" tabindex="-1">INC指令(指针加一) <a class="header-anchor" href="#inc指令-指针加一" aria-label="Permalink to &quot;INC指令(指针加一)&quot;">​</a></h2><p>加1<em>指令</em>INC是将操作数[D]的内容进行加1，运算结果仍存入[D]中</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	BX的指针加一，指向下一个单元</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="lea指令-取有效地址" tabindex="-1">LEA指令(取有效地址) <a class="header-anchor" href="#lea指令-取有效地址" aria-label="Permalink to &quot;LEA指令(取有效地址)&quot;">​</a></h2><p>一个计算机指令，可以将有效地址传送到指定的的寄存器。LEA指令返回间接操作数的地址。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,DATA1	将data1里面的地址给bx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="dec指令-dec-cx-影响标志位" tabindex="-1">DEC指令(DEC CX，影响标志位) <a class="header-anchor" href="#dec指令-dec-cx-影响标志位" aria-label="Permalink to &quot;DEC指令(DEC CX，影响标志位)&quot;">​</a></h2><p>-1指令</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  1个数一个数给CX，需要用到循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	DEC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CX</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-1操作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：在DATA1开始的存储区中存放100个8位无符号数，找出其中最大的数存入MAX单元。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,DATA1 	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 把 DATA1的地址给 BX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 从数组取一个值给AL 例如 bx=1, 那么 MOV AL,[1]，只有8位，所以，应该使用AL，AL是低8位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 创建一个计数器用来记录 bx还剩多少个数未比较</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LL:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 让BX指针加1，指向下一个单元</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     CMP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 比较 AL，和 BX 的值，谁的值更大</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     JA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NEXT		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 如果 AL 的值大，跳转到 LL ，没有继续比较</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NEXT:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 把刚才那个值给 AL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	DEC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 			# CX-1，CX-1 = 0 ZF = 1 ,CX-1 不等于 0 ZF=0 (CX-1影响ZF标志位)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	JNZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			# 如果 CX-1 不等于0，继续跳到LL里面，继续比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAX,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 把 AL的值给 MAX</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="调用和返回指令" tabindex="-1">调用和返回指令 <a class="header-anchor" href="#调用和返回指令" aria-label="Permalink to &quot;调用和返回指令&quot;">​</a></h2><ol><li>分段内调用和段间调用 <ol><li>段内调用：主程序/子程序 同一段(CS不变)</li><li>段间调用：主程序/子程序 不同段(CS变)</li></ol></li><li>格式：CALL OP</li><li>功能：将 CALL 指令的下一条指令的地址(断点地址 IP 或 IP 与 CS ) 压栈，新的目标地址(子程序首地址)装入 IP 或 IP 与 CS 中，控制程序转移到由 OP 指明入口的子程序。其中 OP 为 子程序 (过程) 的名字。 <ol><li>操作过程： <ol><li>SP-2 ——&gt; SP，当前压栈，OP所在段地址——&gt; CS(段间)</li><li>SP-2 ——&gt; SP，当前 IP 压栈，OP的偏移地址——&gt; IP 对于段内调用只有(2)。</li></ol></li><li>返回指令： <ol><li>格式：RET (子程序返回)</li><li>功能：通常作为一个子程序的最后一条指令，用以返回到调用子程序的断点处，即从堆栈弹出断点送 IP 和 CS</li></ol></li><li>操作过程： <ol><li>从栈顶弹出一个字给 IP，SP+2——&gt; SP(段内调用)</li><li>从栈顶弹出一个字给 CS，SP+2——&gt; SP(段间调用)</li></ol></li></ol></li></ol><h2 id="条件转移指令" tabindex="-1">条件转移指令 <a class="header-anchor" href="#条件转移指令" aria-label="Permalink to &quot;条件转移指令&quot;">​</a></h2><p>​ 条件转移指令将前一条指令执行结果对状态标志位的影响，作为程序转移的条件。满足条件时转移到指令指定的地址，否则将顺序执行下条指令。可作为判断条件的状态标志有 CF、PF、ZF、SF和OF。</p><p>​ 条件转移指令都是采用相对寻址方式的双字节指令，指令第一条是操作码，第二字节是带符号的位移量。条件转移指令只能在当前段中实现短转移，不影响状态标志。(短转移的范围是 -128~+127字节)。</p><ol><li><p>对无符号数</p><ol><li><p>JA (大于跳) JB (小于跳) JE (等于) JBE (小于等于) JNAE (不大于等于(小于)) JAE (大于等于)</p><p>​ 满足条件跳转，不满足条件顺序执行</p></li><li><p>例：</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;  # AL&gt;BL </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NEXT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	  # 跳到NEXT否则顺序执行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol></li><li><p>有符号数</p><ol><li>JG (大于) JL (小于) JLE (小于等于) JGE(大于等于)</li></ol></li><li><p>对标志位</p><table tabindex="0"><thead><tr><th>进位为1转移</th><th>JC 目标符号</th><th>CF=1</th></tr></thead><tbody><tr><td>进位为0</td><td>JNC 目标符号</td><td>CF=0</td></tr><tr><td>等于/结果为0转移</td><td>JZ/JE 目标符号</td><td>ZF=1</td></tr><tr><td>不等于/结果不为0转移</td><td>JNZ/JNE 目标符号</td><td>ZF=0</td></tr><tr><td>溢出转移</td><td>JO 目标符号</td><td>OF=1</td></tr><tr><td>不溢出转移</td><td>JNO 目标符号</td><td>OF=0</td></tr><tr><td>奇偶位为0/奇偶性为奇转移</td><td>JNP/JPO 目标符号</td><td>PF=0</td></tr><tr><td>奇偶位位1/奇偶性为偶转移</td><td>JP/JPE 目标符号</td><td>PF=1</td></tr><tr><td>符号标志位为0转移</td><td>JNS 目标标号</td><td>SF=0</td></tr><tr><td>符号标志位为1转移</td><td>JS 目标标号</td><td>SF=1</td></tr></tbody></table></li></ol><h2 id="循环控制指令" tabindex="-1">循环控制指令 <a class="header-anchor" href="#循环控制指令" aria-label="Permalink to &quot;循环控制指令&quot;">​</a></h2><ol><li>使用循环控制指令之前，必须在 CX (计数器) 中预置循环次数的初始值。</li><li>不影响状态标志位 (DEC CX，影响标志位)</li><li>主要用于数据块比较、查找关键字等操作 <ol><li>计数循环 <ol><li>格式：LOOP 目标标号</li><li>功能：CX-1——&gt; CX，若 CX ≠ 0 ，循环转移到目标标号，直到 CX=0 退出循环。(先-1，后判断)</li><li>CX=0 的时间循环次数最多，因为先 -1，所有 0-1 就是 0FFFFH，最多为 65536次。</li></ol></li><li>结果为0/相等循环(不常用) <ol><li>格式：LOOP/LOOPE 目标标号</li><li>功能：CX-1——&gt; CX，若 CX ≠ 0 且 ZF=1 时，循环转移到目标标号，直到 CX=0 或 ZF = 0 退出循环。</li></ol></li><li>结果不为0/不相等循环(不常用) <ol><li>格式：LOOPNZ/LOOPNE 目标标号</li><li>功能：CX-1——&gt; CX，若 CX ≠ 0 且 ZF = 0 时，循环转移到目标标号，直到 CX = 0 或 ZF = 1时退出循环。</li></ol></li><li>计数为0转移(不常用) <ol><li>格式：JCXZ 目标标号</li><li>功能：若 CX = 0 时，则转向目标标号，否则顺序执行。处理器控制指令。</li></ol></li></ol></li></ol><h2 id="处理器控制指令" tabindex="-1">处理器控制指令 <a class="header-anchor" href="#处理器控制指令" aria-label="Permalink to &quot;处理器控制指令&quot;">​</a></h2><ol><li><p>标志操作指令</p><ol><li><p>格式：</p><table tabindex="0"><thead><tr><th>CF</th><th>CLC</th><th>置CF=0</th></tr></thead><tbody><tr><td>CF</td><td>STC</td><td>置CF=1</td></tr><tr><td>CF</td><td>CMC</td><td>置CF=CF取反</td></tr><tr><td>DF</td><td>CLD</td><td>置DF=0 (正向串)</td></tr><tr><td>DF</td><td>STD</td><td>置DF=1 (反向串)</td></tr><tr><td>IF</td><td>CLI</td><td>置IF=0</td></tr><tr><td>IF</td><td>STI</td><td>置IF=1</td></tr></tbody></table><p>标志操作指令完成对标志位的置位、复位等操作，这些指令只影响与其相关的标志位。</p></li></ol></li><li><p>CPU控制指令</p><ol><li>处理器暂停指令(不怎么用) <ol><li>格式：HLT</li><li>功能：使处理器处于暂停时停机状态</li><li>说明：HLT 引起的暂停，只有 RESET(复位)、NMI(非屏蔽中断请求)、INTR(可屏蔽中断请求) 信号可以使 CPU 退出暂停状态。</li></ol></li><li>空操作指令 <ol><li>格式：NOP</li><li>功能：在执行指令期间，CPU 不完成任何操作，只是每执行一条 NOP 指令，耗费3个时钟周期的时间。</li></ol></li></ol></li></ol><h2 id="输入输出指令-io操作" tabindex="-1">输入输出指令(IO操作) <a class="header-anchor" href="#输入输出指令-io操作" aria-label="Permalink to &quot;输入输出指令(IO操作)&quot;">​</a></h2><p>CPU对外设端口有两种寻址方式，即直接寻址和间接寻址。直接寻址范围为 00H~0FFH 个端口；间接寻址范围为 0000H~0FFFFH 共64k个端口。间接寻址时，只能用 DX 作为间址寄存器。</p><h3 id="_1、输入指令-in" tabindex="-1">1、输入指令(IN) <a class="header-anchor" href="#_1、输入指令-in" aria-label="Permalink to &quot;1、输入指令(IN)&quot;">​</a></h3><p>​ 格式：IN 累加器(AL/AX)，端口(直接或间接)</p><p>​ 端口如果在 0~255/ 0HH~0FFH 用直接寻址，否则使用间接寻址，间接寻址使用 DX 寄存器 (DX存的是端口地址)</p><p>​ 功能：把一个字节/字 由输入端口传送到 AL/AX 中</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	IN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将端口21H的8位数读到AL中(直接)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">201H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	IN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 间接，把201H的数据给了AX(AX,内容,AX有的是端口数据)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、输出指令-out-分直接寻址和间接寻址-和输入指令差不多" tabindex="-1">2、输出指令(OUT)：分直接寻址和间接寻址(和输入指令差不多) <a class="header-anchor" href="#_2、输出指令-out-分直接寻址和间接寻址-和输入指令差不多" aria-label="Permalink to &quot;2、输出指令(OUT)：分直接寻址和间接寻址(和输入指令差不多)&quot;">​</a></h3><p>​ 格式：OUT 端口 累加器</p><p>​ 功能：把AX中的16位数或AL中的8位数输出到指定的端口。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	OUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 将AL中的8位数输出到指定的端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">511H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	OUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 将AX中的数据传到511H端口(间接)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_3、中断指令" tabindex="-1">3、中断指令 <a class="header-anchor" href="#_3、中断指令" aria-label="Permalink to &quot;3、中断指令&quot;">​</a></h2><h3 id="_1、溢出中断指令" tabindex="-1">1、溢出中断指令 <a class="header-anchor" href="#_1、溢出中断指令" aria-label="Permalink to &quot;1、溢出中断指令&quot;">​</a></h3><p>​ 格式：INTO</p><p>​ 功能：检测 OF 标志位，当 OF = 1 时，产生一个中断类型4的中断，当 OF = 0 时，本指令不起作用。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7FH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	OF = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# INTO 发生溢出中断，如果运算超出表示范围，加 INTO 会发生溢出，没有则不会发生中断</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2、软中断指令" tabindex="-1">2、软中断指令 <a class="header-anchor" href="#_2、软中断指令" aria-label="Permalink to &quot;2、软中断指令&quot;">​</a></h3><p>​ 格式：INT n (n为中断类型号)</p><p>​ 功能：产生一个软件中断，把控制转向一个类型号为 n 的软中断。</p><p>​ 注意：影响标志位 IF、TF</p><h3 id="_3、中断返回指令" tabindex="-1">3、中断返回指令 <a class="header-anchor" href="#_3、中断返回指令" aria-label="Permalink to &quot;3、中断返回指令&quot;">​</a></h3><p>​ 格式：IRET (必弹出 FR、CS、IP 标志位)</p><p>​ 功能：让 CPU 执行完中断服务程序后，正确返回原程序的断点处。</p><p>​ 注意：影响所有标志位</p><h2 id="_8086的指令系统" tabindex="-1">8086的指令系统 <a class="header-anchor" href="#_8086的指令系统" aria-label="Permalink to &quot;8086的指令系统&quot;">​</a></h2><p>​ 指令系统包括九大类、133种基本指令，通过寻址方式的变化与数据形式(字节、字型)的组合，可构成上千条指令。指令系统按功能分为数据传送类、算术运算类、逻辑运算与移位类、串操作类、控制转移类、处理机控制、输入输出、中断等</p><h3 id="数据传送指令" tabindex="-1">数据传送指令 <a class="header-anchor" href="#数据传送指令" aria-label="Permalink to &quot;数据传送指令&quot;">​</a></h3><p>​ 数据传送类指令实现 CPU 内部寄存器之间，CPU与存储器之间、CPU 与 I/O 端口之间的数据传送。</p><p>​ 源操作数的值给目的操作数，源操作数的值不变。</p><h4 id="_1、通过数据传送指令-mov-8位-16位" tabindex="-1">1、通过数据传送指令：MOV (8位/16位) <a class="header-anchor" href="#_1、通过数据传送指令-mov-8位-16位" aria-label="Permalink to &quot;1、通过数据传送指令：MOV (8位/16位)&quot;">​</a></h4><ol><li><p>包括 MOV 、进栈、出栈指令、交换指令和换码指令</p><ol><li><p>格式：MOV(复制) OP(目),OP(源)</p></li><li><p>要求：OP 可以是寄存器，所有寄存器 ( CS、IP、FR 除外)。</p></li><li><p>存储器 OP 可以是寄存器、存储器和立即数。</p></li><li><p>CS(代码段) 和 IP(指令指针寄存器) 一使用 MOV 指令修改，会使程序全乱套。</p></li><li><p>使用存储器，取决于8位还是16位。</p></li><li><p>MOV WORD PTR [SI] (类型声明)，6070H</p><ol><li><p>如果没有 CPU 内部寄存器，就需要声明类型，CPU 内部寄存器(AX、BX、CX、DX、SI、DI、SP、BP)，因为CPU内部寄存器长度是已知的。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6070H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 声明一个字为[SI],通过 MOV 指令把6070H复制一份数给[SI]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol></li><li><p>注意：</p><ol><li><p>堆栈可以不用写类型声明</p></li><li><p>MOV指令的两个操作数(源、目的) 均可采用不同的寻址方式，源操作数和目的操作数的类型必须一致。</p></li><li><p>不允许把立即数作为目的操作数，也不允许向段寄存器送立即数。</p></li><li><p>不允许在段寄存器之间、存储器单元之间传送数据。</p></li><li><p>CS、IP 寄存器不能用作目的操作数。</p></li><li><p>一般传送指令不影响标志位。</p></li><li><p>可以向段寄存器 (DS) 送寄存器数。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	×			</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	 √</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断下列指令正确与否</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		√			</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	 √</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		× 类型不一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0034H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	× 立即数不能送段寄存器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		× CS不能作为目的操作数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]	× 不能同时为存储器操作数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	× 目的不能为立即数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	√</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ol></li></ol></li></ol><h3 id="_2、堆栈操作指令-8086堆栈从高到低形成的" tabindex="-1">2、堆栈操作指令(8086堆栈从高到低形成的) <a class="header-anchor" href="#_2、堆栈操作指令-8086堆栈从高到低形成的" aria-label="Permalink to &quot;2、堆栈操作指令(8086堆栈从高到低形成的)&quot;">​</a></h3><p>堆栈：是按 “后进先出” 的原则工作的，一般存储器区域。</p><img src="`+F+'" style="zoom:80%;"><p>堆栈寄存器 SS —— 段地址</p><p>堆栈指针 SP —— 始终当前栈顶所在的存储单元的地址，即最新入栈数据所在的存储单元的地址。</p><h4 id="压-入-栈操作-先sp-2-1-在给空间-在入栈" tabindex="-1">压(入)栈操作：(先sp-2/1 在给空间，在入栈) <a class="header-anchor" href="#压-入-栈操作-先sp-2-1-在给空间-在入栈" aria-label="Permalink to &quot;压(入)栈操作：(先sp-2/1 在给空间，在入栈)&quot;">​</a></h4><ol><li><p>格式：PUSH OP (先给空间，在压(入)栈)</p></li><li><p>功能：把 OP 字数据压入栈中，结果 SP-2 ——&gt; SP</p></li><li><p>原则：高字节压在高地址，低字节压在低地址。</p><img src="'+C+`" style="zoom:80%;"></li><li><p>执行过程：</p><ol><li>先 SP - 1，后压(进)高位</li><li>再 SP - 1，后压(进)低位</li></ol></li><li><p>压栈执行过程：(空间减1，在进栈)</p><ol><li>SP &lt;— SP-1(先减1) [SP] &lt;- OPH (高位数据进栈)</li><li>SP &lt;- SP -1(再减1) [SP] &lt;- OPL (低位数据进栈)</li></ol></li></ol><h4 id="出栈操作" tabindex="-1">出栈操作： <a class="header-anchor" href="#出栈操作" aria-label="Permalink to &quot;出栈操作：&quot;">​</a></h4><ol><li>格式：POP OP (先把对应的数据拿出来，在收回空间(和压栈操作相反))</li><li>功能：从栈中弹出一个数据 -&gt; OP ，结果 SP+2 —&gt; SP</li><li>出栈执行过程：(先出栈，然后空间加1) <ol><li>OPL &lt;— [SP] (低位出栈) SP &lt;— SP +1 (地址+1)</li><li>OPH &lt;—[SP] (高位出栈) [SP] &lt;— OPL (地址+1)</li></ol></li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用堆栈实现数据交换</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 	PUSH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 	PUSH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 	POP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 	POP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="压栈和出栈的注意事项" tabindex="-1">压栈和出栈的注意事项： <a class="header-anchor" href="#压栈和出栈的注意事项" aria-label="Permalink to &quot;压栈和出栈的注意事项：&quot;">​</a></h4><ol><li>堆栈操作总是按字进行的 (PUSH、POP)。</li><li>压入指令，SP-2，数据在栈顶、弹出指令正好相反。</li><li>操作数可以是存储器、寄存器或段寄存器操作数。</li><li>入栈操作是将操作数写入堆栈，出栈操作是将堆栈的内容写入操作数</li><li>(CS不能用于POP)，不能是立即数 <ol><li>PUSH CS √ (CS入栈) POP CS × (会把堆栈段某些数据给CS，导致程序全乱套)</li><li>PUSH 1200H × POP 2300H × <ol><li>这两条指令主要用来进行现场保护和恢复，以保证子程序调用或中断的程序正常返回。</li><li>堆栈指令是一个隐含寻址 <ol><li>PUSH 隐含了 SS段 (目的操作数) 本应 PUSH AX,SS (这样写错的，就知道PUSH隐含了那个段就行)</li><li>POP 隐含了 SS:SP (源操作数)</li></ol></li></ol></li></ol></li></ol><h3 id="数据交换指令" tabindex="-1">数据交换指令 <a class="header-anchor" href="#数据交换指令" aria-label="Permalink to &quot;数据交换指令&quot;">​</a></h3><ol><li><p>格式：XCHG OP1,OP2</p></li><li><p>功能：实现 OP1 和 OP2 内容的相互转换</p></li><li><p>操作数：通用寄存器或存储器，但不能均为内存单元。</p></li><li><p>注意：</p><ol><li>段寄存器和 IP 不能作为交换指令的操作数。</li><li>继承 MOV 指令的规则，原则。</li><li>OP1，OP2 不能为立即数，不能同为寄存器数</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XCHG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XCHG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XCHG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1122H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	× 不能为立即数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XCHG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	× 不能为段寄存器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XCHG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	√ = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;=&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XCHG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]	× 两个操作数不能同为寄存器数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h3 id="换码指令-查表指令、翻译指令" tabindex="-1">换码指令(查表指令、翻译指令) <a class="header-anchor" href="#换码指令-查表指令、翻译指令" aria-label="Permalink to &quot;换码指令(查表指令、翻译指令)&quot;">​</a></h3><p>​ 换码指令是一条完成字节翻译功能的指令。他可以使累加器中的一个值变换为内存表格中的某一个值，一般用来实现编码制的转换。</p><ol><li><p>格式：XLAT</p></li><li><p>功能：[BX+AL(BX+AL相加作为有效地址 EA )] ——&gt; AL</p></li><li><p>说明：将 BX 和 AL 内容相加作为有效地址 EA ，在一个表格中找出此单元中的内容 ——&gt; AL 中</p></li><li><p>BX —— 表格的首地址</p></li><li><p>AL —— 相对于表格首地址的位移量 (要转换的代码)</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4000H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1004H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	2004H对应的是a 	</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	XLAT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	就类似于 AL = DS*16+BX+AL,最后等于 20004H，对应的就是 A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1004H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]	和上面 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">XLAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 结果一样</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>注意：</p><ol><li>XLAT 是隐含寻址</li><li>使用前，先建立被转换代码(字节型)的数据表。</li><li>换码指令只能使用寄存器 BX、AL，不影响标志位。</li></ol></li></ol><h3 id="目的地址传送指令-存储器数才有地址" tabindex="-1">目的地址传送指令(存储器数才有地址) <a class="header-anchor" href="#目的地址传送指令-存储器数才有地址" aria-label="Permalink to &quot;目的地址传送指令(存储器数才有地址)&quot;">​</a></h3><p>​ 此类指令的功能是将操作数所在存储器的地址送入目标寄存器</p><p>​ 注意：</p><p>​ OP源必须是存储器操作数</p><p>​ OP且必须是16位的通用寄存器</p><p>​ 地址传送指令不影响状态标志位</p><h4 id="_1、取有效地址-lea-指令" tabindex="-1">1、取有效地址 LEA 指令： <a class="header-anchor" href="#_1、取有效地址-lea-指令" aria-label="Permalink to &quot;1、取有效地址 LEA 指令：&quot;">​</a></h4><ol><li>格式：LEA OP目,OP源</li><li>功能：将源操作数的有效地址 EA 送到目的操作数</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5678H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	AX = 5678H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	BX = BP+SI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	取 BX 不变(取以BX为偏移地址的内存单元的偏移地址给BX)，就是取BX的值，还是BX的本身</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	这个[DX×16+BX]找地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>MOV BX,[BX] 和 LEA BX,[BX] 区别：</p><p>MOV BX,[BX]：这个就是在找地址 [DX × 16 + BX ]</p><p>LEA BX,[BX] ：这个去 BX 本身找自己的偏移地址给自己，结果是一样的，但是过程不一样</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATA1 = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,DATA1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			SI = 2000H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,DATA1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			以 DS × 16+DATA1为物理地址取数(取一个字的大小)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,OFFSET DATA1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	取DATA1的偏移地址给SI,SI=2000H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,SEG DATA1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		取DATA1的段地址给SI,SI=1000H</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>OFFSET： 只是在编译的过程中 把标号还原成偏移地址</p><p>OFFSET和 SEG 都是立即寻址</p><p>SEG：单纯的取段地址</p><p>LEA 和 OFFSET 都是取偏移地址，只是原理不同，用法不同，OFFSET 后面只能跟变量名或地址符号</p><h4 id="_2、指令指针送寄存器和ds指令-不太重要" tabindex="-1">2、指令指针送寄存器和DS指令(不太重要) <a class="header-anchor" href="#_2、指令指针送寄存器和ds指令-不太重要" aria-label="Permalink to &quot;2、指令指针送寄存器和DS指令(不太重要)&quot;">​</a></h4><ol><li><p>格式： LDS OP目，OP源</p></li><li><p>功能：把OP源指定的4个字节内容取出，低地址的两字节—&gt;OP目，高地址的两字节—&gt;DS。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	LDS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2130H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	从2130开始取四个字节，2130H、2131H、2132H、2133H，低字节(2个字节)放到 目标地址操作数，					  高字节(2个字节)放到DS寄存器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h4 id="_3、指针送寄存器和-es-指令-不太重要" tabindex="-1">3、指针送寄存器和 ES 指令(不太重要) <a class="header-anchor" href="#_3、指针送寄存器和-es-指令-不太重要" aria-label="Permalink to &quot;3、指针送寄存器和 ES 指令(不太重要)&quot;">​</a></h4><ol><li>格式：LES OP目，OP源</li><li>功能：本指令与LDS指令的操作基本相同，所不同的是将OP源4个字节中高地址的两字节ES。</li><li>例：LES DI，[2130H]； <ol><li>2130H和2131H单元中的内容—&gt;DI；</li><li>2132H和2133H单元中的内容—&gt;ES</li></ol></li><li>跟上面的DS差不多，LDS 2位字节送到 DS，LES 高2位字节送到 ES <ol><li>LES DI,[2130H] <ol><li>2130、2131H (送到目的操作数) 2132H、2133H(送到ES段)</li></ol></li></ol></li></ol><h3 id="算术运算指令" tabindex="-1">算术运算指令 <a class="header-anchor" href="#算术运算指令" aria-label="Permalink to &quot;算术运算指令&quot;">​</a></h3><p>8086的算术运算类指令能够对二进制或十进制(BCD码)数进行加、减、乘、除运算，操作数的数形式可以是8位或16位无符号数或带符号数</p><h4 id="_1、加法指令" tabindex="-1">1、加法指令 <a class="header-anchor" href="#_1、加法指令" aria-label="Permalink to &quot;1、加法指令&quot;">​</a></h4><h5 id="_1、不带进位的加法指令-影响标志位" tabindex="-1">1、不带进位的加法指令(影响标志位) <a class="header-anchor" href="#_1、不带进位的加法指令-影响标志位" aria-label="Permalink to &quot;1、不带进位的加法指令(影响标志位)&quot;">​</a></h5><p>​ 格式：ADD OP目,OP源</p><p>​ 功能：OP目 &lt;— OP源 + OP目，根据结果设置标志位</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		AL+50H —&gt; AL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		DI+SI —&gt; DI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		16位+[DS:DI+1][DS:DI] —&gt; AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	(BX+DI)和(BX+DI+1)2个单元的内容给AX，结果放在BX+DI和BX+DI+1所指的单元</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	BX+2000H和BX+2001H所指的单元内容和AX的内容相加，结果在AX中</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意：</p><p>​ 两操作数的类型相同，类型明确，不能同为寄存器操作数，不能有段寄存器。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例 判断下列指令正确与否</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			× 位数不相同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]		√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]		× [BI]不能存值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 		× 1000H不是存储器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		√</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_2、进位的加法指令-带进位-影响标志位" tabindex="-1">2、进位的加法指令(带进位，影响标志位) <a class="header-anchor" href="#_2、进位的加法指令-带进位-影响标志位" aria-label="Permalink to &quot;2、进位的加法指令(带进位，影响标志位)&quot;">​</a></h5><ol><li>格式：ADC OP目,OP源</li><li>功能：OP目 &lt;— OP源+OP目+CF 置标志位</li><li>说明：主要用于多字节运算，多字节运算时低位字节产生的进位应加到高位。影响 CF 标志位</li><li>和不带进位的加法指令差不多，只是这个是带进位的加法指令</li></ol><h5 id="加1指令" tabindex="-1">加1指令 <a class="header-anchor" href="#加1指令" aria-label="Permalink to &quot;加1指令&quot;">​</a></h5><ol><li>格式：INC OP</li><li>功能：OP &lt;— OP+1</li><li>说明：常用于修改偏移地址和计数次数。操作数可以是8位或者16位通用寄存器或存储器操作数，不能为立即数(立即数没有存储能力)</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		AL &lt;— AL+1		DS:BX+DI -&gt; CPU 在回送过到 BX+DI 去</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BYTE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			[BX+DI] &lt;— [BX+DI] + 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断对错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]		× 不能是立即数，先声明类型 —&gt;	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BYTE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]	√</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	INC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	2000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	× 不能为立即数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意:</p><ol><li>INC 指令 不影响 CF 标志位，影响标志位 AF、OF、PF、SF 和 ZF</li><li>操作数视为无符号数</li></ol><p>总结：</p><p>​ 以上三条指令运算结果将影响状态标志位，但 INC 不影响标志位 CF</p><h4 id="_2、减法指令-减法指令跟加法指令对应" tabindex="-1">2、减法指令 (减法指令跟加法指令对应) <a class="header-anchor" href="#_2、减法指令-减法指令跟加法指令对应" aria-label="Permalink to &quot;2、减法指令 (减法指令跟加法指令对应)&quot;">​</a></h4><h5 id="_1、不带进位的减法指令-影响标志位" tabindex="-1">1、不带进位的减法指令(影响标志位) <a class="header-anchor" href="#_1、不带进位的减法指令-影响标志位" aria-label="Permalink to &quot;1、不带进位的减法指令(影响标志位)&quot;">​</a></h5><ol><li><p>格式：SUB OP目,OP源</p></li><li><p>功能：OP &lt;— OP目 减 OP源，并根据结果设置标志位</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SUB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		BX-CX —&gt; BX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SUB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		AL - (SI+2) 单元中的数 —&gt; AL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SUB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		AL - 20 —&gt; AL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h5 id="_2、带借位的减法指令-影响标志位" tabindex="-1">2、带借位的减法指令(影响标志位) <a class="header-anchor" href="#_2、带借位的减法指令-影响标志位" aria-label="Permalink to &quot;2、带借位的减法指令(影响标志位)&quot;">​</a></h5><ol><li><p>格式：SBB OP目,OP源</p></li><li><p>功能：OP目 &lt;— OP目 减 OP源 减 CF ， 根据结果设置标志位</p></li><li><p>说明：注意用于多字节或多精度数据相减的运算</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SBB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2030H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;				AX - 2030H - CF 给 AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SBB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	将 DI+2 和 DI+3 所指两个单元的内容 减 1000H 减 CF，结果存放在 DI+2和DI+3所							   指的单元</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h5 id="_3、减1指令" tabindex="-1">3、减1指令 <a class="header-anchor" href="#_3、减1指令" aria-label="Permalink to &quot;3、减1指令&quot;">​</a></h5><ol><li><p>格式：DEC OP</p></li><li><p>功能：OP &lt;— OP-1 根据结果设置标志位，不影响 CF</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	DEC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;						AX-1 —&gt; AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	DEC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;						BL-1	—&gt; BL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	DEC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BYTE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			将 DI+2 所指的单元的内容减1，结果回送给此单元</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h4 id="_3、取补指令-0ffffh-op-1" tabindex="-1">3、取补指令(0FFFFH - (OP) + 1) <a class="header-anchor" href="#_3、取补指令-0ffffh-op-1" aria-label="Permalink to &quot;3、取补指令(0FFFFH - (OP) + 1)&quot;">​</a></h4><ol><li><p>格式: NEG OP</p></li><li><p>功能： 0FFFFH - (OP) + 1，将操作数取补后送回源操作数 OP 可以是8位或16位通用寄存器和存储器操作数，不能为立即数。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	NEG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			0-AL —&gt; AL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			AX = 0001H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	NEG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;			AX = 0FFFFH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>注意：</p><ol><li>对 80H 或 8000H 取补时，操作数没有变化，但 OF = 1</li><li>对 CF 影响特殊，只要操作数不是 0 ，总是使 CF =1</li></ol></li></ol><h4 id="_4、比较指令-不送回结果-只影响标志位-根据-cf-的值进行跳转" tabindex="-1">4、比较指令：不送回结果，只影响标志位，根据 CF 的值进行跳转 <a class="header-anchor" href="#_4、比较指令-不送回结果-只影响标志位-根据-cf-的值进行跳转" aria-label="Permalink to &quot;4、比较指令：不送回结果，只影响标志位，根据 CF 的值进行跳转&quot;">​</a></h4><ol><li>若两者相等，相减以后结果为零，ZF标志为1， 否则为0 (大小的比较CMP AX,BX 对无符号数，若结果没有产生借位(CF=0)，则 AX≥BX；若产生了借位（CF＝1），则AX＜BX。 对带符号数，则可根据OF与SF异或运算的结果来判断,结果为1,则AX&lt;BX， 结果为 0 ， 则 AX≥BX</li><li>格式：CMP OP目,OP源</li><li>功能：OP目 减 OP源，不同送结果，只根据结果置标志位</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	CMP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	AX 减 BX，根据结果置标志位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	CMP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	AL 减 20H，根据结果置标志位</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>说明：</p><p>​ 本指令主要通过比较(相减)结果置标志位，表示两个操作数的关系，指令执行的结果不影响目标操作数。</p><p>用途：</p><p>​ 用于比较两个数的大小，可作为条件转移指令转移的条件</p><h4 id="乘法指令-隐含寻址-结果在ax中-考的几率很小" tabindex="-1">乘法指令(隐含寻址，结果在AX中，考的几率很小) <a class="header-anchor" href="#乘法指令-隐含寻址-结果在ax中-考的几率很小" aria-label="Permalink to &quot;乘法指令(隐含寻址，结果在AX中，考的几率很小)&quot;">​</a></h4><h5 id="_1、无符号数乘法" tabindex="-1">1、无符号数乘法 <a class="header-anchor" href="#_1、无符号数乘法" aria-label="Permalink to &quot;1、无符号数乘法&quot;">​</a></h5><ol><li>格式：MUL OP (只能是存储器或通用寄存器数)</li><li>功能：AX &lt;— AL × OP 8位数乘法</li><li>高16位 (DX、AX) &lt;— AX × OP 16位数乘法</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FEH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MUL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FEH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> × </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">254</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> × </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">09ECH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="带符号数乘法-和无符号数乘法格式相同-结果不同" tabindex="-1">带符号数乘法(和无符号数乘法格式相同，结果不同) <a class="header-anchor" href="#带符号数乘法-和无符号数乘法格式相同-结果不同" aria-label="Permalink to &quot;带符号数乘法(和无符号数乘法格式相同，结果不同)&quot;">​</a></h5><ol><li><p>格式：IMUL OP</p></li><li><p>功能：在操作同上，但是操作数为带符号数</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">8位乘法							16位乘法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (8位)					</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(16位)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	×	操作数(8位)			×	操作数(16位)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	----------------			----------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(高8位)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(低8位)		(高16位)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DX</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(低16位)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FEH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           IMUL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FEAH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(取真值(-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(去真值))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          = -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> × </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          = -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(转16位补码，放在AX中)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          = -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          = -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0014H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         	第一种方式：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0100B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(原码)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1111</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1111</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1110</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1011B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(反码)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1111</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1111</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1110</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1100B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(补码)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FECH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          第二种方式：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          	10000H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FECH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>注意：</p><ol><li><p>进行字节运算时，OP目必须是 AL ，乘积在 AX 中</p></li><li><p>进行字运算时，OP目必须是 AX，乘积在DX、AX中，源操作数不允许使用立即数寻址方式</p></li><li><p>运算结果只影响CF、OF，其他的无定义</p></li><li><p>对于 MUL，若字节型数据相乘之积AH=0或字数据相乘之积DX=0，则CF=OF=0,否则CF=OF=1</p><ol><li><p>对于无符号数 8位 × 8位 —&gt; 未超出8位表示范围(0-255)，CF=OF=0</p></li><li><p>对于有符号数 8位 × 8位 —&gt; 未超出8位表示范围(-128 ~ +127)，CF=OF=0</p></li><li><p>对于无符号数 16位 × 16位 —&gt; 未超出16位的表示范围 ( 0 ~ 65535 )，OF = CF = 0</p></li><li><p>对于有符号数 16位 × 16位 —&gt; 未超出16位的表示范围 ( -32768 ~ +32767 )，OF = CF = 0</p></li><li><p>超出表示范围 OF = CF =1</p></li><li><p>结论</p><ol><li><p>如果8位×8位得出16位，高八位 全为0 就是，OF = CF = 0</p></li><li><p>如果是 16位 ×16位 得出 32位，高16位全为0，就是 OF = CF = 0</p></li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	02H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> × </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">002H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		CF=0F=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	09ECH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				CF=OF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol></li><li><p>（以补码的形式进行存储）对于 IMUL 指令，若字节数据相乘之积，AH或字数据相乘之积 DX 的内容是低一半的符号拓展，则 CF=OF=0，否则 CF=OF=1</p><ol><li><p>8位 如果超出 -128 ~ +127 OF = CF = 1 , 若没有超出 OF = CF = 0</p></li><li><p>16位 如果超出 -32767 ~ +32768 OF = CF = 1 , 若没有超出 OF = CF = 0</p></li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><p>AX值 = 0FFECH = -20 (16位) AL值 = OECH = -20 (8位) 那么CF=OF=0，否则 CF=OF=1</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>6. 8位×8位 —&gt; 8位补码(超出(-128~+127)表示范围) OF = CF = 1 否则 OF = CF = 0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7. 有符号在内存中是以补码的形式存储</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. 8位补码 -1 的表示形式 = 0FFH</span></span>
<span class="line"><span>2. 16位补码的 -1 的表示形式 = 0FFFFH   两个值相同 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>8位补：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	正 0 ~ +127(00H~7FH)		负 -128 ~ -1(80H~0FFH)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>16位补：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	0000H ~ 007FH = 8位的 00H ~ 7FH</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	0FF80H ~ 0FFFFH = 8位的 80H ~ 0FFH</span></span>
<span class="line"><span></span></span>
<span class="line"><span>有无符号：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	8位 × 8位 —&gt; 16位(16位的低8位能不能表示这个结果)，如果能 OF=CF=0	如果不能 OF=CF=1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>16位表示范围</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	无符号：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​		0 ~ 65536</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​	有符号：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>​		-32768 ~ + 32767</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></li></ol><p>​ 8位表示范围</p><p>​ 无符号：</p><p>​ 0 ~ 255</p><p>​ 有符号：</p><p>​ -128 ~ +127</p><h4 id="除法指令-隐含寻址-考的几率很小" tabindex="-1">除法指令(隐含寻址，考的几率很小) <a class="header-anchor" href="#除法指令-隐含寻址-考的几率很小" aria-label="Permalink to &quot;除法指令(隐含寻址，考的几率很小)&quot;">​</a></h4><p>​ 指令要求被除数是除数的双倍字长，即当除数是8位/16位时，要求被除数是16/32位的二进制数。</p><h5 id="_1、无符号数除法" tabindex="-1">1、无符号数除法 <a class="header-anchor" href="#_1、无符号数除法" aria-label="Permalink to &quot;1、无符号数除法&quot;">​</a></h5><ol><li>格式：DIV OP</li><li>功能： <ol><li>字节除法：AX/OP —&gt; AL = 商，AH=余数</li><li>字除法：(DX(放高位)、AX(放低位))/OP —&gt; AX = 商 ，DX = 余数</li></ol></li></ol><h5 id="_2、带符号数除法" tabindex="-1">2、带符号数除法 <a class="header-anchor" href="#_2、带符号数除法" aria-label="Permalink to &quot;2、带符号数除法&quot;">​</a></h5><ol><li>格式：IDIV OP</li><li>功能：操作用 DIV，但是操作数为带符号数</li></ol><p>8位除法：</p><img src="`+c+'" style="zoom:80%;"><p>16位除法：</p><p>​ <img src="'+o+`" style="zoom:80%;"></p><h5 id="注意-5" tabindex="-1">注意： <a class="header-anchor" href="#注意-5" aria-label="Permalink to &quot;注意：&quot;">​</a></h5><ol><li>当除数是字节时，被除数必须放在 AX 中。</li><li>当除数是字时，被除数必须放在 DX、AX中。</li><li>商超出规定的范围时，将产生 0 号中断</li><li>IDIV 运算节结果余数的符号与被除数相同。</li><li>带符号数除法运算中，当被除数位数不够时，则需将除数拓展到所需的位数。(8086/8088设有带符号数拓展指令)</li><li>除法的商放到 AL 中，余数放到 AH 中，以补码的形式存放。</li></ol><h3 id="符号拓展指令格式-除法不能8位除8位-所以有字-字节拓展指令" tabindex="-1">符号拓展指令格式(除法不能8位除8位，所以有字，字节拓展指令) <a class="header-anchor" href="#符号拓展指令格式-除法不能8位除8位-所以有字-字节拓展指令" aria-label="Permalink to &quot;符号拓展指令格式(除法不能8位除8位，所以有字，字节拓展指令)&quot;">​</a></h3><h4 id="字节拓展指令-8位—-16位-隐含寻址-隐含-al" tabindex="-1">字节拓展指令(8位—&gt; 16位)，隐含寻址，隐含 AL <a class="header-anchor" href="#字节拓展指令-8位—-16位-隐含寻址-隐含-al" aria-label="Permalink to &quot;字节拓展指令(8位—&gt; 16位)，隐含寻址，隐含 AL&quot;">​</a></h4><ol><li>格式：CBW</li><li>功能：将AL中的数的符号位拓展到 AH</li><li>规则：若最高位 = 1，则执行后 AH = FFH，若最高位 = 0，则执行后 AH = 00H</li></ol><h4 id="字拓展指令-16—-32位-隐含寻址-隐含ax-默认对ax操作" tabindex="-1">字拓展指令(16—&gt; 32位)，隐含寻址，隐含AX，默认对AX操作 <a class="header-anchor" href="#字拓展指令-16—-32位-隐含寻址-隐含ax-默认对ax操作" aria-label="Permalink to &quot;字拓展指令(16—&gt; 32位)，隐含寻址，隐含AX，默认对AX操作&quot;">​</a></h4><ol><li>格式：CWD</li><li>功能：将AX中的数的符号位拓展到DX</li><li>规则： <ol><li>若最高位 = 1，则执行后 DX = FFFFH</li><li>若最高位 = 0，则执行后 DX = 0000H</li></ol></li><li>这两条指令不影响标志位。</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">44H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	正数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	CBW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			结果 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0044H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AFDEH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	负数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	CWD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			结果 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FFFFH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AFDEH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">86H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	负数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	CBW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			结果 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FF86H</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="十进制运算调整指令-看看就行-会计算就行" tabindex="-1">十进制运算调整指令(看看就行，会计算就行) <a class="header-anchor" href="#十进制运算调整指令-看看就行-会计算就行" aria-label="Permalink to &quot;十进制运算调整指令(看看就行，会计算就行)&quot;">​</a></h3><p>BCD码：二进制编码的十进制数，又称为二一十进制数</p><p>BCD有效码：0000 ~ 1001 无效码：1010 ~ 1111</p><p>非组合(非压缩BCD)码：用一字节表示一位十进制的数</p><p>组合(压缩)BCD码：用一个字节表示二位十进制数</p><img src="`+y+`" style="zoom:80%;"><p>由于BCD码是四位二进制数共有16个编码，BCD码只用其中的10个，其余没有的编码 1010~1111 称为无效码。BCD 码运算结果进入或跳过无效码区时，都会出现错误，为了得到正确的结果，必须进行调整</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例： 18+27=45</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		0001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	+	</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0111</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	---------------</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	 低四位的十进制数大于9</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0110</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  加6进行调整</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	---------------</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		0100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0101</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>调整原则：</p><p>​ 运算结果大于9或D3(D7)向高位有进位(错位)，进行加6(或 减6)调整。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断顺序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ① 判断低四位是否大于9，如果大于9，+6进行调整</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ② 判断高四位是否大于9，如果大于9，+6进行调整</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		1000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0010</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	+	</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	1001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	--------------</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		1011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ①低四位大于9，加6进行调整</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0110</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	--------------</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		1100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ②高四位大于9，加6进行调整</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		0110</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	--------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(这个1给了CF)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_1、非组合bcd码的加法调整指令-8位表1位" tabindex="-1">1、非组合BCD码的加法调整指令(8位表1位) <a class="header-anchor" href="#_1、非组合bcd码的加法调整指令-8位表1位" aria-label="Permalink to &quot;1、非组合BCD码的加法调整指令(8位表1位)&quot;">​</a></h4><ol><li>格式：AAA</li><li>对AL中的由两个非组合BCD码相加的和进行调整，结果（非组合BCD码）存于AX中。</li><li>调整过程：若AL的低4位大于9或AF=1，则AL←AL+6， AF←1，CF←1，AH←AH+1，清除AL的高四位；否则清除AL的高4位以及AF和CF标志；</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	08H</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	02H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	---</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 加6调整</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 6H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	---</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	 10H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(必须让高4位为0，CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2、组合bcd码的加法调整指令" tabindex="-1">2、组合BCD码的加法调整指令 <a class="header-anchor" href="#_2、组合bcd码的加法调整指令" aria-label="Permalink to &quot;2、组合BCD码的加法调整指令&quot;">​</a></h4><ol><li>格式： DAA</li><li>功能：对AL中的由两个组合BCD码相加的和进行调整，将结果（组合BCD码）存于 AL中。</li><li>调整过程： 调整方法与AAA类似，只是此指令要分别考虑AL的高4位和低4位。</li><li>若AL低4位大于9或AF=1，则AL+6→AL，置AF=1；</li><li>若AL高4位大于9或CF=1，则AL+60H→AL，置CF=1</li><li>注意：以上两条指令使用时必须紧跟在ADD或ADC之后 。</li></ol><h4 id="_3、非组合bcd码的减法调整指令" tabindex="-1">3、非组合BCD码的减法调整指令 <a class="header-anchor" href="#_3、非组合bcd码的减法调整指令" aria-label="Permalink to &quot;3、非组合BCD码的减法调整指令&quot;">​</a></h4><ol><li>格式： AAS</li><li>功能：对AL中由两个非组合BCD码相减的差进行调整，将结果（非组合BCD码）存于AL中。</li><li>调整过程：调整方法与AAA类似，不同的是当AL的低4位表示的数大于9或AF=1时，将AL-6→AL，AH-１→AH，并将AF和CF置1，清除AL的高四位。</li></ol><h4 id="_4、组合bcd码的减法调整指令" tabindex="-1">4、组合BCD码的减法调整指令 <a class="header-anchor" href="#_4、组合bcd码的减法调整指令" aria-label="Permalink to &quot;4、组合BCD码的减法调整指令&quot;">​</a></h4><ol><li>格式： DAS</li><li>功能：对AL中由两个组合BCD码相减所得的结果进行调整，并将结果（组合BCD码）存于AL中。</li><li>调整过程：调整方法与DAA类似，不同的是当AL的低4位&gt;9或者 AF=1，则AL-6→AL，并置AF=1；而当 AL的高4位大于9或者 CF=1时，则AL-60H → AL，并置CF=1。</li><li>注意：使用AAS、DAS指令必须紧跟在减法指令之后。</li></ol><h4 id="_5、非组合bcd码的乘法调整指令" tabindex="-1">5、非组合BCD码的乘法调整指令 <a class="header-anchor" href="#_5、非组合bcd码的乘法调整指令" aria-label="Permalink to &quot;5、非组合BCD码的乘法调整指令&quot;">​</a></h4><ol><li>格式： AAM</li><li>功能：对AX中的由两个非组合BCD码相乘所得的结果进行调整，并将调整后的结果存于AX中。</li><li>调整过程：AH←AL/0AH（商），AL←AL%0AH(余数)</li><li>注意：本指令必须紧跟在MUL指令之后使用 。</li></ol><h4 id="_6、非组合bcd码的除法调整指令" tabindex="-1">6、非组合BCD码的除法调整指令 <a class="header-anchor" href="#_6、非组合bcd码的除法调整指令" aria-label="Permalink to &quot;6、非组合BCD码的除法调整指令&quot;">​</a></h4><ol><li>格式： AAD</li><li>功能：把AX中的两个非组合BCD码进行调整，然后可用DIV指令实现两个非组合BCD码的除法运算</li><li>调整过程： AL←10×AH＋AL，AH←0</li><li>注意：本指令必须在DIV运算前使用 。</li></ol><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><ul><li>DAA或DAS必须用在ADD（ADC）或SUB（SBB）之后，结果对OF无影响，对其他状态标志位均有影响。</li><li>AAA或AAS必须用在ADD（ADC）或SUB（SBB）之后，结果影响AF和CF，对其他标志位均无意义。</li><li>AAM必须用在MUL之后，结果影响SF、ZF和PF，对AF、CF和OF无影响。</li><li>AAD必须用在DIV之前，结果影响SF、ZF和PF，对AF、CF和OF无影响。</li></ul><h3 id="逻辑运算指令" tabindex="-1">逻辑运算指令 <a class="header-anchor" href="#逻辑运算指令" aria-label="Permalink to &quot;逻辑运算指令&quot;">​</a></h3><p>OP源: 8/16位通用寄存器、存储器操作数或立即数</p><p>OP目: 通用寄存器和存储器操作数。</p><p>除“非”运算外，其余指令都会使OF=CF=0</p><h4 id="_1、逻辑与运算指令-全1则1-否则为0-位运算" tabindex="-1">1、逻辑与运算指令(全1则1，否则为0,位运算) <a class="header-anchor" href="#_1、逻辑与运算指令-全1则1-否则为0-位运算" aria-label="Permalink to &quot;1、逻辑与运算指令(全1则1，否则为0,位运算)&quot;">​</a></h4><ol><li>格式：AND OP目，OP源</li><li>功能：对两个操作数按位进行与操作，结果回送OP目。</li><li>说明：该指令常用于截取（或屏蔽）若干位二进制数</li><li>例：已知AL＝46H，将AL的低４位保留，高４位屏蔽。 <ol><li>AND AL，0FH；AL=06H ，屏蔽高位(高位清0) ，</li><li>取出低位；即对应位为0则清0，</li><li>对应位为1则不变</li></ol></li></ol><h4 id="_2、逻辑或运算指令-有1-则1-位运算" tabindex="-1">2、逻辑或运算指令(有1，则1,位运算) <a class="header-anchor" href="#_2、逻辑或运算指令-有1-则1-位运算" aria-label="Permalink to &quot;2、逻辑或运算指令(有1，则1,位运算)&quot;">​</a></h4><ol><li>格式：OR　OP目，OP源</li><li>功能：对两个操作数进行或运算，结果回送到OP目。</li><li>说明：可用于组合某个字，或将某位置1。 <ol><li>例：MOV AX，8888H；</li><li>OR AX，00FFH ；AX=88FFH，将AX的低8位置1，其他位不变。即对应1位置1，对应0位则不变。</li><li>例：将AL中的非组合BCD码转换成ASCⅡ码。</li><li>OR AL，30H</li></ol></li></ol><h4 id="_3、逻辑异或运算指令-相同-则1-否则为0-位运算" tabindex="-1">3、逻辑异或运算指令(相同，则1，否则为0,位运算) <a class="header-anchor" href="#_3、逻辑异或运算指令-相同-则1-否则为0-位运算" aria-label="Permalink to &quot;3、逻辑异或运算指令(相同，则1，否则为0,位运算)&quot;">​</a></h4><ol><li><p>格式：XOR　OP目，OP源</p></li><li><p>功能：对两个操作数进行异或运算，结果回送到OP目。</p></li><li><p>说明：用于对某个二进制数按位取反或对某寄存器清0。</p><ol><li>例： XOR AL，0FFH ; AL数据按位求反</li><li>例: MOV AX, 3333H XOR AX, 00FFH ;</li><li>结果：AX=33CCH， AH数据保持不变，对AL数据求反。</li><li>即对应0不变,对应1求反 。</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：寄存器清0（有4条指令可达到AX清0目的）：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    XOR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;      AL清0	CF=0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		不影响 CF</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SUB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h4 id="_4、逻辑非运算指令-取反-位运算" tabindex="-1">4、逻辑非运算指令(取反,位运算) <a class="header-anchor" href="#_4、逻辑非运算指令-取反-位运算" aria-label="Permalink to &quot;4、逻辑非运算指令(取反,位运算)&quot;">​</a></h4><ol><li>格式：NOT　OP</li><li>功能：对操作数逐位取反后回送到原处。</li><li>例： MOV AX，1 <ol><li>NOT AX ；AX=0FFFEH</li></ol></li><li>注意： <ol><li>该指令只是执行求反操作，而不是求反码指令，对符号位也求反。</li><li>不影响标志位。</li></ol></li></ol><h4 id="_5、测试指令-与运算-不会送结果" tabindex="-1">5、测试指令(与运算，不会送结果) <a class="header-anchor" href="#_5、测试指令-与运算-不会送结果" aria-label="Permalink to &quot;5、测试指令(与运算，不会送结果)&quot;">​</a></h4><ol><li>格式：TEST　OP目，OP源</li><li>功能：将OP目与OP源进行与运算，不回送结果，只根据结果置标志位。</li><li>说明：主要用来检测目的操作数的某些位是1或0,根据测试结果,决定转向 <ol><li>例：测试AX中的D15位是1还是0 <ol><li>TEST AX，8000H；若D15为1，ZF=0，否则ZF=1</li></ol></li></ol></li><li>总结： <ol><li>AND OR XOR TEST均影响标志，CF=0，OF=0，而PF，SF，ZF由结果而定，AF无意义。此类指令可用来清CF，常用于拆字，拼字。</li><li>NOT 不影响标志。</li></ol></li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例:   将BX的高四位与CX的低四位,AX的中间8位反码,拼成新字送至AX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	如:  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AAAAH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BBBBH</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  CX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CCCCH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	=&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B55CH</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  BH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0F0H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ; 取BX高四位，BH=B0H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  CL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FH</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ; 取CL低四位， CL=0CH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FF0H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     ; 取AX中间八位，AX=0AA0H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     XOR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0FF0H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     ; 求反  AX=0550H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     OR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     OR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ;  拼字  AX=B55CH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="移位指令" tabindex="-1">移位指令 <a class="header-anchor" href="#移位指令" aria-label="Permalink to &quot;移位指令&quot;">​</a></h3><img src="`+b+'" style="zoom:67%;"><p>规定：</p><p>​ 移动一位时由指令中的计数值直接给出，移动两位及以上，则移位次数由 CL 指令，即必须将移位位数 N 事先装入 CL 中。</p><h4 id="_1、非循环移位指令" tabindex="-1">1、非循环移位指令 <a class="header-anchor" href="#_1、非循环移位指令" aria-label="Permalink to &quot;1、非循环移位指令&quot;">​</a></h4><img src="'+u+`" alt="image-20230924142302666" style="zoom:80%;"><ul><li>算术左移与逻辑左移相同，可用于无符号数乘2操作。</li><li>逻辑右移可用于无符号数除2操作。</li><li>算术右移可以用于有符号数除2操作。</li><li>左移进 CF 表示进位，右移进 CF 表示余数</li><li>左移位可以判定 AX 有中 &quot; 1 &quot; 的个数</li></ul><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 逻辑左移</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SHL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0010B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 算术左移</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0010B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 逻辑右移</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SHR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 算术右移</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	SAR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 算术逻辑移位指令是双操作数指令，操作数可以是除立即数之外的任何寻址方式；当计数值大于1时,必须使用CL作计数器。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">， </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FFFCH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           SAR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           结果：  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FFFEH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，BX由-4变为-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例:  		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0CH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ；</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           SHL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    BL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;    BL=24</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_2、循环移位指令" tabindex="-1">2、循环移位指令 <a class="header-anchor" href="#_2、循环移位指令" aria-label="Permalink to &quot;2、循环移位指令&quot;">​</a></h4><img src="`+m+`" alt="image-20230924142650976" style="zoom:67%;"><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 循环左移,ROL OP目,OP源</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ROL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 循环右移,ROR OP目,OP源</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	ROR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 带进位循环左移(带CF一起玩)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	RCL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0010B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 带进位循环右移(带CF一起玩)	</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	RCR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CF=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注意：</p><p>​ 当计数值大于1时,必须使用CL作计数器。</p><h3 id="字符串操作指令-不太重要-隐含寻址" tabindex="-1">字符串操作指令(不太重要)：隐含寻址 <a class="header-anchor" href="#字符串操作指令-不太重要-隐含寻址" aria-label="Permalink to &quot;字符串操作指令(不太重要)：隐含寻址&quot;">​</a></h3><p>串操作指令实现对一串字符或数据的操作，分为基本串操作指令和重复前缀指令。基本串操作指令每执行一次只能处理一个数据，与重复前缀指令结合可以处理一串数据。</p><p>串操作有如下共同点：</p><ol><li>源串一般存放在数据段(DS)，偏移地址由SI指定， 目标串在附加段(ES)，偏移地址由DI指定。</li><li>每执行一次串操作后自动修改指针SI、DI。若方向标志DF=0，则每次操作后SI和DI自动加1(或加2)；若DF=1，则每次操作后SI和DI自动减1(或减2)修改。</li><li>串长(字或字节个数)存放在CX中。</li></ol><p>注意：在执行指令前必须DS、ES、SI、DI、DF、CX置好需要的值，它们是串操作指令的隐含操作数。</p><h4 id="_1、字符串串操作指令" tabindex="-1"><strong>1、字符串串操作指令</strong> <a class="header-anchor" href="#_1、字符串串操作指令" aria-label="Permalink to &quot;**1、字符串串操作指令**&quot;">​</a></h4><p>字符串传送指令</p><ol><li>格式： MOVS OP目，OP源 <ol><li>MOVSB——字节传送</li><li>MOVSW——字传送 <ol><li>[DS:SI] 传送到 [ES:DI] 如果是字节就传送 1个字节，如果是字，还需要 [DS:SI+1/SI-1] 传送给 [ES:DI+1/DI-1]，加1减1有 DF 决定</li></ol></li></ol></li><li>功能：把位于数据段由SI指定的内存单元的字节/字数据传送到附加段由DI指定的内存单元，指令不影响状态标志位。</li><li>过程： <ol><li><a href="ES:DI" target="_blank" rel="noreferrer">DI</a>←<a href="DS:SI" target="_blank" rel="noreferrer">SI</a> 若DF=0 SI←SI+1/2，DI←DI+1/2</li><li><a href="ES:DI" target="_blank" rel="noreferrer">DI</a>←<a href="DS:SI" target="_blank" rel="noreferrer">SI</a> 若DF=1 SI←SI - 1/2，DI←DI-1/2</li></ol></li><li>说明：串传送指令常与无条件重复前缀连用</li></ol><h4 id="_2、字符串比较指令" tabindex="-1">2、字符串比较指令 <a class="header-anchor" href="#_2、字符串比较指令" aria-label="Permalink to &quot;2、字符串比较指令&quot;">​</a></h4><ol><li>格式： <ol><li>CMPS OP目，OP源</li><li>CMPSB ——字节比较</li><li>CMPSW ——字比较</li></ol></li><li>功能：把位于数据段由SI指定的字节/字数据与附加段由DI指定的字节/字数据进行比较，结果不保存，但影响状态标志位，并由DF状态决定SI、DI的修改方向。</li><li>过程：[SI] -[DI] SI←SI±1/2，DI←DI±1/2</li><li>说明：串比较指令常与条件重复前缀连用，指令的执行不改变操作数，仅影响标志位。</li></ol><h4 id="_3、字符串搜索指令" tabindex="-1">3、字符串搜索指令 <a class="header-anchor" href="#_3、字符串搜索指令" aria-label="Permalink to &quot;3、字符串搜索指令&quot;">​</a></h4><ol><li>格式： <ol><li>SCAS OP</li><li>SCASB</li><li>SCASW</li></ol></li><li>功能: 把AL/AX中的内容与附加段由DI指定的一个字节/字数据进行比较，结果不保存，但影响状态标志位，并由DF状态决定DI的修改方向。</li><li>过程： <ol><li>字节——AL-[DI]，DI←DI±1</li><li>字——AX-[DI]，DI←DI±2</li></ol></li></ol><h4 id="_4、取字符串指令" tabindex="-1">4、取字符串指令 <a class="header-anchor" href="#_4、取字符串指令" aria-label="Permalink to &quot;4、取字符串指令&quot;">​</a></h4><ol><li>格式： <ol><li>LODSB ——AL←[SI]，SI←SI±1</li><li>LODSW ——AX←[SI]，SI←SI±2</li></ol></li><li>功能：把位于数据段由SI指定内存单元的内容取到AL或AX中，并修改SI的内容，指向下一字节/字单元。</li></ol><h4 id="_5、存字符串指令" tabindex="-1">5、存字符串指令 <a class="header-anchor" href="#_5、存字符串指令" aria-label="Permalink to &quot;5、存字符串指令&quot;">​</a></h4><ol><li>格式： <ol><li>STOSB ——[DI]←AL，DI←DI±1</li><li>STOSW ——[DI]←AX，DI←DI±2</li></ol></li><li>功能: 把寄存器AL或AX中的内容存到附加段由DI指定的内存单元，并修改DI的内容，指向下一字节/字的存放单元。</li></ol><h3 id="重复前缀指令-经常考" tabindex="-1">重复前缀指令(经常考) <a class="header-anchor" href="#重复前缀指令-经常考" aria-label="Permalink to &quot;重复前缀指令(经常考)&quot;">​</a></h3><p>​ 基本串操作指令每执行一次只能处理一个数据，与重复前缀指令结合可以处理一串数据。</p><ol><li>无条件重复(REP)：CX ≠ 0 退出，若 CX ≠ 0，则 CX ← CX-1 继续重复操作，直到 CX = 0 为止</li><li>相等/为0重复(REPE/REPZ)：若 CX ≠ 0 且 ZF = 1，则 CX ← CX -1 继续重复操作，直到 CX = 0 或 ZF = 0 为止(退出)</li><li>不相等/不为0重复(REPNE/REPNZ)：若 CX ≠ 0 且 ZF = 0，则 CX ← CX-1 继续重复操作，直到 CX = 0 或 ZF = 1 为止。</li></ol><p>注意：</p><ul><li>重复前缀指令不能单独使用，其后必须跟基本串操作指令，控制基本串操作指令重复执行，其执行过程相当于一个循环程序的运行。在每次重复之后，地址指针 SI 和 DI 都被修改，但指令指针 IP 仍保持指向带有前缀的串操作指令的地址。</li><li>重复执行的次数由数据串长度决定，数据串长度应预置在寄存器 CX 中。</li><li>执行重复前缀指令不影响标志位。</li></ul>`,367)]))}const I=i(A,[["render",B]]);export{H as __pageData,I as default};
