import{_ as i,c as s,a2 as l,o as t}from"./chunks/framework.3VuPyQdv.js";const c=JSON.parse('{"title":"宏汇编语言的基本语法","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu04.md","filePath":"doc-text/emu/emu04.md","lastUpdated":1751538763000}'),e={name:"doc-text/emu/emu04.md"};function n(h,a,p,r,d,o){return t(),s("div",null,a[0]||(a[0]=[l(`<h1 id="宏汇编语言的基本语法" tabindex="-1">宏汇编语言的基本语法 <a class="header-anchor" href="#宏汇编语言的基本语法" aria-label="Permalink to &quot;宏汇编语言的基本语法&quot;">​</a></h1><h2 id="_1、常数、变量和符号" tabindex="-1">1、常数、变量和符号 <a class="header-anchor" href="#_1、常数、变量和符号" aria-label="Permalink to &quot;1、常数、变量和符号&quot;">​</a></h2><h3 id="_1、常数" tabindex="-1">1、常数 <a class="header-anchor" href="#_1、常数" aria-label="Permalink to &quot;1、常数&quot;">​</a></h3><p>常数：没有任何属性的纯数值。在汇编期间，它的值已经完全确定，而且在程序的运行中也不会发生变化。它可以有以下几种类型</p><ol><li>二进制数：以字母和B结尾的由一串 &quot;0&quot; 和 &quot;1&quot; 组成的序列，例如：001011B</li><li>八进制数：以字母0或Q结尾，由若干个0到7的数字组成的序列：例如255Q</li><li>十进制数：由若干个0到9的数字组成的序列，可以以字母 D 结尾，也可以省略字母 D 例如：1234D 或 1234</li><li>十六进制数：以字母H结尾，由若干个0到9的数字和字母A到F组成的序列，且必须以数字开头。例如：56H，DB3FH。</li><li>字符串数：用引号括起来的一个或多个字符。这些字符以ASCII码形式存在内存中。例如：&quot;A&quot; 的值是41H，而 &quot;B&quot; 的值是42H，因以串常量与整数常量可以交替使用。</li></ol><h4 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><ul><li>为了区分 A~F 组成的一个字符串是十六进制数还是英文符号；规定凡以字母 A~F 为起始字符的十六进制数，必须在前面冠以数字 &quot;0&quot;。</li><li>总之，常数主要以立即数，位移量的形式出现在指令语句或数据定义伪指令中。</li></ul><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p>BUF 默认指向 0 的地址</p><ol><li>变量：通常是存放在某些存储单元的数据，这些数据在程序运行期间可以修改。</li><li>变量名：表示数据在段中的有效地址，由用户指定。变量名是可选的，如果使用变量名，它代表数据区中第一个数据项的地址。 <ol><li>变量的三个属性:(数据段定义的变量，存储器内容) <ol><li>段属性(SEGMENT)：表示变量所在段的段首地址。</li><li>偏移属性(OFFSET)：表示变量的偏移地址。</li><li>类型属性(TYPE)：表示变量占用存储单元的字节数。类型：字节、字、双子、四字、十字节类型。</li></ol></li><li>变量是用数据定义伪指令DB、DW、DD等定义的。 <ol><li>DB(BYTE) ——字节</li><li>DW(WORD) —— (2字节)</li><li>DD(DWORD) —— (4字节)</li></ol></li><li>注意：变量也可以定义一个数据区或存储区，但变量名仅表示该数据区或存储区的第一个数据单元(即数据区或存储区的首地址)。</li></ol></li></ol><h3 id="标号-标号-操作码-操作数1-操作数2" tabindex="-1">标号: 标号：操作码 操作数1,操作数2 <a class="header-anchor" href="#标号-标号-操作码-操作数1-操作数2" aria-label="Permalink to &quot;标号: 标号：操作码 操作数1,操作数2&quot;">​</a></h3><p>表示一条指令所在的地址，也是指令语句的地址符号，常用作转移指令(包含子程序调用指令)的操作数，即目标地址。</p><p>通常由字母数字组成，但第一个字符必须为字母。最多允许 31个字符，且可以使用下划线 (一) 使用标号容易阅读。</p><p>标号的三个属性：</p><ol><li>段属性(SEGMENT)：表示标号所在段的段基址。</li><li>偏移地址(OFFSET)：表示标号的偏移地址。</li><li>距离属性(类型属性 TYPE)：表示标号作为段内或段间的转移属性。 <ol><li>距离属性分为两种： <ol><li>NEAR(近)(段内)：表示本标号只能被标号所在段内的转移和调用指令访问(即段内转移)</li><li>FAR(远)(段间)：表示本标号可以被其他段(不是标号所在段)的转移和调用指令访问(即段间转移)</li></ol></li></ol></li></ol><h3 id="运算符与表达式" tabindex="-1"><strong>运算符与表达式</strong> <a class="header-anchor" href="#运算符与表达式" aria-label="Permalink to &quot;**运算符与表达式**&quot;">​</a></h3><ol><li>表达式 <ol><li>数值表达式：只产生数值结果</li><li>地址表达式：产生的结果是一个存储器地址，若该地址存放的是数据，一般称它为变量，若存放的是指令，一般称它为标号.</li></ol></li></ol><p>运算符主要包括以下6种类型：</p><h4 id="_1、算术运算符" tabindex="-1">1、算术运算符 <a class="header-anchor" href="#_1、算术运算符" aria-label="Permalink to &quot;1、算术运算符&quot;">​</a></h4><p>包括：+、-、*、/、MOD(求余)、SHL（左移）和右移（SHR）</p><p>例：CONT = 14*4</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CONT = CONT/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ MOV AL, 21H SHL 2</p><h4 id="_2、-逻辑运算符" tabindex="-1">2、 逻辑运算符 <a class="header-anchor" href="#_2、-逻辑运算符" aria-label="Permalink to &quot;2、 逻辑运算符&quot;">​</a></h4><p>包括：AND、OR、XOR和NOT。只适用于对常数进行逻辑运算。</p><p>例: AND DX，PORT AND 0FE</p><h4 id="_3、关系运算符" tabindex="-1">3、关系运算符 <a class="header-anchor" href="#_3、关系运算符" aria-label="Permalink to &quot;3、关系运算符&quot;">​</a></h4><p>包括：EQ（相等）、NE（不相等）、</p><p>​ LT（小于）、GT（大于）、</p><p>​ LE（小于或等于）、GE（大于或等于）。</p><p>结果：若关系为假（不成立），结果为0；</p><p>​ 若关系为真（成立），结果为0FFH或0FFFFH。</p><p>例: MOV BX，PORT LT 5</p><p>例: MOV BX，( (PORT LT 5) AND 20) OR</p><p>​ ( (PORT GE 5) AND 30 )</p><p>​ 当PORT&lt;5时，等价 MOV BX, 20</p><p>​ 当PORT&gt;5时，等价 MOV BX, 30</p><h3 id="综合运算符" tabindex="-1">综合运算符 <a class="header-anchor" href="#综合运算符" aria-label="Permalink to &quot;综合运算符&quot;">​</a></h3><h4 id="_1、ptr运算符" tabindex="-1">1、PTR运算符 <a class="header-anchor" href="#_1、ptr运算符" aria-label="Permalink to &quot;1、PTR运算符&quot;">​</a></h4><ol><li><p>格式：类型 PTR 表达式</p></li><li><p>功能：用于指出变量、标号或地址表达式的类型属性，新的类型只在当前指令内有效。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	MOV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BYTE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ；指明目的操作数为字节类型                          </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	JMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PTR [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]；指明目的操作数为双字类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h4 id="_2、short运算符" tabindex="-1">2、SHORT运算符 <a class="header-anchor" href="#_2、short运算符" aria-label="Permalink to &quot;2、SHORT运算符&quot;">​</a></h4><ol><li><p>格式：SHORT 标号</p></li><li><p>功能：当转移的目标地址与本转移指令的下一条指令之间的字节距离在 -128~ +127 范围时，可以用 SHORT 运算符进行说明。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	L1：  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JMP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SHORT  L2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     		┇</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     L2：  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               ┇</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h2 id="分析操作符-数值返回运算符" tabindex="-1">分析操作符(数值返回运算符) <a class="header-anchor" href="#分析操作符-数值返回运算符" aria-label="Permalink to &quot;分析操作符(数值返回运算符)&quot;">​</a></h2><h3 id="_1、取地址的偏移量" tabindex="-1">1、取地址的偏移量 <a class="header-anchor" href="#_1、取地址的偏移量" aria-label="Permalink to &quot;1、取地址的偏移量&quot;">​</a></h3><ol><li>格式：OFFSET 变量名或标号</li><li>功能：取变量或标号所在段的段内偏移量</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,BUF</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	实打实取了偏移地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,OFFSET,BUF(源操作数立即寻址)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		编译的过程，把BUF还原成偏移地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2、取段基址" tabindex="-1">2、取段基址 <a class="header-anchor" href="#_2、取段基址" aria-label="Permalink to &quot;2、取段基址&quot;">​</a></h3><ol><li>格式：SEG 变量名或标号</li><li>功能：取变量名或标号所在段的段首地址。</li></ol><h3 id="_3、求变量名或标号的类型值" tabindex="-1">3、求变量名或标号的类型值 <a class="header-anchor" href="#_3、求变量名或标号的类型值" aria-label="Permalink to &quot;3、求变量名或标号的类型值&quot;">​</a></h3><ol><li>格式：TYPE 变量名或标号</li><li>功能：返回一个数字值。若TYPE加在变量名前，返回该变量的类型属性；若加在标号前，返回该变量的距离属性。</li></ol><p>​ 存储器操作数的类型值</p><table tabindex="0"><thead><tr><th></th><th>属性</th><th>类型值</th></tr></thead><tbody><tr><td>变量(占的字节数)</td><td>BYTE</td><td>1</td></tr><tr><td>变量(占的字节数)</td><td>WORD</td><td>2</td></tr><tr><td>变量(占的字节数)</td><td>DWORD</td><td>4</td></tr><tr><td>标号</td><td>NEAR</td><td>-1</td></tr><tr><td>标号</td><td>FAR</td><td>-2</td></tr></tbody></table><h3 id="_4、求长度" tabindex="-1">4、求长度 <a class="header-anchor" href="#_4、求长度" aria-label="Permalink to &quot;4、求长度&quot;">​</a></h3><ol><li><p>格式：LENGTH 变量名</p></li><li><p>功能：返回一个变量名所占存储单元(字节、字或双字)的数目。若变量是用重复定义字句说明的，则返回DUP(重复)前面的数值，其余返回。</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BUF </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;	从0开始100个1放到 DB里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,LENGTH BUF</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;		AX=100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h3 id="_5、求大小" tabindex="-1">5、求大小 <a class="header-anchor" href="#_5、求大小" aria-label="Permalink to &quot;5、求大小&quot;">​</a></h3><ol><li>格式：SIZE 变量名</li><li>功能：返回变量名所占存储单元的字节数，它等于 LENGTH 和 BYTE 两个运算符返回值的乘积。</li></ol>`,56)]))}const u=i(e,[["render",n]]);export{c as __pageData,u as default};
