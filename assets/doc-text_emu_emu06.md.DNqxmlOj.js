import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.3VuPyQdv.js";const g=JSON.parse('{"title":"汇编语言程序的结构","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu06.md","filePath":"doc-text/emu/emu06.md","lastUpdated":1745056071000}'),p={name:"doc-text/emu/emu06.md"};function h(k,s,e,t,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="汇编语言程序的结构" tabindex="-1"><strong>汇编语言程序的结构</strong> <a class="header-anchor" href="#汇编语言程序的结构" aria-label="Permalink to &quot;**汇编语言程序的结构**&quot;">​</a></h1><p>一个标准的汇编语言源程序的框架结构：</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATA  SEGMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BYTE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;默认任意存放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ┇	    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORD</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;从偶地址开始存放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ┇       PAPA</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;从64字节开始存放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ┇	    PAGE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;从256字节开始存放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATA  ENDS</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#堆栈段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">STACK SEGMENT  PARA  STACK ‘STACK’；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               ┇							 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">STACK  ENDS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#定义代码段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CODE SEGMENT				</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ASSUME  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:CODE，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:STACK，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:DATA，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: DATA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#设置数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">START:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，DATA</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，STACK </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ┇</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4CH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  21H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PRA PROC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NEAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PRA ENDP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┇	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CODE  ENDS						                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">END START</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="dos系统功能调用" tabindex="-1">DOS系统功能调用 <a class="header-anchor" href="#dos系统功能调用" aria-label="Permalink to &quot;DOS系统功能调用&quot;">​</a></h2><p>MS-DOS系统中设置了几十个内部子程序，在汇编语言源程序中可采用软中断指令调用它们。 MS-DOS中常用的软中断有8条，系统规定它们的中断类型码为20H—27H， INT 21H是DOS系统功能调用。</p><p>INT 21H中断本身包含很多子程序，调用它们时采用统一的格式：</p><ol><li>传送入口参数到指定寄存器中</li><li>功能号送入AH寄存器</li><li>INT 21H</li></ol><h3 id="_1、键盘输入单字符——1号系统功能调用-返回值在-al中" tabindex="-1">1、键盘输入单字符——1号系统功能调用（返回值在 AL中） <a class="header-anchor" href="#_1、键盘输入单字符——1号系统功能调用-返回值在-al中" aria-label="Permalink to &quot;1、键盘输入单字符——1号系统功能调用（返回值在 AL中）&quot;">​</a></h3><p>格式：MOV AH，1</p><p>​ INT 21H</p><p>功能：无入口参数，执行时，系统等待键盘输入，待按下任何一键，系统先检查是否是Ctrl—Break键。若是则退出，否则将键入值置入AL中，并在屏幕上显示该字符。</p><h3 id="_2、输出单字符——2号系统功能调用-显示放在-dl-寄存器" tabindex="-1">2、输出单字符——2号系统功能调用（显示放在 DL 寄存器） <a class="header-anchor" href="#_2、输出单字符——2号系统功能调用-显示放在-dl-寄存器" aria-label="Permalink to &quot;2、输出单字符——2号系统功能调用（显示放在 DL 寄存器）&quot;">​</a></h3><p>格式： MOV DL，‘A’</p><p>MOV AH，2</p><p>INT 21H</p><p>功能：将DL中的字符送屏幕显示。</p><h3 id="_3、键盘输入字符串——0ah号系统功能调用" tabindex="-1">3、键盘输入字符串——0AH号系统功能调用 <a class="header-anchor" href="#_3、键盘输入字符串——0ah号系统功能调用" aria-label="Permalink to &quot;3、键盘输入字符串——0AH号系统功能调用&quot;">​</a></h3><p>功能：将键盘输入的字符串写入到内存缓冲区中，必须事先定义一个缓冲区。</p><p>​ 缓冲区的第一个字节：该缓冲区存放的字节数。</p><p>​ 第二个字节：预留，系统填写实际的字符数。</p><p>​ 从第三个开始：存放字符串，回车（0DH）表示结束。</p><p>格式：</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	┇</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BUF </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  20</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ; 预留长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ？	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 实际输入长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（？）	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 真正存的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	   ┇ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，OFFSET BUF</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0AH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21H</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4、输出字符串——9号系统功能调用" tabindex="-1">4、输出字符串——9号系统功能调用 <a class="header-anchor" href="#_4、输出字符串——9号系统功能调用" aria-label="Permalink to &quot;4、输出字符串——9号系统功能调用&quot;">​</a></h3><p>功能：将指定的内存缓冲区中的字符串在屏幕上显示出来，缓冲区的字符串以“$”为结束标志。</p><p>格式：</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BUF </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ‘GOOD BYE$’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             ┇</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，OFFSET BUF</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  21H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">结果：显示GOOD BYE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5、-返回操作系统——4ch号系统功能调用" tabindex="-1">5、 返回操作系统——4CH号系统功能调用 <a class="header-anchor" href="#_5、-返回操作系统——4ch号系统功能调用" aria-label="Permalink to &quot;5、  返回操作系统——4CH号系统功能调用&quot;">​</a></h3><p>格式： MOV AH，4CH</p><p>​ INT 21H</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATA SEGMENT             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 定义数据段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SHORT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;YES$&quot;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 定义正确显示数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SHORT1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;NO$&quot;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 定义失败显示数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DATA ENDS                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 代码段结束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CODE SEGMENT             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 定义 代码段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ASSUME </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:CODE,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:DATA   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 链接代码段和数据段</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">START:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                       ; 开始</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,DATA              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 装载 数据段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                ; 送入代码段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 ; 定义键盘输入的数据，如果是 Ctrl+Break 程序退出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  ; 执行21H(软中断),程序退出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CMP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 比较是否为1，1 对应的 ASCII 码值是 31H ，所以放到低八位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    JZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SO                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 如果输入的为 1 跳转到 SO</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,OFFSET SHORT1     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 如果不为 1 继续执行，把 SHOTR1 的偏移地址给 DX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 ; 显示 SHOTR1 的字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  ; 调用 21H(软中断),程序退出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    JMP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXITO                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 跳转到 EXTIO 代码段</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SO:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          ; 定义 SO</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,OFFSET SHORT       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 把 SHORT 的偏移地址给 DX</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  ; 显示字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   ; 调用软中断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXITO:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MOV</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4CH</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               ; 返回操作系统</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    INT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21H</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  ; 执行21H(软中断),程序退出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CODE ENDS                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 代码段结束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">END START                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; START 结束</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1>`,32)]))}const c=i(p,[["render",h]]);export{g as __pageData,c as default};
