import{_ as e,c as t,a2 as o,o as l}from"./chunks/framework.3VuPyQdv.js";const r="/docs-demo/emuImage/image-20230928162638794.png",u=JSON.parse('{"title":"存储器地址分配及译码","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu09.md","filePath":"doc-text/emu/emu09.md","lastUpdated":1744726250000}'),p={name:"doc-text/emu/emu09.md"};function i(s,a,d,n,m,c){return l(),t("div",null,a[0]||(a[0]=[o('<h1 id="存储器地址分配及译码" tabindex="-1">存储器地址分配及译码 <a class="header-anchor" href="#存储器地址分配及译码" aria-label="Permalink to &quot;存储器地址分配及译码&quot;">​</a></h1><ol><li><p>存储器地址分配在进行存储器与CPU连接前，首先要确定内存容量的大小和选择存储器芯片的容量大小。</p></li><li><p>存储器地址译码</p></li></ol><h2 id="译码就是选中芯片的过程" tabindex="-1">译码就是选中芯片的过程 <a class="header-anchor" href="#译码就是选中芯片的过程" aria-label="Permalink to &quot;译码就是选中芯片的过程&quot;">​</a></h2><p>或门：≥1，全0出0，有1出1</p><p>与们：&amp;，全1出1，有0出0</p><h2 id="常用的译码电路" tabindex="-1">常用的译码电路 <a class="header-anchor" href="#常用的译码电路" aria-label="Permalink to &quot;常用的译码电路&quot;">​</a></h2><p>一种常见的3∶8译码器74LS138，包含3个输入端，8个输出端，3个使能端</p><img src="'+r+'" alt="image-20230928162638794" style="zoom:80%;"><h2 id="两种译码方式" tabindex="-1">两种译码方式 <a class="header-anchor" href="#两种译码方式" aria-label="Permalink to &quot;两种译码方式&quot;">​</a></h2><p>下面介绍外部译码电路的两种译码方法。(可能考)</p><ol><li>线性选择法</li></ol><p>​ 直接用CPU地址总线中某一高位线作为存储器芯片的片选信号，简称为线选法。</p><p>优点：连接简单，片选信号的产生不需复杂的逻辑电路。</p><p>缺点：</p><p>​ (1) 当采用线选法时，高位地址未全部用完、而又没有对其实施控制时，会出现地址的不连续和多义性。</p><p>​ (2)即使所有的高位地址线都用作线选，其能寻址的存储空间也十分有限。</p><ol start="2"><li>全译码法</li></ol><p>​ 将高位地址全部作为译码器的输入，用译码器的输出作为片选信号。</p><p>​ 在这种方法中，低位地址线用作字选，与芯片的地址输入端直接相连；高位地址线全部连接进译码电路，用来生成片选信号。这样，所有的地址线均参与片内或片外的地址译码，不会产生地址的多义性和不连续性。在全译码方式中，译码电路的核心常用一块译码器充当，例如74LS138等。</p>',19)]))}const f=e(p,[["render",i]]);export{u as __pageData,f as default};
