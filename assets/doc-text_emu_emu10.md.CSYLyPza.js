import{_ as i,c as a,a2 as p,o as l}from"./chunks/framework.3VuPyQdv.js";const n="/docs-demo/emuImage/image-20230930153634514.png",c=JSON.parse('{"title":"IO","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu10.md","filePath":"doc-text/emu/emu10.md","lastUpdated":1743779248000}'),h={name:"doc-text/emu/emu10.md"};function e(t,s,k,r,d,o){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="io" tabindex="-1">IO <a class="header-anchor" href="#io" aria-label="Permalink to &quot;IO&quot;">​</a></h1><h2 id="i-o接口" tabindex="-1">I/O接口： <a class="header-anchor" href="#i-o接口" aria-label="Permalink to &quot;I/O接口：&quot;">​</a></h2><p>将外设连接到总线上的一组逻辑电路的总称。 用以实现外设与主机之间的信息交换</p><h2 id="l-o端口" tabindex="-1">l/O端口： <a class="header-anchor" href="#l-o端口" aria-label="Permalink to &quot;l/O端口：&quot;">​</a></h2><p>接口中的寄存器，可以由CPU读或写</p><p>端口分为三部分：</p><ol><li>数据端口</li><li>状态端口</li><li>控制端口</li></ol><h2 id="cpu同外设间交换的信息由三类" tabindex="-1">CPU同外设间交换的信息由三类： <a class="header-anchor" href="#cpu同外设间交换的信息由三类" aria-label="Permalink to &quot;CPU同外设间交换的信息由三类：&quot;">​</a></h2><ol><li><p>数据信息</p><ol><li><p>三种类型</p><ol><li><p>数字量</p><ol><li><p>二进制信息——数</p><p>ASCII码表示的数或字符</p></li></ol></li><li><p>模拟量：具体的值</p></li><li><p>开关量</p></li></ol></li></ol></li></ol><p>2.状态信息: 表示外设当前所处的工作状态。</p><p>3.控制信息: 由CPU发出的，用于控制I/O接口的工作方式以及外设的启动和停止等。</p><h2 id="i-o端口的访问" tabindex="-1">I/O端口的访问 <a class="header-anchor" href="#i-o端口的访问" aria-label="Permalink to &quot;I/O端口的访问&quot;">​</a></h2><p>1、输入指令</p><p>格式：IN 累加器，端口</p><p>功能：把端口中数据读到AL、或AX中。</p><p>例：IN AL，21H MOV DX，201H</p><p>​ IN AX，DX</p><p>2、输出指令</p><p>格式：OUT 端口，累加器</p><p>功能：把寄存器AL、或AX中数据输出到端口。</p><p>例： OUT 32H，AL MOV DX，201H</p><p>​ IN DX，AX</p><img src="'+n+`" alt="image-20230930153634514" style="zoom:80%;"><p>CPU与外设交换数据的方式：</p><ol><li><p>程序控制传递方式（都在运行指令）</p><p>特点：</p><ol><li>以CPU为中心，控制来自CPU，通过预先编写好的 I/O 程序实现数据的传送。</li><li>速度偏低，传送路径经过CPU内部寄存器同时数据 I/O 响应也比较慢</li></ol></li><li><p>无条件传送方式 (同步传送方式)</p><p>特点：适用于总是处于准备好状态的外设</p><p>方法：把 I/O 指令插入到程序中，当程序执行到该指令时，外设已做好准备，于是在此指令时间内完成数据传送任务。</p><p>优点：软件及接口硬件简单</p><p>缺点：CPU效率低，只适用于简单外设，适应范围较窄</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#无条件查询方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  LL:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  	out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">al</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     rol</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     jmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ll</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>查询传送方式 （异步传送方式）</p><p>当CPU同外设不同步且不知道外设工作速率时，可采用此方式传送。传送数据前，CPU必须先对外设进行状态检测(查状态位)。</p><p>适应场合：</p><p>​ 外设并不总是准备好</p><p>​ 对传送速率和效率，要求不高</p><p>对外设及接口的要求：</p><p>​ 外设应提供设备状态信息</p><p>​ 接口应具备状态端口</p><p>完成一次传送过程的步骤如下：</p><ol><li>通过执行一条输入指令，读取所选外设的当前状态(读状态口)</li><li>根据该设备的状态决定程序去向</li><li>外设 &quot;忙&quot; 或 &quot;未准备就绪&quot; ——&gt; 重复检测外设状态</li><li>外设 &quot;空&quot; 或 &quot;准备就绪&quot; ——&gt; 发出 I/O 指令，进行一次数据传送(数据口)</li><li>优点：软件比较简单</li><li>缺点：CPU效率低，数据传送的实时性差，速度较慢。</li></ol><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#查询传送方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ll:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #去400h端口查询状态位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">08h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     jz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ll	#判断是否等于1，等于1为准备好，否则继续查</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ax</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #送 [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 数据给 300h端口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>中断传送方式</p><ol><li>无条件传递和查询传送的缺点是：CPU和外设只能串行工作</li><li>为了提高系统的工作效率，充分发挥CPU的高速运算能力，引入了 &quot;中断&quot; 系统，利用中断来实现CPU与外设之间的数据传送，这就是中断传送方式。</li></ol><p>特点（外设主动打断CPU）：</p><p>​ 外设在需要时间向CPU提出请求，CPU再去为它服务。服务结束后或在外设不需要时，CPU可执行自己的程序。</p><p>​ 中断使CPU和外设以及外设之间能并行工作。</p><p>工作过程：</p><p>​ 在中断传送方式中，需要提前安排好某一服务程序（外设），当外设完成数据传送的准备后，向CPU发出中断请求信号，在CPU可以响应中断的条件下，主程序被 &quot;中断&quot; ，转去执行 &quot;中断服务程序&quot;，来服务中断。</p><p>优点：</p><p>​ CPU效率高，实时性好，速度快</p><p>缺点：</p><p>​ 程序编制较为复杂</p></li></ol><h3 id="以上三种-i-o-方式的共性" tabindex="-1">以上三种 I/O 方式的共性 <a class="header-anchor" href="#以上三种-i-o-方式的共性" aria-label="Permalink to &quot;以上三种 I/O 方式的共性&quot;">​</a></h3><p>无条件、查询、中断、程序、均需 CPU 作为中介：</p><p>​ 软件：外设与内存之间的数据传送是通过 CPU 执行程序来完成的。</p><p>​ 硬件：I/O 接口和存储器的读写控制信号，地址信号都是由 CPU 发出的。</p><p>​ 缺点：</p><p>​ 程序的执行速度限定了传送的最大速度。</p><h2 id="dma-直接存储器读取-传递方式" tabindex="-1">DMA（直接存储器读取）传递方式 <a class="header-anchor" href="#dma-直接存储器读取-传递方式" aria-label="Permalink to &quot;DMA（直接存储器读取）传递方式&quot;">​</a></h2><p>​ 外设和内存之间之间传送数据的方式，即 DMA 传送方式，在 DMA 传送方式中，对这一数据传送过程进行控制的硬件称为 DMA 控制器(DMAC)。</p><p>特点：</p><p>​ 外设直接与存储器进行数据交换，不需要 CPU 干预也不需要软件介入。</p><p>​ 总线由DMA控制器（DMAC）进行控制（CPU要放弃总线控制权），内存/外设的地址和读写控制信号均由DMAC提供。</p><p>1.DMA操作的基本方法</p><p>（1）周期挪用（Cycle Stealing）</p><p>（2）周期扩散</p><p>（3）CPU停机方式</p><p>最常用，最简单的传送方式</p><p>2.DMA的传送方式</p><p>(1)单字节传送方式</p><p>每次DMA传送只传送一个字节就立即释放总线。</p><p>(2)成组传送方式</p><p>DMAC在申请到总线后，将一组数据传送完后才释放总线，而不管中间DREQ是否有效。</p><p>(3)请求传送方式（查询传送方式）</p><p>成组传送，但每传送一个字节后，DMAC查DREQ，有效传，无效挂起。</p><p>３.DMAC（DMA控制器）的基本功能(查询传送方式)</p><p>（1）能接收外设的请求，向CPU发出DMA请求信号。</p><p>（2）当接到CPU发出DMA响应信号后，DMAC接管对总线的控制，进入DMA方式。</p><p>（3）能寻址存储器，即能输出地址信息和修改地址。</p><p>（4）能向存储器和外设发相应的读/写控制信号。</p><p>（5）能控制传送的字节数，判断DMA是否结束。</p><p>（6）在DMA传送结束后，能结束DMA请求信号，释放总线，使CPU恢复正常工作。</p><h2 id="统一编址-存储器映像" tabindex="-1">统一编址(存储器映像)： <a class="header-anchor" href="#统一编址-存储器映像" aria-label="Permalink to &quot;统一编址(存储器映像)：&quot;">​</a></h2><p>在这种编址方式中，I/O 端和内存单元统一编址，即把 I/O 端口当作内存单元对待，从整个内存空间中，划出一个子空间给 I/O 端口，每一个 I/O 端口分配一个地址码，用访问存储器的指令对 I/O 端口进行操作。</p><p>优点：</p><p>​ 访问内存指令适用于 I/O 端口，对于 I/O 端口的数据处理能力强。</p><p>​ CPU 无需产生区别访问内存操作和 I/O 操作的控制信号，从而可减少引脚。</p><p>缺点：</p><p>​ 程序中 I/O 操作不清晰，难以区分程序中的 I/O 操作和存储器操作</p><p>​ I/O 端口占用了一部分内存空间</p><h2 id="独立编址-8086在用" tabindex="-1">独立编址(8086在用)： <a class="header-anchor" href="#独立编址-8086在用" aria-label="Permalink to &quot;独立编址(8086在用)：&quot;">​</a></h2><p>8086采用的是 IO 独立编址</p><p>I/O 端口编址和存储器的编址相互独立，即 I/O 端口地址空间和存储器地址，空间分开设置，互不影响。采用这种编址方式，对 I/O 端口的操作使用输入、输出指令（I/O 指令）需要用 m/I O 非区分访问的是内存还是 I/O （外部空间）</p><p>优点：</p><p>​ 不占用内存空间</p><p>​ 使用 I/O 指令，程序清晰，很容易看出是 I/O 操作还是存储器操作</p><p>​ 译码电路比较简单（因为 I/O 端口的地址空间一般比较小，所用地址线也就较少）。</p><p>缺点：</p><p>​ 需要特点的引脚来区分内存和 IO 单元的访问。</p>`,72)]))}const E=i(h,[["render",e]]);export{c as __pageData,E as default};
