import{_ as a,c as e,a2 as p,o}from"./chunks/framework.3VuPyQdv.js";const i="/docs-demo/emuImage/image-20231015222557554.png",l="/docs-demo/emuImage/image-20231015222610945.png",r="/docs-demo/emuImage/image-20231015222657107.png",g=JSON.parse('{"title":"中断(CPU被动模式)","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu11.md","filePath":"doc-text/emu/emu11.md","lastUpdated":1744076193000}'),d={name:"doc-text/emu/emu11.md"};function s(m,t,n,h,c,u){return o(),e("div",null,t[0]||(t[0]=[p('<h1 id="中断-cpu被动模式" tabindex="-1">中断(CPU被动模式) <a class="header-anchor" href="#中断-cpu被动模式" aria-label="Permalink to &quot;中断(CPU被动模式)&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>中断——外设随机地（指主程序运行到任何一条指令时）或程序预先安排产生中断请求信号，暂停CPU正在运行的程序，转入执行称为中断服务的子程序，中断服务完毕后，返回到主程序被中断处继续执行的过程。</p><p>中断源——引起中断的事件</p><ol><li><p>通常中断源有以下几种：</p><ol><li><p>输入、输出设备: 如键盘、显示器和打印机等;</p></li><li><p>数据通道: 如磁带等;</p></li><li><p>实时控制过程中的各种参数;</p></li><li><p>故障源: 如掉电保护等;</p></li><li><p>控制系统的现场测试信号以及软件中断。</p><p>中断系统应具有以下功能:</p><ol><li><p>能实现中断响应、中断服务和中断返回</p></li><li><p>能实现中断优先级排队</p></li><li><p>能实现中断嵌套</p></li></ol></li></ol></li></ol><h2 id="中断过程" tabindex="-1">中断过程 <a class="header-anchor" href="#中断过程" aria-label="Permalink to &quot;中断过程&quot;">​</a></h2><p>一个完整的中断基本过程包括：中断请求、中断判优、中断响应、中断处理及中断返回等五个基本过程。</p><p>（1）中断请求</p><p>​ 当某一外部中断源要求CPU中断时，首先要向CPU发出中断请求，该请求信号被存放在中断源接口电路的中断请求触发器中暂存，并通过INTR或NMI信号线引入CPU 。</p><p>（2）中断判优</p><p>​ 由于中断请求是随机的，在某一瞬间有可能出现两个或两个以上中断源同时提出请求的情况。这时必须根据中断源的轻重缓急，给每个中断源确定一个中断级别—— 中断优先权 。</p><p>（3）中断响应</p><p>​ CPU每执行完一条指令后，查询是否有中断请求。当查询到有中断请求且此时CPU允许中断（即IF=1，开中断），CPU响应中断。</p><p>​ 响应中断后系统做的工作：</p><p>​ ①自动关中断；通过使IF清零来实现，如果有中断嵌套，则需通过 STI 手动打开中断</p><p>​ ②保存FR和断点；</p><p>​ ③形成中断入口地址。通过中断矢量，查询中断地址表实现。</p><p>（4）中断处理</p><p>​ 执行中断服务程序</p><p>​ ①中断服务开始要用压栈指令（PUSH）将要用到的寄存器内容压入堆栈，以便返回到主程序时能正确运行。——保护现场</p><p>​ ②中断服务程序结束后，用POP指令把所保存的有关寄存器的内容从堆栈弹出，以便恢复到中断前的状态。——恢复现场</p><p>中断中堆栈的作用：堆栈的作用是保护断点和保护现场</p><p>（5）中断返回(IRET)</p><p>​ 通常在中断返回前，要用指令开中断，以便再次响应中断，然后执行中断返回指令IRET。IRET指令具有弹出断点地址送IP和CS及恢复标志寄存器FR内容的功能。</p><table tabindex="0"><thead><tr><th>(随机、被动)IRET：中断返回</th><th>（主动）RET:子程序返回(段内)</th><th>（主动）RETF：子程序返回(段间)</th></tr></thead><tbody><tr><td>弹出 IP、CS、FR</td><td>弹出: IP</td><td>弹出：IP、CS</td></tr><tr><td>SP+6</td><td>SP+2</td><td>SP+4</td></tr></tbody></table><h2 id="中断优先权" tabindex="-1">中断优先权 <a class="header-anchor" href="#中断优先权" aria-label="Permalink to &quot;中断优先权&quot;">​</a></h2><h3 id="_1、软件查询方式-如果某个中断出问题-挨个查询-查到一个处理一个" tabindex="-1">1、<strong>软件查询方式</strong>（如果某个中断出问题，挨个查询，查到一个处理一个） <a class="header-anchor" href="#_1、软件查询方式-如果某个中断出问题-挨个查询-查到一个处理一个" aria-label="Permalink to &quot;1、**软件查询方式**（如果某个中断出问题，挨个查询，查到一个处理一个）&quot;">​</a></h3><img src="'+i+'" alt="image-20231015222557554" style="zoom:67%;"><img src="'+l+'" alt="image-20231015222610945" style="zoom:50%;"><h3 id="_2、硬件优先权排队电路。" tabindex="-1"><strong>2、硬件优先权排队电路。</strong> <a class="header-anchor" href="#_2、硬件优先权排队电路。" aria-label="Permalink to &quot;**2、硬件优先权排队电路。**&quot;">​</a></h3><p>①简单硬件方式——菊花链法或链式优先权排队电路。</p><img src="'+r+'" alt="image-20231015222657107" style="zoom:50%;"><p>②专用硬件方式——可编程的中断控制器</p>',33)]))}const _=a(d,[["render",s]]);export{g as __pageData,_ as default};
