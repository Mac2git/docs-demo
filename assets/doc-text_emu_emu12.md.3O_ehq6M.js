import{_ as i,c as l,a2 as p,o as e}from"./chunks/framework.3VuPyQdv.js";const s="/docs-demo/emuImage/256%E7%A7%8D%E4%B8%AD%E6%96%AD%E6%BA%90.png",n="/docs-demo/emuImage/%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E8%A1%A8.png",t="/docs-demo/emuImage/image-20231015223257979.png",P=JSON.parse('{"title":"8086/8088的中断系统","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu12.md","filePath":"doc-text/emu/emu12.md","lastUpdated":1751538794000}'),r={name:"doc-text/emu/emu12.md"};function o(h,a,d,c,m,I){return e(),l("div",null,a[0]||(a[0]=[p('<h1 id="_8086-8088的中断系统" tabindex="-1">8086/8088的中断系统 <a class="header-anchor" href="#_8086-8088的中断系统" aria-label="Permalink to &quot;8086/8088的中断系统&quot;">​</a></h1><h2 id="中断结构" tabindex="-1">中断结构 <a class="header-anchor" href="#中断结构" aria-label="Permalink to &quot;中断结构&quot;">​</a></h2><h3 id="中断分类" tabindex="-1">中断分类 <a class="header-anchor" href="#中断分类" aria-label="Permalink to &quot;中断分类&quot;">​</a></h3><img src="'+s+'" style="zoom:80%;"><p>硬件中断——由外部硬件产生的，也称外部中断。</p><ol><li>非屏蔽中断：通过CPU的NMI引入，它不受内部中断允许标志位IF的屏蔽，一般在一个系统中只允许有一个非屏蔽中断。</li><li>可屏蔽中断：通过CPU的INTR引入 ，它受IF的控制。只有在IF=1时，CPU才能响应中断源的请求。当IF=0时，中断请求被屏蔽。</li></ol><p>软件中断——CPU根据软件的某些指令或者软件对标志寄存器某个标志位的设置而产生的，由于它与外部中断电路完全无关，故称为内部中断。</p><h2 id="中断向量表" tabindex="-1">中断向量表 <a class="header-anchor" href="#中断向量表" aria-label="Permalink to &quot;中断向量表&quot;">​</a></h2><p>存放中断地址的一段内存空间称中断向量表。</p><ol><li>存放各类中断的中断服务程序的入口地址</li><li>表的地址位于内存的0000∶0000~0000∶03FFH（即0段的0000～03FFH）大小为1KB，共256个入口</li><li>每个入口占用4个单元，依次为IP：CS, 低字为段内偏移，高字为段基址</li><li>计算向量表地址： <ol><li>入口地址：类型码 × 4 (给CS)</li><li>结束地址=类型码×4+4-1（结束4字节单元，+4(CS:IP占4字节) -1(从0开始)） 给 IP</li></ol></li></ol><img src="'+n+'" style="zoom:50%;"><p>设置中断向量：</p><p>​ 入口地址 = 类型码×4（开始4字节单元）</p><img src="'+t+`" alt="image-20231015223257979" style="zoom:50%;"><p>中断类型码与中断向量所在位置（中断向量地址指针）之间的对应关系为： 中断向量地址指针=4*中断类型码</p><h2 id="内部中断——软中断" tabindex="-1">内部中断——软中断 <a class="header-anchor" href="#内部中断——软中断" aria-label="Permalink to &quot;内部中断——软中断&quot;">​</a></h2><p>在8086/8088系统中，通过执行中断指令或由CPU</p><p>本身启动的中断称为内部中断（也称软件中断）。</p><p>除单步中断外，内部中断无法用软件禁止，即不受IF的影响。</p><p>1、内部中断的类型</p><p>（1）0型中断——除法出错中断</p><p>（2）1型中断——单步中断</p><p>（3）3型中断——断点中断</p><p>（4）4型中断——溢出中断</p><p>（5）INT n指令中断</p><h3 id="内部中断的处理过程" tabindex="-1">内部中断的处理过程 <a class="header-anchor" href="#内部中断的处理过程" aria-label="Permalink to &quot;内部中断的处理过程&quot;">​</a></h3><p>如何获取相应的中断类型码</p><p>专用中断：中断类型码是自动形成的。</p><p>几种类型码为：类型0、1、3、4。</p><p>对于INT n指令，其类型码为指令中给定的n。</p><p>取得了类型码后的处理过程：</p><p>① 类型码*4 — 向量表指针。</p><p>② 标志寄存器FR入栈，保护各个标志。</p><p>③清除IF和TF标志，屏蔽新的INTR中断和单步中断。</p><p>④保存断点（断点处IP和CS压栈，先压CS后压IP）。</p><p>⑤从中断向量表中取出中断服务程序入口地址分别送入IP和CS中。</p><p>⑥ 按新的地址执行中断服务程序。</p><h2 id="外部中断——硬中断" tabindex="-1">外部中断——硬中断 <a class="header-anchor" href="#外部中断——硬中断" aria-label="Permalink to &quot;外部中断——硬中断&quot;">​</a></h2><p>非屏蔽中断——NMI引脚产生的中断，不受IF控制，类型号为2。</p><p>可屏蔽中断——由CPU的INTR端接收可屏蔽中断。受IF控制，只有当IF=1, 在一条指令执行结束后，CPU才能响应可屏蔽中断的请求。</p><h3 id="_1、外部中断的响应" tabindex="-1">1、外部中断的响应 <a class="header-anchor" href="#_1、外部中断的响应" aria-label="Permalink to &quot;1、外部中断的响应&quot;">​</a></h3><p>CPU采样到非屏蔽中断请求时，自动提供中断类型号2，然后根据中断类型号，查找中断向量表指针，其后的处理与内部中断一样。</p><p>当INTR信号有效，如IF=1，则CPU执行完一条指令后，进入可屏蔽中断响应周期。在中断响应周期中CPU从数据线中获取外部设备的中断类型码。</p><h3 id="_2、外部中断处理过程-intr中断" tabindex="-1">2、外部中断处理过程(INTR中断) <a class="header-anchor" href="#_2、外部中断处理过程-intr中断" aria-label="Permalink to &quot;2、外部中断处理过程(INTR中断)&quot;">​</a></h3><p>在外部中断响应周期中，CPU获取了外部中断类型</p><p>码之后的中断处理过程，与前述的软中断过程顺序是一样的，不再赘述。</p><p>如果把CPU中断响应周期的动作和前面讲到的中断响应过程结合起来，当一个可屏蔽中断被响应时，CPU实际执行了7个总线周期，即：</p><p>外设向CPU申请中断：</p><ol><li>INTA向CPU请求信号</li><li>取回类型码</li><li>保护FR</li><li>保护CS</li><li>保护IP</li><li>送新的偏移地址 IP-&gt; IP</li><li>送新的段地址 CS -&gt; CS</li></ol><p>⑴ 执行第一个INTA应答周期。(INTR是INTA的应答线)</p><p>⑵ 执行第二个INTA周期，被响应的外设通过D0～D7的8位数据线提供中断类型码n（由8259A提供），CPU接到类型码后，将它左移两位，形成向量表指针存入暂存器。</p><p>⑶ 执行一个总线写周期，把FR压栈。同时IF和TF为0，以禁止中断响应过程中其他可屏蔽中断的进入，同时也禁止了中断过程中出现单步中断。</p><p>⑷ 执行一个总线写周期，CS压栈。</p><p>⑸ 执行一个总线写周期，IP压栈。</p><p>⑹ 执行一个总线读周期，从中断向量表(类型码×4)中取出中断服务程序入口地址(2个字节)的偏移量送IP中。</p><p>⑺ 执行一个总线周期，从中断向量表中取出中断服务程序入口地址的段值送CS。</p><p>(NMI中断)非屏蔽中断与软中断跳过第⑴、⑵步，从第⑶步开始执行到第⑺步。NMI中断固定类型号为2，所以需要5个总线周期</p><p>各类中断的优先权及中断响应（优先权：软件 &gt; 硬件 &gt; 单步）号越小，优先级越高</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#定义子程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">标号 proc </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 定义子程序伪指令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">iret</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	;程序结束返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">标号 endp </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;子程序结束伪指令</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>8086硬中断和软中断的区别：</p><ol><li>产生方式不同，硬件中断由硬件产生，软件中断由指令产生</li><li>硬件中断是随机的，软件中断是已知的</li><li>硬件中断通常需要从外部取类型码，软件中断不需要取类型码</li><li>硬件中断NMI和INTR引脚，软件中断是对应的类型号或直接给出</li></ol><h2 id="各类中断的优先权及中断响应" tabindex="-1">各类中断的优先权及中断响应 <a class="header-anchor" href="#各类中断的优先权及中断响应" aria-label="Permalink to &quot;各类中断的优先权及中断响应&quot;">​</a></h2><p>​ 8086/8088系统中，中断优先权次序从高到低为：除法出错、INTn、INTO、NMI、INTR、单步中断。</p><p>除单步之外的内部优先权最高，其次是非屏蔽中断，再次是可屏蔽中断，而单步最低。(号越小，中断优先权越高)</p><p>断应中断的条件，一般情况(INTR中断(可屏蔽中断))</p><ol><li>有中断申请</li><li>一条完整指令结束，才可以响应中断</li><li>未在服务更高级中断(同级中断打断不了同级中断，低级中断打断不了高级中断)</li><li>如果是INTR中断，中断是开放的 <ol><li>CPU：IF=1</li><li>8259：没有屏蔽</li></ol></li></ol><p>如果是 NMI 中断 需要满足以上 1、 2、3步</p><p>所有中断执行条件，需要完整指令执行结束</p>`,68)]))}const k=i(r,[["render",o]]);export{P as __pageData,k as default};
