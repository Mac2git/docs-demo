import{_ as e,c as o,a2 as t,o as p}from"./chunks/framework.3VuPyQdv.js";const i="/docs-demo/emuImage/image-20231016205633796.png",r="/docs-demo/emuImage/image-20231016205725330.png",m="/docs-demo/emuImage/image-20231016210557353.png",l="/docs-demo/emuImage/image-20231016210614734.png",s="/docs-demo/emuImage/image-20231016210717640.png",c="/docs-demo/emuImage/image-20231016210814930.png",h="/docs-demo/emuImage/image-20231016210838478.png",n="/docs-demo/emuImage/image-20231016210937357.png",d="/docs-demo/emuImage/image-20231016210953827.png",u="/docs-demo/emuImage/image-20231016211016056.png",P=JSON.parse('{"title":"8259A可编程中断控制器","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu13.md","filePath":"doc-text/emu/emu13.md","lastUpdated":1744726180000}'),I={name:"doc-text/emu/emu13.md"};function _(A,a,g,C,b,q){return p(),o("div",null,a[0]||(a[0]=[t('<h1 id="_8259a可编程中断控制器" tabindex="-1">8259A可编程中断控制器 <a class="header-anchor" href="#_8259a可编程中断控制器" aria-label="Permalink to &quot;8259A可编程中断控制器&quot;">​</a></h1><h2 id="_8259a的功能" tabindex="-1">8259A的功能 <a class="header-anchor" href="#_8259a的功能" aria-label="Permalink to &quot;8259A的功能&quot;">​</a></h2><p>1.功能</p><p>Intel 8259A 是与8086系列CPU兼容的可编程中断控制器，它的主要功能为：</p><p>（1）具有8级优先权控制，级连可扩展至64级。</p><p>（2）每一级中断都可以屏蔽或允许。</p><p>（3）在中断响应周期，8259A可提供相应的中断向量号（中断类型号）。</p><p>（4）8259A的工作方式，可通过编程来进行选择。</p><img src="'+i+'" alt="image-20231016205633796" style="zoom:67%;"><p>D0~D7: 接了数据总线缓冲器，来实现8259和8086的数据交换</p><p>A0：片内寻址，对应2个端口，接8086的地址线，从而实现了8086地址输出的不同，来访问的端口不同。8086的A0 不能接 8259A 的A0，因为8086的 A0 是区分奇偶体</p><p>中断请求寄存器(IRR)：对应8个中断，IR0~IR7，谁请求对应的编号设置成1，其余写成0</p><p>中断服务寄存器：对应正在执行哪个中断，如果发生多个 &#39;1&#39;，正在进行中断嵌套。</p><p>中断请求寄存器通过 优先权电路(FR) 来判定优先权</p><p>中断屏蔽寄存器：控制8个中断是否打开，为1屏蔽，为0打开。</p><h2 id="_8259a的引脚" tabindex="-1">8259A的引脚 <a class="header-anchor" href="#_8259a的引脚" aria-label="Permalink to &quot;8259A的引脚&quot;">​</a></h2><img src="'+r+'" alt="image-20231016205725330" style="zoom:50%;"><h2 id="_8259a的工作原理" tabindex="-1">8259A的工作原理 <a class="header-anchor" href="#_8259a的工作原理" aria-label="Permalink to &quot;8259A的工作原理&quot;">​</a></h2><p>当系统通电后，首先应对8259A初始化。（由CPU执行一段程序，向可编程芯片写入若干命令字，规定其工作状态，使其处于准备就绪的状态。）</p><h2 id="_8259a对外部中断请求处理过程如下" tabindex="-1">8259A对外部中断请求处理过程如下： <a class="header-anchor" href="#_8259a对外部中断请求处理过程如下" aria-label="Permalink to &quot;8259A对外部中断请求处理过程如下：&quot;">​</a></h2><p>(1) 当有IR0～IR7变 高，则IRR的相应位置1。</p><p>(2) 若中断请求线中至少有一条是中断允许的(判断IMR对应的中断是否为打开状态)，则由 INT 引脚向CPU发出中断请求。</p><p>(3) 若CPU处于开中断状态，则在当前指令执行完后，用INTA信号作为响应。</p><p>(4) 8259A接到INTA后，使最高优先权的ISR位置1，而相应的IRR位复位。在此周期中，8259A不向系统数据总线送任何内容。</p><p>(5) 在中断响应周期的第二个信号期间8259A向数据总线输送一个8位指针（向量号或类型号），CPU读取此类型号，类型号*4作为地址就可从中断向量表中取出中断服务程序入口地址。</p><p>(6) 若8259A工作在自动结束中断AEOI方式（Automatic End Of Interrupt）,在第二个INTA结束时，使中断源在ISR的相应位复位。否则，直至中断服务程序执行到EOI命令，才使ISR的相应位复位。</p><h2 id="_8259a的编程" tabindex="-1">8259A的编程 <a class="header-anchor" href="#_8259a的编程" aria-label="Permalink to &quot;8259A的编程&quot;">​</a></h2><p>8259A的编程分两部分：</p><p>（1）初始化编程</p><p>由CPU向8259A送2～4字节的初始化命令字ICW</p><p>（2）工作方式编程</p><p>由CPU向8259A送三个字节的工作命令字OCW，以规定8259A的工作方式。该命令字可在8259A初始化命令字ICW后的任何时间写入。</p><h3 id="_8259a的初始化编程" tabindex="-1">8259A的初始化编程 <a class="header-anchor" href="#_8259a的初始化编程" aria-label="Permalink to &quot;8259A的初始化编程&quot;">​</a></h3><p>8259A的初始化命令字共4个（ICW1～ICW4）</p><p>设置过程如图：</p><img src="'+m+'" alt="image-20231016210557353" style="zoom:50%;"><h4 id="_1-写初始化命令字icw1——芯片控制字-多片使用的时候需要写入-icw3" tabindex="-1">⑴ 写初始化命令字ICW1——芯片控制字(多片使用的时候需要写入 ICW3) <a class="header-anchor" href="#_1-写初始化命令字icw1——芯片控制字-多片使用的时候需要写入-icw3" aria-label="Permalink to &quot;⑴  写初始化命令字ICW1——芯片控制字(多片使用的时候需要写入 ICW3)&quot;">​</a></h4><img src="'+l+'" alt="image-20231016210614734" style="zoom:50%;"><h4 id="_2-写初始化命令字icw2——中断类型控制字-中断类型码" tabindex="-1">(2)写初始化命令字ICW2——中断类型控制字（ 中断类型码 ） <a class="header-anchor" href="#_2-写初始化命令字icw2——中断类型控制字-中断类型码" aria-label="Permalink to &quot;(2)写初始化命令字ICW2——中断类型控制字（ 中断类型码 ）&quot;">​</a></h4><p>用来定义中断类型码的高5位</p><img src="'+s+'" alt="image-20231016210717640" style="zoom:50%;"><h4 id="_3-写初始化指令字icw3—主-从片初始化-级连控制字" tabindex="-1">(3) 写初始化指令字ICW3—主/从片初始化（级连控制字） <a class="header-anchor" href="#_3-写初始化指令字icw3—主-从片初始化-级连控制字" aria-label="Permalink to &quot;(3) 写初始化指令字ICW3—主/从片初始化（级连控制字）&quot;">​</a></h4><img src="'+c+'" alt="image-20231016210814930" style="zoom:50%;"><h4 id="_4-写初始化命令字icw4——方式控制字" tabindex="-1">（4）写初始化命令字ICW4——方式控制字 <a class="header-anchor" href="#_4-写初始化命令字icw4——方式控制字" aria-label="Permalink to &quot;（4）写初始化命令字ICW4——方式控制字&quot;">​</a></h4><p>对于8086/8088系统是必须设置的初始化命令字</p><img src="'+h+'" alt="image-20231016210838478" style="zoom:50%;"><h3 id="_8259a的操作命令字" tabindex="-1">8259A的操作命令字 <a class="header-anchor" href="#_8259a的操作命令字" aria-label="Permalink to &quot;8259A的操作命令字&quot;">​</a></h3><p>三个操作命令字OCW1～OCW3。</p><p>在设置操作命令字时，顺序上没有严格的要求，但端口地址上有严格的规定。</p><p>OCW1必须写入奇地址端口（A0=1）</p><p>OCW2和OCW3必须写入偶地址端口（A0=0）</p><h4 id="_1-操作命令字ocw1-—屏蔽操作命令字" tabindex="-1">⑴ 操作命令字OCW1 —屏蔽操作命令字 <a class="header-anchor" href="#_1-操作命令字ocw1-—屏蔽操作命令字" aria-label="Permalink to &quot;⑴ 操作命令字OCW1 —屏蔽操作命令字&quot;">​</a></h4><p>用来设置或清除对中断的屏蔽（设置IMR的值）</p><img src="'+n+'" alt="image-20231016210937357" style="zoom:50%;"><h4 id="_2-操作命令字ocw2——中断方式命令字" tabindex="-1">（2） 操作命令字OCW2——中断方式命令字 <a class="header-anchor" href="#_2-操作命令字ocw2——中断方式命令字" aria-label="Permalink to &quot;（2） 操作命令字OCW2——中断方式命令字&quot;">​</a></h4><p>​ 设置优先级循环和中断结束方式</p><img src="'+d+'" alt="image-20231016210953827" style="zoom:50%;"><h4 id="_3-操作命令字ocw3——状态操作命令字" tabindex="-1">(3) 操作命令字OCW3——状态操作命令字 <a class="header-anchor" href="#_3-操作命令字ocw3——状态操作命令字" aria-label="Permalink to &quot;(3)  操作命令字OCW3——状态操作命令字&quot;">​</a></h4><p>设置和撤销特殊屏蔽方式、设置中断查询方式、</p><p>设置对8259A内部寄存器的读出命令</p><img src="'+u+'" alt="image-20231016211016056" style="zoom:50%;"><h3 id="_8259a的工作方式" tabindex="-1">8259A的工作方式 <a class="header-anchor" href="#_8259a的工作方式" aria-label="Permalink to &quot;8259A的工作方式&quot;">​</a></h3><p>1．中断嵌套方式</p><p>（1）全嵌套方式</p><p>​ 中断优先权是固定的，即IR0优先权最高，IR7优先权最低。</p><p>（2）特殊全嵌套方式——级连情况</p><p>​ 当某一从片中断请求被响应后，主片不封锁从片的INT输入端，使该从片优先级更高的中断源的请求能得到响应。</p><h3 id="中断优先级循环方式" tabindex="-1">中断优先级循环方式 <a class="header-anchor" href="#中断优先级循环方式" aria-label="Permalink to &quot;中断优先级循环方式&quot;">​</a></h3><p>⑴ 自动循环方式</p><p>​ 当某一个中断源服务完以后，它的优先级变成最低的 。</p><p>(2) 特殊循环方式</p><p>​ 设置IR5为最低优先权，则IR6的优先权就变为最高。</p><p>例如: 设置IR5为最低优先权，则IR6的优先权就变为最高。这时OCW2最高三位为110，而最低三位L2～L0应为101（最低优先权编码）。</p><h3 id="中断屏蔽" tabindex="-1">中断屏蔽 <a class="header-anchor" href="#中断屏蔽" aria-label="Permalink to &quot;中断屏蔽&quot;">​</a></h3><p>8259A的8条中断请求线的每一条都可根据需要单独屏蔽，可通过写入OCW1的命令字来实现。</p><ol><li><p>普通屏蔽方式：</p><p>允许比该优先级高的中断源申请中断，不允许同级或低级中断源申请中断。</p></li><li><p>特殊屏蔽方式：</p><p>屏蔽同级,允许级别比他高的或比他低的中断源申请中断。</p></li></ol><h3 id="中断结束命令" tabindex="-1">中断结束命令 <a class="header-anchor" href="#中断结束命令" aria-label="Permalink to &quot;中断结束命令&quot;">​</a></h3><p>根据不同的工作方式8259A可以有几种不同的结束方法。</p><p>（1）自动中断结束方式（AEOI）</p><p>当某一级中断被CPU响应后，CPU送回第一个INTA中断响应信号，使ISR的相应位置1，当第二个INTA负脉冲结束时，自动将ISR的相应位置0。</p><p>（2）非自动中断结束方式（EOI）</p><p>中断返回前，必须用指令向8259A发中断结束命令，即使ICW4的D1=0。若级连，发2个。</p><p>首先将ICW4的D1=0，定为正常中断结束方式，然后用OUT向8259A的偶地址端口输出OCW2操作控制字（OCW2的D7D6D5=001），实现自动结束命令。</p><p>读8259A 的状态</p><p>​ 8259A的IRR、ISR、IMR，通过OCW3来读取状态</p>',85)]))}const f=e(I,[["render",_]]);export{P as __pageData,f as default};
