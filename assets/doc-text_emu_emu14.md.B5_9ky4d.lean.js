import{_ as a,c as i,a2 as p,o as l}from"./chunks/framework.3VuPyQdv.js";const e="/docs-demo/emuImage/image-20231017144706625.png",n="/docs-demo/emuImage/image-20231017144753204.png",t="/docs-demo/emuImage/image-20231017145322617.png",h="/docs-demo/emuImage/%E6%96%B9%E5%BC%8F%E6%8E%A7%E5%88%B6%E5%AD%97.png",r="/docs-demo/emuImage/%E7%AB%AF%E5%8F%A3C%E7%BD%AE%E4%BD%8D.png",o="/docs-demo/emuImage/image-20231017222341587.png",d="/docs-demo/emuImage/image-20231018143555256.png",k="/docs-demo/emuImage/image-20231018143745121.png",m="/docs-demo/emuImage/image-20231018143843510.png",y=JSON.parse('{"title":"8255并行通信和并行接口芯片","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/emu/emu14.md","filePath":"doc-text/emu/emu14.md","lastUpdated":1743601929000}'),c={name:"doc-text/emu/emu14.md"};function g(C,s,u,E,A,b){return l(),i("div",null,s[0]||(s[0]=[p('<h1 id="_8255并行通信和并行接口芯片" tabindex="-1">8255并行通信和并行接口芯片 <a class="header-anchor" href="#_8255并行通信和并行接口芯片" aria-label="Permalink to &quot;8255并行通信和并行接口芯片&quot;">​</a></h1><p>并行通信</p><p>1.并行通信——就是把一个字符的全部n个数据位用</p><p>​ n条线同时进行传输。</p><p>​ 特点：</p><p>​ 传输速度快</p><p>​ 效率高</p><p>​ 用电缆多</p><p>​ 适用场合：数据传输率要求较高，而传输距离较短的场合。</p><p>2.并行接口: 实现并行通信的接口</p><p>分为：</p><ol><li>输入接口：负责输入信息</li><li>输出接口：负责输出信息</li><li>双向通信接口：既负责输入信息，又负责输出信息</li></ol><p>典型的并行接口和外设连接的示意图 :</p><img src="'+e+'" alt="image-20231017144706625" style="zoom:50%;"><h2 id="可编程并行通信接口芯片8255a的应用" tabindex="-1">可编程并行通信接口芯片8255A的应用 <a class="header-anchor" href="#可编程并行通信接口芯片8255a的应用" aria-label="Permalink to &quot;可编程并行通信接口芯片8255A的应用&quot;">​</a></h2><h3 id="_8255a的内部结构" tabindex="-1">8255A的内部结构 <a class="header-anchor" href="#_8255a的内部结构" aria-label="Permalink to &quot;8255A的内部结构&quot;">​</a></h3><p>8255的内部结构分成两组控制：A组控制和B组控制</p><ol><li>A组控制：由端口A以及，端口C的上半部分组成</li><li>B组控制：由端口B以及，端口C的下半部分组成</li></ol><img src="'+n+'" alt="image-20231017144753204" style="zoom:33%;"><h2 id="外设接口部分" tabindex="-1">外设接口部分： <a class="header-anchor" href="#外设接口部分" aria-label="Permalink to &quot;外设接口部分：&quot;">​</a></h2><p>① 3个8 位数据端口A、B、C</p><p>​ 端口A：输入输出均锁存，数据不易丢失</p><p>​ 端口B：输入不锁存，输出锁存</p><p>​ 端口C：输入不锁存，输出锁存</p><p>② 两组控制</p><p>A组控制电路</p><ol><li>端口A PA7-PA0</li><li>端口C的高4位 PC7～PC4</li></ol><p>B组控制电路</p><ol><li>端口B PB7-PB0</li><li>端口C的低4位 PC3～PC0</li></ol><h2 id="cpu接口部分" tabindex="-1">CPU接口部分 <a class="header-anchor" href="#cpu接口部分" aria-label="Permalink to &quot;CPU接口部分&quot;">​</a></h2><p>① 读/写控制逻辑电路</p><p>​ 功能：管理数据传输过程。</p><p>② 数据总线缓冲器(双向三态的8位数据缓冲器 )</p><p>功能：通过它与系统数据总线相连。</p><h2 id="_8255a的引脚及功能" tabindex="-1">8255A的引脚及功能 <a class="header-anchor" href="#_8255a的引脚及功能" aria-label="Permalink to &quot;8255A的引脚及功能&quot;">​</a></h2><img src="'+t+`" alt="image-20231017145322617" style="zoom:33%;"><p>1、与外设相连的引脚 24个</p><p>PA7～PA0——端口A数据线</p><p>PB7～PB0——端口B数据线</p><p>PC7～PC0——端口C数据线</p><p>2、与CPU相连的引脚 14个</p><p>1）RESET——复位信号</p><p>2）D7～D0——8255A的数据线</p><p>3）CS——片选信号</p><p>4）RD——读信号</p><p>5）WR——写信号</p><p>6）A1、A0——端口选择信号</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A1  A0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   端口A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   端口B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   端口C</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   控制端口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意：</p><p>​ 因为低8位和偶地址端口相连，所以在8086系统中，将8255A的A1、A0引脚分别接向系统总线A2、A1，并且CPU对8255A的端口进行访问时，应将其地址最低位A0设置为0。</p><h2 id="_8255a的控制字" tabindex="-1">8255A的控制字 <a class="header-anchor" href="#_8255a的控制字" aria-label="Permalink to &quot;8255A的控制字&quot;">​</a></h2><p>根据D7位的状态来决定控制字分两类。</p><ol><li>各端口的方式选择控制字</li><li>C端口按位置1/置0控制字</li></ol><p>1、方式选择控制字(记住）</p><img src="`+h+'" style="zoom:50%;"><p>方式选择控制字标志：为 1 表示工作方式、为 0 表示 C口 按位</p><p>8255A方式选择注意：</p><ol><li>三种基本工作方式： <ol><li>方式0：基本输入/输出方式</li><li>方式1：选通工作方式</li><li>方式2：双向传送方式</li></ol></li><li>只有端口A能工作在方式2 <ol><li>端口A <ol><li>方式0</li><li>方式1</li><li>方式2</li></ol></li><li>端口B <ol><li>方式0</li><li>方式1</li></ol></li><li>端口C <ol><li>方式0</li></ol></li></ol></li><li>同一组的两端口可分别工作在输入和输出方式</li></ol><h2 id="端口c置位-复位控制字-d7-0" tabindex="-1">端口C置位/复位控制字（D7=0） <a class="header-anchor" href="#端口c置位-复位控制字-d7-0" aria-label="Permalink to &quot;端口C置位/复位控制字（D7=0）&quot;">​</a></h2><img src="'+r+'" style="zoom:67%;"><p>此控制字必须写入8255A的控制口</p><h2 id="_8255a的工作方式" tabindex="-1">8255A的工作方式 <a class="header-anchor" href="#_8255a的工作方式" aria-label="Permalink to &quot;8255A的工作方式&quot;">​</a></h2><p>1、方式0——基本输入/输出方式</p><p>特点 :</p><p>1）端口A、端口B、端口C上、下均可作为输入或输出口，且各端口均是独立的。</p><p>2）四个端口的输入或输出，可以有16种不同的组合。</p><p>3）各端口输入时无锁存，输出时锁存。</p><p>使用场合：</p><p>1）同步传送 (无条件传送方式)</p><p>2）查询式传送</p><p>2、方式1——选通的输入/输出方式</p><p>必须利用端口C提供的选通信号和应答信号等</p><p>特点：</p><p>​ 1）端口A和B要在端口C 的配合下工作。</p><p>​ 2）端口C中有三位用于端口A的I/O控制，另有三位用于端口B的I/0控制，并且提供中断逻辑。</p><p>​ 3）若只有一个数据端口工作在方式1，则另一个数据端口及端口C余下的五位可工作于方式0；</p><p>若两个数据端口都工作于方式1，那么端口C余下的两位可作I/O位，也可进行置位/复位操作。</p><p>2、方式1 —— 输入</p><img src="'+o+`" alt="image-20231017222341587" style="zoom:80%;"><p>STB非：输入选通，低电平有效，由外设提供。将外设数据锁存于接口的输入端口中。</p><p>IBF（Input Buffer Full）：输入缓冲器满，高电平有效。</p><p>INTR：中断请求，高电平有效。当外设将数据锁存于接口之中，且又允许中断请求发生时，就会产生中断请求。</p><p>INTE：中断允许。A口的INTEA由PC4来控制，B口的INTEB用PC2的按位操作来进行控制。(不影响引脚的电平状态)</p><p>方式一A口：</p><p>​ INTE = 0 关闭(开关中断)</p><p>​ INTE = 1 ——》 pc4送1 (指令)，按位</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b (打开)  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (关闭)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 控制口 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">al</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>方式1—B口：</p><p>​ INTE = 0 关闭(开关中断)</p><p>​ INTE = 1 ——》 pc2送1 (指令)，按位</p><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> al</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b (打开)  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (关闭)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 控制口 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">al</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3、方式1 —— 输出</p><img src="`+d+'" alt="image-20231018143555256" style="zoom:50%;"><p>OBF非：（Output Buffer Full）：输出缓冲器满，低电平有效。该信号通知外设，</p><p>ACK非：外设响应，低电平有效。该信号通知接口，外设已将数据接收并使OBF非＝1。</p><p>INTR：中断请求，高电平有效。当外设接收到一个数据后，通过该信号告诉CPU，刚才输出的数据已经被接收，可以再输出下一个数据。</p><p>INTE：中断允许。A口和B口的INTR均受INTE的控制。A口的INTEA由PC6来控制，可用C口的按位操作对PC6置位或复位，以对中断INTRA进行控制。同理，B口的INTEB用PC2的按位操作来进行控制。(不影响引脚的电平状态)</p><h2 id="_8255a应用举例" tabindex="-1">8255A应用举例 <a class="header-anchor" href="#_8255a应用举例" aria-label="Permalink to &quot;8255A应用举例&quot;">​</a></h2><p>（1）8255A工作方式0</p><p>某接口设计采用一片8255A实现。其端口A连接并行打印机, 端口B连接纸带读入机。8255A工作于方式0，以查询方式传送数据。对8255A初始化并编写相关的程序。</p><img src="'+k+'" alt="image-20231018143745121" style="zoom:50%;"><p>各控制信号的意义为：</p><p>DATA STROBE ──数据选通信号。打印机要有一个宽度为0.5μs的脉冲，作为数据选通信号。由PC4位输出。</p><p>BUSY──当其有效时为高电平，此时表示打印机“忙”，不能接收新的输出数据。这是打印机的状态信号。由PC2位读入。</p><p>DRIVE RIGHT──此信号驱动纸带前进一步，并读一个字符。它是8255A给外设的启动信号。由PC5位输出。</p><p>DATA READY──纸带读入器的状态信号。其为高电平表示纸带读入器已将数据准备好。由PC3位读入</p><p>⑵ 8255A工作于方式1应用举例</p><p>​ 8255A工作于方式1，可以支持CPU以中断方式和外设进行通信。下图是一个使用8255A的接口电路，其中字符打印机以中断方式工作。</p><img src="'+m+'" alt="image-20231018143843510" style="zoom:50%;">',109)]))}const F=a(c,[["render",g]]);export{y as __pageData,F as default};
