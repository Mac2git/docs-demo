import{_ as i,c as a,a2 as s,o}from"./chunks/framework.3VuPyQdv.js";const r="/docs-demo/redisImages/image-20250412134834950.png",t="/docs-demo/redisImages/image-20250412135541703.png",d="/docs-demo/redisImages/image-20250412135626311.png",p="/docs-demo/redisImages/image-20250412135716317.png",l="/docs-demo/redisImages/image-20250412135904456.png",m="/docs-demo/redisImages/image-20250412140300483.png",g="/docs-demo/redisImages/image-20250412140334001.png",n="/docs-demo/redisImages/image-20250412140539111.png",c="/docs-demo/redisImages/image-20250412143040215.png",h="/docs-demo/redisImages/image-20250412143204897.png",_="/docs-demo/redisImages/image-20250412143515348.png",b="/docs-demo/redisImages/image-20250412143957147.png",f="/docs-demo/redisImages/image-20250412144015323.png",u="/docs-demo/redisImages/image-20250412144353554.png",O="/docs-demo/redisImages/image-20250412144525191.png",A="/docs-demo/redisImages/image-20250412145620989.png",F="/docs-demo/redisImages/image-20250412160029456.png",I="/docs-demo/redisImages/image-20250412160456020.png",q="/docs-demo/redisImages/image-20250412160045041.png",x="/docs-demo/redisImages/image-20250412160715667.png",k="/docs-demo/redisImages/image-20250412160833207.png",y="/docs-demo/redisImages/image-20250412162222408.png",R="/docs-demo/redisImages/image-20250412162355639.png",B="/docs-demo/redisImages/image-20250412163907395.png",D="/docs-demo/redisImages/image-20250412163947557.png",P="/docs-demo/redisImages/image-20250412164019685.png",v="/docs-demo/redisImages/image-20250412164706643.png",w="/docs-demo/redisImages/image-20250412165053214.png",S="/docs-demo/redisImages/image-20250412170306543.png",N="/docs-demo/redisImages/image-20250412170338012.png",C="/docs-demo/redisImages/image-20250412170442335.png",$="/docs-demo/redisImages/image-20250412170506875.png",E="/docs-demo/redisImages/image-20250413151754846.png",L="/docs-demo/redisImages/image-20250412170541034.png",T="/docs-demo/redisImages/image-20250413140942560.png",U="/docs-demo/redisImages/image-20250413142055377.png",G="/docs-demo/redisImages/image-20250413142350177.png",H="/docs-demo/redisImages/image-20250413142506831.png",J="/docs-demo/redisImages/image-20250413143145004.png",M="/docs-demo/redisImages/image-20250413143241436.png",V="/docs-demo/redisImages/image-20250413143617617.png",Z="/docs-demo/redisImages/image-20250413143420437.png",j="/docs-demo/redisImages/image-20250413143519513.png",z="/docs-demo/redisImages/image-20250413150409480.png",K="/docs-demo/redisImages/image-20250413152812181.png",Q="/docs-demo/redisImages/image-20250413150618569.png",W="/docs-demo/redisImages/image-20250413150853690.png",X="/docs-demo/redisImages/image-20250413151115020.png",Y="/docs-demo/redisImages/image-20250413151219297.png",ee="/docs-demo/redisImages/image-20250413151341369.png",ie="/docs-demo/redisImages/image-20250413161250807.png",ae="/docs-demo/redisImages/image-20250413161351896.png",se="/docs-demo/redisImages/image-20250413161744835.png",oe="/docs-demo/redisImages/image-20250413161939967.png",re="/docs-demo/redisImages/image-20250413162918039.png",te="/docs-demo/redisImages/image-20250413164812270.png",de="/docs-demo/redisImages/image-20250413164920992.png",pe="/docs-demo/redisImages/image-20250413165313170.png",le="/docs-demo/redisImages/image-20250413172308803.png",me="/docs-demo/redisImages/image-20250413172712408.png",ge="/docs-demo/redisImages/image-20250413172848044.png",ne="/docs-demo/redisImages/image-20250413173333430.png",ce="/docs-demo/redisImages/image-20250413173744340.png",he="/docs-demo/redisImages/image-20250413173835423.png",_e="/docs-demo/redisImages/image-20250413173933121.png",be="/docs-demo/redisImages/image-20250413173954069.png",fe="/docs-demo/redisImages/image-20250413175315000.png",ue="/docs-demo/redisImages/image-20250413175941896.png",Re=JSON.parse('{"title":"redis","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/RDB+AOF.md","filePath":"doc-text/redis/RDB+AOF.md","lastUpdated":1744815679000}'),Oe={name:"doc-text/redis/RDB+AOF.md"};function Ae(Fe,e,Ie,qe,xe,ke){return o(),a("div",null,e[0]||(e[0]=[s('<h1 id="redis" tabindex="-1">redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;redis&quot;">​</a></h1><h2 id="redis数据数据持久化" tabindex="-1">redis数据数据持久化 <a class="header-anchor" href="#redis数据数据持久化" aria-label="Permalink to &quot;redis数据数据持久化&quot;">​</a></h2><p><img src="'+r+'" alt="image-20250412134834950"></p><p>为什么要用数据持久化？</p><p>数据持久化可以在内存丢失或其他灾难性故障的情况下实现恢复。</p><p>数据持久化的两种方式</p><ol><li>AOF：以日志的形式来记录每个写操作，将redis执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写入指令从前到后执行一次以完成数据的恢复工作。</li><li>RDB（Redis 数据库）：RDB 持久性以指定的时间间隔执行数据集的时间点快照。</li></ol><h3 id="rdb-redis-database" tabindex="-1">rdb（redis database） <a class="header-anchor" href="#rdb-redis-database" aria-label="Permalink to &quot;rdb（redis database）&quot;">​</a></h3><p><strong>能干嘛？</strong></p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot内存快照，它恢复时再将硬盘快照文件直接读回到内存里。Redis的数据都在内存中，保存备份时它执行的是全量快照，也就是说，把内存中的所有数据都记录到磁盘中，一锅端。</p><p>Rdb保存的是dump.rdb文件</p><p><img src="'+t+'" alt="image-20250412135541703"></p><p>Redis6.0.16以下</p><p><img src="'+d+'" alt="image-20250412135626311"></p><p>Redis6.2以及Redis-7.0.0</p><p><img src="'+p+'" alt="image-20250412135716317"></p><h4 id="自动触发" tabindex="-1">自动触发 <a class="header-anchor" href="#自动触发" aria-label="Permalink to &quot;自动触发&quot;">​</a></h4><ol><li>redis7版本，按照redis.conf里配置的save&lt;seconds&gt;&lt;changes&gt;</li></ol><p><img src="'+l+'" alt="image-20250412135904456"></p><ol start="2"><li>本案例5秒内2次修改</li></ol><p><img src="'+m+'" alt="image-20250412140300483"></p><ol start="3"><li>修改dump文件保存路径</li></ol><p><img src="'+g+'" alt="image-20250412140334001"></p><p><img src="'+n+'" alt="image-20250412140539111"></p><p><img src="'+c+'" alt="image-20250412143040215"></p><p><img src="'+h+'" alt="image-20250412143204897"></p><p>修改dump的默认文件名称</p><p><img src="'+_+'" alt="image-20250412143515348"></p><p>触发备份情况</p><ol><li><img src="'+b+'" alt="image-20250412143957147"></li><li><img src="'+f+'" alt="image-20250412144015323"></li></ol><p>如何恢复？</p><ol><li><p>将备份文件（dump6379.rdb）移动到redis安装目录并启动服务即可</p></li><li><p>备份成功后故意用flushdb清空redis，看看是否可以恢复数据</p><p><img src="'+u+'" alt="image-20250412144353554"></p><ol><li><p>结论</p><p>执行flushdb/flushall命令也会产生dump.rdb文件，但是里面是空的，无意义</p></li></ol></li><li><p>物理恢复，一定服务和备份<strong>分级隔离</strong></p><p><img src="'+O+'" alt="image-20250412144525191">不可以把备份文件dump.rdb和生产redis服务器放在同一台机器，必须分开各自存储，以防生产机物理损坏后备份文件也挂了。</p></li></ol><p>注意：</p><p><img src="'+A+'" alt="image-20250412145620989"></p><p>执行quit命令就会写入dump文件，建议保存好数据，修改文件名或后缀名，或者备份文件，以免文件被覆盖</p><h4 id="手动触发" tabindex="-1">手动触发 <a class="header-anchor" href="#手动触发" aria-label="Permalink to &quot;手动触发&quot;">​</a></h4><p>redis提供了两个命令来生成RDB文件，分别是save和bgsave</p><p><strong>save（不推荐使用）</strong>：</p><p>在主程序中执行<strong>会阻塞</strong>当前redis服务器，直到持久化工作完成执行save命令期间，redis不能处理其他命令，线上禁止使用。</p><p><img src="'+F+'" alt="image-20250412160029456"></p><p><img src="'+I+'" alt="image-20250412160456020"></p><p><strong>bgsave（默认）</strong>：</p><p>redis会在后台异步进行快照操作，<strong>不阻塞</strong>快照同时还可以响应客户端请求，该触发方式会fork一个子进程由子进程复制持久化过程</p><p>redis会使用bgsave对当前内存中的所有数据做快照，这个操作是子进程在后台完成的，这就允许主进程同时可以修改数据。</p><p><strong>fork是什么？</strong></p><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，尽量避免膨胀。</p><p><img src="'+q+'" alt="image-20250412160045041"></p><p><img src="'+x+'" alt="image-20250412160715667"></p><p><strong>lastsave</strong>：可以通过lastsave命令获取最后一次成功执行快照的时间</p><p><img src="'+k+'" alt="image-20250412160833207"></p><h4 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h4><p><img src="'+y+'" alt="image-20250412162222408"></p><ol><li>适合大规模的数据恢复</li><li>按照业务定时备份</li><li>对数据完整性和一致性要求不高</li><li>RDB文件在内存中的加载速度要比 AOF 快得多</li></ol><h4 id="劣势" tabindex="-1">劣势 <a class="header-anchor" href="#劣势" aria-label="Permalink to &quot;劣势&quot;">​</a></h4><p><img src="'+R+'" alt="image-20250412162355639"></p><ol><li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失从当前至最近一次快照期间的数据，快照之间的数据会丢失</li><li>内存数据的全量同步，如果数据量太大会导致 I/O 严重影响服务器性能</li><li>RDB 依赖于主进程的 fork，在更大的数据集中，这可能会导致服务请求的瞬间延迟。fork的时候内存中的数据被克隆了一份，大致2倍的膨胀性，需要考虑</li></ol><p><strong>数据丢失案例</strong>：</p><p>正常录入数据</p><p><img src="'+B+'" alt="image-20250412163907395"></p><p>使用kill -9杀死进程</p><p><img src="'+D+'" alt="image-20250412163947557"></p><p>重启服务后，查看数据是否丢失</p><p><img src="'+P+'" alt="image-20250412164019685"></p><h4 id="如何检测并修复dump-rdb文件" tabindex="-1">如何检测并修复dump.rdb文件 <a class="header-anchor" href="#如何检测并修复dump-rdb文件" aria-label="Permalink to &quot;如何检测并修复dump.rdb文件&quot;">​</a></h4><p><img src="'+v+'" alt="image-20250412164706643"></p><h4 id="哪些情况会触发rdb快照" tabindex="-1">哪些情况会触发RDB快照 <a class="header-anchor" href="#哪些情况会触发rdb快照" aria-label="Permalink to &quot;哪些情况会触发RDB快照&quot;">​</a></h4><ol><li>配置文件中默认的快照配置</li><li>手动 save/bgsave 命令</li><li>执行 flushall/flushdb 命令也会产生 dump.rdb 文件，但这里面是空的，无意义</li><li>执行 shutdown 且没有设置开启 AOF 持久化</li><li>主从复制时，主节点自动触发</li></ol><h4 id="如何禁用快照" tabindex="-1">如何禁用快照 <a class="header-anchor" href="#如何禁用快照" aria-label="Permalink to &quot;如何禁用快照&quot;">​</a></h4><ol><li><p>动态所有停止 RDB 保存规则的方法：<code>redis-cli config set save</code> &quot;&quot;</p></li><li><p>快照禁用</p><p><img src="'+w+'" alt="image-20250412165053214"></p></li></ol><h4 id="rdb-优化配置项" tabindex="-1">RDB 优化配置项 <a class="header-anchor" href="#rdb-优化配置项" aria-label="Permalink to &quot;RDB 优化配置项&quot;">​</a></h4><p>配置文件<code>SNAPSHOTTING</code>模块</p><p>save &lt;seconds&gt;&lt;changes&gt;</p><p><code>dbfilename</code></p><p><code>dir</code></p><p><code>stop-writes-on-bgsave-error</code></p><p><img src="'+S+'" alt="image-20250412170306543"></p><p>默认yes</p><p>如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制这种不一致，那么在快照写入失败时，</p><p>也能确保redis继续接受新的写请求</p><p><code>rdbcompression</code></p><p><img src="'+N+'" alt="image-20250412170338012"></p><p>默认yes</p><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。 如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能</p><p><code>rdbchecksum</code></p><p><img src="'+C+'" alt="image-20250412170442335"></p><p>默认yes</p><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p><code>rdb-del-sync-files</code></p><p><img src="'+$+'" alt="image-20250412170506875"></p><p>rdb-del-sync-files：在没有持久性的情况下删除复制中使用的RDB文件启用。默认情况下no，此选项是禁用的。</p><h4 id="关闭rdb持久化" tabindex="-1">关闭RDB持久化 <a class="header-anchor" href="#关闭rdb持久化" aria-label="Permalink to &quot;关闭RDB持久化&quot;">​</a></h4><p><img src="'+E+'" alt="image-20250413151754846"></p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p><img src="'+L+'" alt="image-20250412170541034"></p><h3 id="aof-append-only-file" tabindex="-1">AOF（Append Only File） <a class="header-anchor" href="#aof-append-only-file" aria-label="Permalink to &quot;AOF（Append Only File）&quot;">​</a></h3><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p>默认情况下，redis是没有开启AOF（append only file）的。开启AOF 功能需要设置配置：<code>appendonly yes</code></p><p>AOF 保存的是appendonly.aof文件</p><h4 id="aof-持久化工作流程" tabindex="-1"><strong>AOF 持久化工作流程</strong>： <a class="header-anchor" href="#aof-持久化工作流程" aria-label="Permalink to &quot;**AOF 持久化工作流程**：&quot;">​</a></h4><p><img src="'+T+'" alt="image-20250413140942560"></p><table tabindex="0"><thead><tr><th>1</th><th>Client作为命令的来源，会有多个源头以及源源不断的请求命令。</th></tr></thead><tbody><tr><td>2</td><td>在这些命令到达Redis Server 以后并不是直接写入AOF文件，会将其这些命令先放入AOF缓存中进行保存。这里的AOF缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘IO操作。</td></tr><tr><td>3</td><td>AOF缓冲会根据AOF缓冲区***同步文件的三种写回策略***将命令写入磁盘上的AOF文件。</td></tr><tr><td>4</td><td>随着写入AOF内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称*<strong>AOF重写)*</strong>，从而起到AOF文件压缩的目的。</td></tr><tr><td>5</td><td>当Redis Server 服务器重启的时候会从AOF文件载入数据。</td></tr></tbody></table><h4 id="aof缓冲区三种写回策略" tabindex="-1">AOF缓冲区三种写回策略 <a class="header-anchor" href="#aof缓冲区三种写回策略" aria-label="Permalink to &quot;AOF缓冲区三种写回策略&quot;">​</a></h4><ol><li><p>always</p><p>同步写回，每个写命令执行完成立刻同步地将日志写回磁盘</p></li><li><p>everysec</p><p>每秒写回，每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔1秒把缓冲区中的内容写入磁盘</p></li><li><p>no：操作系统控制的写回，每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</p></li></ol><p><strong>三种写回策略总结</strong>：</p><table tabindex="0"><thead><tr><th style="text-align:center;">配置项</th><th style="text-align:center;">写回时机</th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;">Always</td><td style="text-align:center;">同步写回</td><td style="text-align:center;">可靠性高，数据基本不丢失</td><td style="text-align:center;">每个写命令都要落盘，性能影响较大</td></tr><tr><td style="text-align:center;">Everysec</td><td style="text-align:center;">每秒写回</td><td style="text-align:center;">性能适中</td><td style="text-align:center;">宕机时丢失1秒内的数据</td></tr><tr><td style="text-align:center;">No</td><td style="text-align:center;">操作系统控制的写回</td><td style="text-align:center;">性能好</td><td style="text-align:center;">宕机时丢失数据较多</td></tr></tbody></table><h4 id="aof配置-启动-修复-恢复-redis6-vs-redis7中的区别" tabindex="-1">AOF配置/启动/修复/恢复（redis6 vs redis7中的区别） <a class="header-anchor" href="#aof配置-启动-修复-恢复-redis6-vs-redis7中的区别" aria-label="Permalink to &quot;AOF配置/启动/修复/恢复（redis6 vs redis7中的区别）&quot;">​</a></h4><p>配置文件说明（6 vs 7）</p><ol><li><p>如何开启 aof</p><p><img src="'+U+'" alt="image-20250413142055377"></p></li><li><p>使用默认写回方式，每秒钟</p><p><img src="'+G+'" alt="image-20250413142350177"></p></li><li><p>aof文件-保存路径</p><ol><li><p>redis6</p><p>aof 保存文件的位置和RDB保存文件的位置一样，都是通过 redis.conf 配置文件的dir配置</p><p><img src="'+H+'" alt="image-20250413142506831"></p></li><li><p>redis7之后最新</p><p><img src="'+J+'" alt="image-20250413143145004"></p><p>去除dumpfiles</p><p><img src="'+M+'" alt="image-20250413143241436"></p></li><li><p>aof文件-保存名称</p><ol><li><p>redis6：有且仅有一个</p></li><li><p>redis7：Multi Part AOF 的设计</p><p><img src="'+V+'" alt="image-20250413143617617"></p><p><img src="'+Z+'" alt="image-20250413143420437"></p><ol><li>base 基本文件</li><li>incr 增量文件</li><li>manifest 清单文件</li></ol></li><li><p>redis7.0config 中对应的配置项</p><p><img src="'+j+'" alt="image-20250413143519513"></p></li></ol></li></ol><p>正常恢复</p><ol><li><p>启动：设置yes</p><p>修改默认的appendonly no ，改为 yes</p></li><li><p>写操作继续，生成 aof 文件到指定的目录</p></li><li><p>恢复1：重启redis 然后重新加载，结果 ok</p></li><li><p>恢复2：</p><ol><li>写入数据进redis，然后flushdb+shutdown服务器</li><li>新生成 dump和aof</li><li>备份新生成的 aof.bak，然后删除 dump/aof 再恢复</li><li>重启redis然后重新加载试试</li><li>停止服务器，拿出我们的备份修改后再重新启动服务器看看</li></ol></li></ol></li></ol><h5 id="正常恢复" tabindex="-1">正常恢复： <a class="header-anchor" href="#正常恢复" aria-label="Permalink to &quot;正常恢复：&quot;">​</a></h5><p>可以看到我们的rdb和aof都已经写入成功</p><p><img src="'+z+'" alt="image-20250413150409480"></p><p><img src="'+K+'" alt="image-20250413152812181"></p><p>当我们在添加一个数据，看看这个数据被记录到那个文件里面了！</p><p>我们先复制一份</p><p><img src="'+Q+'" alt="image-20250413150618569"></p><p>我们关闭redis服务器</p><p><img src="'+W+'" alt="image-20250413150853690"></p><p>删除<code>appendonlydir</code>，因为我们模拟恢复，因为进行<code>flushdb</code>清空，然后<code>shutdown</code>关闭服务器的时候也会写入<code>appendonlydir</code>，所以我们要删除<code>appendonlydir</code>，因为这是个空文件</p><p><img src="'+X+'" alt="image-20250413151115020"></p><p>修改<code>appendonlydir.bak</code>文件，改为<code>apppendonlydir</code></p><p><img src="'+Y+'" alt="image-20250413151219297"></p><p>在启动redis服务器试试，看看有没有恢复</p><p><img src="'+ee+'" alt="image-20250413151341369"></p><p>异常恢复</p><ol><li>故意乱写正常的 AOF 文件</li><li>模拟网络闪断写 error</li><li>重启 redis 之后就会进行 AOF 文件的载入，发现启动都不行</li><li>异常修复命令：<code>redis-check-aof --fix</code>进行修复</li><li>重启 ok</li></ol><h5 id="异常修复" tabindex="-1">异常修复 <a class="header-anchor" href="#异常修复" aria-label="Permalink to &quot;异常修复&quot;">​</a></h5><p>从上述可以看出我们的写入的数据会保存在，<code>appendonly.aof.1.incr.aof</code>中，如果我们在<code>appendonly.aof.1.incr.aof</code>里面乱加入一些东西，看看可以恢复吗？</p><p><img src="'+ie+'" alt="image-20250413161250807"></p><p><img src="'+ae+'" alt="image-20250413161351896"></p><p>我们把数据清空，在shutdown，然后重启redis-server</p><p><img src="'+se+'" alt="image-20250413161744835"></p><p>我们使用<code>redis-check-aof --fix 文件名进行修复</code></p><p><img src="'+oe+'" alt="image-20250413161939967"></p><p>我们启动redis-server看看， 有没有</p><p><img src="'+re+'" alt="image-20250413162918039"></p><p>可以看到我们的redis修复成功了！</p><h4 id="优势-1" tabindex="-1">优势 <a class="header-anchor" href="#优势-1" aria-label="Permalink to &quot;优势&quot;">​</a></h4><p><img src="'+te+'" alt="image-20250413164812270"></p><p>更好的保护数据不丢失、性能高、可做紧急恢复</p><h4 id="劣势-1" tabindex="-1">劣势 <a class="header-anchor" href="#劣势-1" aria-label="Permalink to &quot;劣势&quot;">​</a></h4><p><img src="'+de+'" alt="image-20250413164920992"></p><ol><li>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb</li><li>aof运行效率要，慢于rdb，每秒同步策略效率较好，不同于效率和rdb相同</li></ol><h4 id="aof重写机制" tabindex="-1">AOF重写机制 <a class="header-anchor" href="#aof重写机制" aria-label="Permalink to &quot;AOF重写机制&quot;">​</a></h4><p>由于AOF持久化是Redis不断将写命令记录到 AOF 文件中，随着Redis不断的进行，AOF 的文件会越来越大，文件越大，占用服务器内存越大以及 AOF 恢复要求时间越长。</p><p>为了解决这个问题，Redis新增了重写机制，当AOF文件的大小超过所设定的峰值时，Redis就会<strong>自动</strong>启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集或者可以手动使用命令 bgrewriteaof 来重新。</p><p>一句话：启动 AOF文件的内容压缩，只保留可以恢复数据的最小指令集</p><p>**举个例子：**比如有个key</p><p>一开始你 set k1 v1</p><p>然后改成 set k1 v2</p><p>最后改成 set k1 v3</p><p>如果不重写，那么这3条语句都在aof文件中，内容占空间不说启动的时候都要执行一遍，共计3条命令；</p><p>但是，我们实际效果只需要set k1 v3这一条，所以，开启重写后，只需要保存set k1 v3就可以了只需要保留最后一次修改值，相当于给aof文件瘦身减肥，性能更好。AOF重写不仅降低了文件的占用空间，同时更小的AOF也可以更快地被Redis加载。</p><h5 id="触发机制" tabindex="-1">触发机制 <a class="header-anchor" href="#触发机制" aria-label="Permalink to &quot;触发机制&quot;">​</a></h5><p><img src="'+pe+'" alt="image-20250413165313170"></p><blockquote><p>注意 ，同时满足，且的关系才会触发</p><ol><li>根据上次重写后的aof大小，判断当前aof大小是不是增长了1倍</li><li>重写时满足的文件大小</li></ol></blockquote><h6 id="自动触发-1" tabindex="-1">自动触发 <a class="header-anchor" href="#自动触发-1" aria-label="Permalink to &quot;自动触发&quot;">​</a></h6><p>满足配置文件中的选项后，redis会记录上次重写时的aof大小，默认配置是当aof文件大小是上次rewrite后大小的一倍且文件大于64m时</p><p>示例：</p><ol><li><p>修改最小重写大小，因为做实例，所以改的少一点</p><p><img src="'+le+'" alt="image-20250413172308803"></p></li><li><p>关闭 rdb和aof的混合模式</p><p><img src="'+me+'" alt="image-20250413172712408"></p></li><li><p>删除以前的aof和rdb，排除干扰项</p><p><img src="'+ge+'" alt="image-20250413172848044"></p></li><li><p>数据压缩进行测试</p><p><img src="'+ne+'" alt="image-20250413173333430"></p></li><li><p><code>appendonly.aof.3.base.rdb</code>文件，就是存放着我们最后一次对key写入的数据</p></li></ol><h6 id="手动触发-1" tabindex="-1">手动触发 <a class="header-anchor" href="#手动触发-1" aria-label="Permalink to &quot;手动触发&quot;">​</a></h6><p>客户端向服务器发送<code>bgrewriteao</code>命令</p><p>示例：</p><p><img src="'+ce+'" alt="image-20250413173744340"></p><h6 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h6><p><img src="'+he+'" alt="image-20250413173835423"></p><h5 id="重写原理" tabindex="-1">重写原理 <a class="header-anchor" href="#重写原理" aria-label="Permalink to &quot;重写原理&quot;">​</a></h5><ol><li>在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</li><li>与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。</li><li>当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中</li><li>当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中</li><li>重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</li></ol><h5 id="aof-优化配置项" tabindex="-1">AOF 优化配置项 <a class="header-anchor" href="#aof-优化配置项" aria-label="Permalink to &quot;AOF 优化配置项&quot;">​</a></h5><p>配置文件 append only mode 模块</p><p><img src="'+_e+'" alt="image-20250413173933121"></p><h5 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h5><p><img src="'+be+'" alt="image-20250413173954069"></p><h3 id="rdb-aof-混合持久化" tabindex="-1">RDB-AOF 混合持久化 <a class="header-anchor" href="#rdb-aof-混合持久化" aria-label="Permalink to &quot;RDB-AOF 混合持久化&quot;">​</a></h3><p>RDB和AOF可以同时共存，但是AOF的优先级高于RDB的优先级</p><p><img src="'+fe+'" alt="image-20250413175315000"></p><p><strong>如何选？</strong></p><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p><p>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾</p><p><strong>同时开启两种持久化方式</strong></p><p>在这种情况下，当redis重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整</p><p>RDB的数据不实时，同时使用两者服务器重启也只会找 AOF 文件。那要不要只是用 AOF 呢？ 官网建议不要，因为 RDB 更适合用于备份数据（AOF在不断变化不好备份），留着 rdb 作为一个以防万一的手段。</p><p><strong>推荐方式</strong>：</p><p>结合了RDB和AOF的优点，既能快速加载又能避免丢失过多的数据。</p><ol><li><p>开启混合方式设置</p><p>设置aof-use-rdb-preamble的值为 yes yes表示开启，设置为no表示禁用</p></li><li><p>RDB+AOF的混合方式---------&gt; 结论：RDB镜像做全量持久化，AOF做增量持久化</p><p>先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。<strong>----》AOF包括了RDB头部+AOF混写</strong></p><p><img src="'+ue+'" alt="image-20250413175941896"></p><h4 id="纯缓存模式" tabindex="-1">纯缓存模式 <a class="header-anchor" href="#纯缓存模式" aria-label="Permalink to &quot;纯缓存模式&quot;">​</a></h4><p>同时关闭 RDB+AOF</p><ol><li>save &quot;&quot; <ol><li>禁用 rdb</li><li>禁用 rdb 持久化模式下，我们仍然可以使用命令 save、bgsave 生成 rdb 文件</li></ol></li><li>appendonly no <ol><li>禁用 aof</li><li>禁用 aof 持久化模式下，我们仍然可以使用命令 bgrewriteaof 生成 aof文件</li></ol></li></ol></li></ol>',184)]))}const Be=i(Oe,[["render",Ae]]);export{Re as __pageData,Be as default};
