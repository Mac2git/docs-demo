import{_ as t,c as a,a2 as n,j as i,a as e,o as p}from"./chunks/framework.3VuPyQdv.js";const l="/docs-demo/redisImages/image-20250406143055527.png",d="/docs-demo/redisImages/redis.png",r="/docs-demo/redisImages/redis%E5%AE%89%E8%A3%85.png",o="/docs-demo/redisImages/image-20250406143750928.png",c="/docs-demo/redisImages/image-20250406144027413.png",h="/docs-demo/redisImages/image-20250406144621148.png",k="/docs-demo/redisImages/image-20250406144745776.png",m="/docs-demo/redisImages/image-20250406144910139.png",g="/docs-demo/redisImages/image-20250406144931933.png",u="/docs-demo/redisImages/image-20250406144946561.png",b="/docs-demo/redisImages/image-20250406145135039.png",E="/docs-demo/redisImages/image-20250406145229817.png",y="/docs-demo/redisImages/image-20250406145603470.png",v="/docs-demo/redisImages/image-20250406145719940.png",C="/docs-demo/redisImages/key.png",F="/docs-demo/redisImages/string%E5%91%BD%E4%BB%A4.png",x="/docs-demo/redisImages/image-20250406163641212.png",_="/docs-demo/redisImages/list.png",f="/docs-demo/redisImages/list%E5%91%BD%E4%BB%A4.png",B="/docs-demo/redisImages/image-20250406172123946.png",I="/docs-demo/redisImages/image-20250406172356511.png",w="/docs-demo/redisImages/image-20250406172732940.png",q="/docs-demo/redisImages/image-20250406173052157.png",D="/docs-demo/redisImages/image-20250406173317366.png",R="/docs-demo/redisImages/image-20250406173508097.png",A="/docs-demo/redisImages/image-20250406173742983.png",P="/docs-demo/redisImages/hash%E5%91%BD%E4%BB%A4.png",z="/docs-demo/redisImages/image-20250406175251833.png",S="/docs-demo/redisImages/image-20250406175459761.png",L="/docs-demo/redisImages/image-20250406175551830.png",O="/docs-demo/redisImages/image-20250406175725012.png",H="/docs-demo/redisImages/image-20250406175903212.png",G="/docs-demo/redisImages/image-20250406180220994.png",M="/docs-demo/redisImages/image-20250409154617663.png",T="/docs-demo/redisImages/image-20250409154749391.png",X="/docs-demo/redisImages/image-20250409154951035.png",N="/docs-demo/redisImages/image-20250409155136630.png",U="/docs-demo/redisImages/image-20250409155245778.png",V="/docs-demo/redisImages/image-20250409155446974.png",K="/docs-demo/redisImages/image-20250409170419443.png",$="/docs-demo/redisImages/image-20250409171225792.png",Z="/docs-demo/redisImages/image-20250409171654381.png",j="/docs-demo/redisImages/image-20250409172544136.png",J="/docs-demo/redisImages/bitmaps.png",Q="/docs-demo/redisImages/image-20250409180618769.png",W="/docs-demo/redisImages/image-20250409180842482.png",Y="/docs-demo/redisImages/image-20250409180948310.png",ss="/docs-demo/redisImages/image-20250409181059541.png",is="/docs-demo/redisImages/image-20250409181139433.png",es="/docs-demo/redisImages/image-20250409181646736.png",as="/docs-demo/redisImages/image-20250409181818185.png",ns="/docs-demo/redisImages/image-20250409182113564.png",ps="/docs-demo/redisImages/image-20250410160818942.png",ts="/docs-demo/redisImages/image-20250410162957806.png",ls="/docs-demo/redisImages/image-20250410163315401.png",ds="/docs-demo/redisImages/image-20250410163507481.png",rs="/docs-demo/redisImages/image-20250410163723293.png",os="/docs-demo/redisImages/image-20250410163750436.png",cs="/docs-demo/redisImages/image-20250410164012610.png",hs="/docs-demo/redisImages/image-20250410164156033.png",ks="/docs-demo/redisImages/image-20250410164811698.png",ms="/docs-demo/redisImages/image-20250410165223579.png",gs="/docs-demo/redisImages/image-20250410172029685.png",us="/docs-demo/redisImages/image-20250410172141313.png",bs="/docs-demo/redisImages/image-20250410172214112.png",Es="/docs-demo/redisImages/image-20250410174747266.png",ys="/docs-demo/redisImages/image-20250410175418702.png",vs="/docs-demo/redisImages/image-20250410175614939.png",Cs="/docs-demo/redisImages/image-20250410175725471.png",Fs="/docs-demo/redisImages/image-20250410175746217.png",xs="/docs-demo/redisImages/image-20250410180149257.png",_s="/docs-demo/redisImages/image-20250410181006834.png",fs="/docs-demo/redisImages/image-20250410173811155.png",Bs="/docs-demo/redisImages/image-20250410181716134.png",Is="/docs-demo/redisImages/image-20250410182230965.png",ws="/docs-demo/redisImages/image-20250410173936545.png",qs="/docs-demo/redisImages/image-20250410173951159.png",Ds="/docs-demo/redisImages/image-20250410184052182.png",Rs="/docs-demo/redisImages/image-20250410184654314.png",As="/docs-demo/redisImages/image-20250410185005071.png",Ps="/docs-demo/redisImages/image-20250410183229300.png",zs="/docs-demo/redisImages/image-20250410185349874.png",Ss="/docs-demo/redisImages/image-20250411220813033.png",Ls="/docs-demo/redisImages/image-20250411220856782.png",Os="/docs-demo/redisImages/image-20250411223808858.png",Hs="/docs-demo/redisImages/image-20250411221002550.png",Gs="/docs-demo/redisImages/image-20250411221551010.png",Ms="/docs-demo/redisImages/image-20250411221656767.png",Ts="/docs-demo/redisImages/image-20250411222138274.png",Xs="/docs-demo/redisImages/image-20250411222525532.png",Ns="/docs-demo/redisImages/image-20250411223252108.png",Us="/docs-demo/redisImages/image-20250411223309327.png",Vs="/docs-demo/redisImages/image-20250411223324513.png",ei=JSON.parse('{"title":"Redis","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/chapter1.md","filePath":"doc-text/redis/chapter1.md","lastUpdated":1744449979000}'),Ks={name:"doc-text/redis/chapter1.md"},$s={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Zs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 1000 950","aria-hidden":"true"};function js(Js,s,Qs,Ws,Ys,si){return p(),a("div",null,[s[7]||(s[7]=n('<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><h2 id="什么是redis" tabindex="-1">什么是Redis？ <a class="header-anchor" href="#什么是redis" aria-label="Permalink to &quot;什么是Redis？&quot;">​</a></h2><p>Redis 是一个内存数据存储，被数百万开发者用作缓存、向量数据库、文档数据库、流式引擎和消息代理。Redis 具有内置的复制和不同级别的磁盘持久化。它支持复杂的数据类型（例如，字符串、散列、列表、集合、有序集合和 JSON），并为这些数据类型定义了原子操作。</p><p>Redis 通常被称为数据结构服务器。这意味着 Redis 通过一组命令提供对可变数据结构的访问，这些命令通过 TCP 套接字和简单协议使用服务器-客户端模型发送。因此，不同的进程可以以共享的方式查询和修改相同的数据结构。</p><p>Redis 实现的数据结构具有一些特殊的属性：</p><ol><li>Redis 会将其存储在磁盘上，即使它们总是被服务器内存中读取和修改。这意味着 Redis 速度快，但同时也非易失性。</li><li>数据结构的实现强调内存效率，因此 Redis 内部的数据结构可能比使用高级编程语言建模的相同数据结构模型使用更少的内存。</li><li>Redis 提供了一系列数据库中常见的功能，如复制、可调的持久性级别、集群和高度可用性。</li></ol><h2 id="下载redis" tabindex="-1">下载Redis <a class="header-anchor" href="#下载redis" aria-label="Permalink to &quot;下载Redis&quot;">​</a></h2><blockquote><p><strong>命名规则：</strong></p><p>​ 版本号第二位如果是奇数，则为非稳定版本，如2.7、2.9、3.1</p><p>​ 版本号第二位如果是偶数，则为文档版本，如2.6、2.8、3.0、3.2</p><p>​ 当前奇数版本就是下一个稳定版本的开发版本，如2.9版本是3.0版本的开发版本</p></blockquote><p><a href="https://redis.io/downloads/" target="_blank" rel="noreferrer">下载Redis</a></p><h2 id="redis解决中文乱码" tabindex="-1">redis解决中文乱码 <a class="header-anchor" href="#redis解决中文乱码" aria-label="Permalink to &quot;redis解决中文乱码&quot;">​</a></h2><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a 密码 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">raw</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="linux安装redis" tabindex="-1">Linux安装Redis <a class="header-anchor" href="#linux安装redis" aria-label="Permalink to &quot;Linux安装Redis&quot;">​</a></h2><ol><li><p><code>getconf LONG_BIT</code>命令先看看是多少位的，一定要是64位</p></li><li><p>Centos7安装<code>Redis</code>，先具备gcc环境</p><ol><li><p>查看是否具有<code>gcc</code>环境<code>gcc -v</code></p><p><img src="'+l+'" alt="image-20250406143055527"></p></li><li><p>如果没有<code>gcc</code>环境，则通过<code>yum -y install gcc-c++</code>命令来安装<code>gcc</code></p></li></ol></li><li><p><code>Redis</code>官方建议版本升级到6.0.8以上</p><p><img src="'+d+'" alt=""></p></li><li><p>下载命令<code>wget https://download.redis.io/releases/redis-7.0.0.tar.gz</code></p><p><img src="'+r+'" alt=""></p></li><li><p>进入<code>/opt</code>目录下解压<code>redis</code>，解压命令<code>tar -zxvf redis-7.0.0.tar.gz</code></p><ol><li><p>解压后</p><p><img src="'+o+'" alt="image-20250406143750928"></p></li></ol></li><li><p>进入目录<code>cd redis-7.0.0</code></p></li><li><p>在<code>redis-7.0.0</code>目录执行<code>make</code>命令</p><p><img src="'+c+'" alt="image-20250406144027413"></p></li><li><p>查看默认安装目录：<code>usr/local/bin</code></p><ol><li><p>安装完后查看</p><p><img src="'+h+'" alt="image-20250406144621148"></p></li><li><p><code>redis-benchmark</code>：性能测试工具，服务启动后运行该命令，看看自己笔记本性能如何</p></li><li><p><code>redis-check-aof</code>：修复有问题的AOF文件</p></li><li><p><code>redis-check-dump</code>：修复有问题的dump.rdb文件</p></li><li><p><span style="color:#990000;"><code>redis-cli</code>：客户端，操作入口</span></p></li><li><p><code>redis-sentinel</code>：redis集群使用</p></li><li><p><span style="color:#990000;"><code>redis-server</code>：redis服务器启动命令</span></p></li></ol></li><li><p>将默认的<code>redis.conf</code>拷贝到自己定义好的一个路径下，比如<code>/myredis</code>(如果改坏的话有备份)</p><p><img src="'+k+`" alt="image-20250406144745776"></p></li><li><p>修改<code>/myredis</code>目录下<code>redis.conf</code>配置文件做初始化设置</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis.conf配置文件，改完后确保生效，记得重启，记得重启</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 默认daemonize no              改为  daemonize yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 默认protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mode  yes    改为  protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mode no</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 默认bind </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0.0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             改为  直接注释掉(默认bind </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.1只能本机访问)或改成本机IP地址，否则影响远程IP连接</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 添加redis密码                      改为 requirepass 你自己设置的密码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+m+'" alt="image-20250406144910139"></p><p><code>daemonize yes</code>：在后台启动</p><p><img src="'+g+'" alt="image-20250406144931933"></p><p><code>proteccted-mode no</code>：关闭保护模式</p><p><img src="'+u+'" alt="image-20250406144946561"></p><p><code>requirepass 密码</code>：添加redis密码</p></li><li><p>启动服务</p><p><code>/usr/local/bin</code>目录下运行<code>redis-server</code>，启用<code>/myredis</code>目录下的<code>redis.conf</code>文件</p></li><li><p>连接服务</p><p><img src="'+b+'" alt="image-20250406145135039"></p><p>Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.</p><p>我看着不爽，怎么办？</p><p>warning 这串输出并不是普通输出，</p><p>shell的标准输出包含两种：</p><p>1（标准输出）</p><p>2（标准错误）我们的命令，即包含1也包含2，2即是我们想要去除的提示。</p><p>解决办法将标准错误去除即可，追加2&gt;/dev/null，将标准错误丢弃即可，就没有烦人的警告了。</p><p><img src="'+E+'" alt="image-20250406145229817"></p></li><li><p>关闭</p><ol><li>单实例关闭：<code>redis-cli -a redis密码 shutdown</code></li><li>多实例关闭，指定端口关闭：<code>redis-cli -p 6379 shutdown</code></li></ol></li></ol><h2 id="redis卸载步骤" tabindex="-1">Redis卸载步骤 <a class="header-anchor" href="#redis卸载步骤" aria-label="Permalink to &quot;Redis卸载步骤&quot;">​</a></h2><ol><li><p>停止<code>redis-server</code>服务</p><p><img src="'+y+'" alt="image-20250406145603470"></p></li><li><p>删除<code>/usr/local/lib</code>目录下与<code>redis</code>相关的文件</p><ol><li>ls -l /usr/local/bin/redis-*</li><li>rm -rf /usr/local/bin/redis-*</li><li><img src="'+v+`" alt="image-20250406145719940"></li></ol></li></ol><p>​</p><h2 id="redis7新特性" tabindex="-1">Redis7新特性 <a class="header-anchor" href="#redis7新特性" aria-label="Permalink to &quot;Redis7新特性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>多AOF文件支持</th><th>7.0 版本中一个比较大的变化就是 aof 文件由一个变成了多个，主要分为两种类型：基本文件(base files)、增量文件(incr files)，请注意这些文件名称是复数形式说明每一类文件不仅仅只有一个。在此之外还引入了一个清单文件(manifest) 用于跟踪文件以及文件的创建和应用顺序（恢复）</th></tr></thead><tbody><tr><td>config命令增强</td><td>对于Config Set 和Get命令，支持在一次调用过程中传递多个配置参数。例如，现在我们可以在执行一次Config Set命令中更改多个参数： config set maxmemory 10000001 maxmemory-clients 50% port 6399</td></tr><tr><td>限制客户端内存使用Client-eviction</td><td>一旦 Redis 连接较多，再加上每个连接的内存占用都比较大的时候， Redis总连接内存占用可能会达到maxmemory的上限，可以增加允许限制所有客户端的总内存使用量配置项，redis.config 中对应的配置项// 两种配置形式：指定内存大小、基于 maxmemory 的百分比。maxmemory-clients 1gmaxmemory-clients 10%</td></tr><tr><td>listpack紧凑列表调整</td><td>listpack 是用来替代 ziplist 的新数据结构，在 7.0 版本已经没有 ziplist 的配置了（6.0版本仅部分数据类型作为过渡阶段在使用）listpack 已经替换了 ziplist 类似 hash-max-ziplist-entries 的配置</td></tr><tr><td>访问安全性增强ACLV2</td><td>在redis.conf配置文件中，protected-mode默认为yes，只有当你希望你的客户端在没有授权的情况下可以连接到Redis server的时候可以将protected-mode设置为no</td></tr><tr><td>Redis Functions</td><td>Redis函数，一种新的通过服务端脚本扩展Redis的方式，函数与数据本身一起存储。简言之，redis自己要去抢夺Lua脚本的饭碗</td></tr><tr><td>RDB保存时间调整</td><td>将持久化文件RDB的保存规则发生了改变，尤其是时间记录频度变化</td></tr><tr><td>命令新增和变动</td><td>Zset (有序集合)增加 ZMPOP、BZMPOP、ZINTERCARD 等命令Set (集合)增加 SINTERCARD 命令LIST (列表)增加 LMPOP、BLMPOP ，从提供的键名列表中的第一个非空列表键中弹出一个或多个元素。</td></tr><tr><td>性能资源利用率、安全、等改进</td><td>自身底层部分优化改动，Redis核心在许多方面进行了重构和改进主动碎片整理V2：增强版主动碎片整理，配合Jemalloc版本更新，更快更智能，延时更低HyperLogLog改进：在Redis5.0中，HyperLogLog算法得到改进，优化了计数统计时的内存使用效率，7更加优秀更好的内存统计报告</td></tr></tbody></table><p>Redis 命令</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis  执行了make install后，redis的课执行文件都会自动复制到 /usr/local/bin 目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redis服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli            redis命令行客户端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">benchmark        redis性能测试工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aof        aof文件修复工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dump    rdb文件检查工具</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="启动redis" tabindex="-1">启动Redis <a class="header-anchor" href="#启动redis" aria-label="Permalink to &quot;启动Redis&quot;">​</a></h2><ol><li><p>启动配置文件</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /myredis/redis7.conf # /myredis/redis7.conf 为配置文件名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>启动</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auth 用户名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>或</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a 用户名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p 端口号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><blockquote><p>不输入 <code>-p 端口号</code> 默认会找 <code>6379</code></p></blockquote><p>停止</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli shutdown</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="redis十大数据类型" tabindex="-1">Redis十大数据类型： <a class="header-anchor" href="#redis十大数据类型" aria-label="Permalink to &quot;Redis十大数据类型：&quot;">​</a></h2><h3 id="字符串-string" tabindex="-1">字符串（String） <a class="header-anchor" href="#字符串-string" aria-label="Permalink to &quot;字符串（String）&quot;">​</a></h3><p><code>String</code>是<code>redis</code>最基本的类型，一个<code>key</code>对应一个<code>value</code></p><p><code>String</code>类型是二进制安全的（支持序列号），意思是<code>redis</code>的<code>String</code>可以包含任何数据，比如<code>jpg</code>图片或者序列号对象</p><p><code>String</code>类型是<code>Redis</code>最基本的数据类型，一个<code>Redis</code>中字符串<code>value</code>最多可以是512MB</p><h4 id="redis键-key" tabindex="-1">Redis键（key） <a class="header-anchor" href="#redis键-key" aria-label="Permalink to &quot;Redis键（key）&quot;">​</a></h4><p><img src="`+C+'" alt=""></p><ol><li><code>keys *</code>：查看当前库所有的key</li><li><code>exists key</code>：判断某个key是否存在</li><li><code>type key</code>：查看你的key是什么类型</li><li><code>del key</code>：删除指定的key数据</li><li><code>unlink key</code>：非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步中操作</li><li><code>ttl key</code>：查看还有多少秒过期，-1表示永不过期，-2表示已过期</li><li><code>expire key 秒钟</code>：为给定的key设置过期时间</li><li><code>move key dbindex【0-15】</code>：将当前数据库的key移动到给定的数据库<code>dbindex【0-15】</code>当中</li><li><code>select dbindex</code>：切换数据库【0-15】，默认为0</li><li><code>dbsize</code>：查看当前数据库key的数量</li><li><code>flushdb</code>：清空当前库</li><li><code>flushall</code>：通杀全部库</li><li><code>help @*</code>：* 表示所有命令，都可以通过help来查看帮助文档</li></ol><blockquote><p>命令不区分大小写，但是名字区分大小写</p></blockquote><h4 id="string-类型的-api" tabindex="-1">String 类型的 API <a class="header-anchor" href="#string-类型的-api" aria-label="Permalink to &quot;String 类型的 API&quot;">​</a></h4><p><img src="'+F+'" alt=""></p><h5 id="set-指令" tabindex="-1">set 指令 <a class="header-anchor" href="#set-指令" aria-label="Permalink to &quot;set 指令&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key value [NX|XX] [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [EX seconds|PX milliseconds|EXAT unix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seconds|PXAT unix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">milliseconds|KEEPTTL]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+x+`" alt="image-20250406163641212"></p><ol><li><code>set key value [ex seconds]</code> ：设置带有过期时间的键值对 单位：秒,效果等同于<code>setex key seconds value</code>，成功返回“OK”，如果对在有效时间内存在的键值对重新使用该命令，则value会被覆盖，有效时间也会被覆盖，并重新开始计时。</li><li><code>set key value [px milliseconds] </code>：设置带有过期时间的键值对 单位：毫秒,效果等同于<code>psetex key milliseconds value</code>，成功返回“OK”。如果对在有效时间内存在的键值对重新使用该命令，则value会被覆盖，有效时间也会被覆盖，并重新开始计时。</li><li><code>set key value nx</code>： 设置key-value的键值对，如果之前该键key不存在，则设置执行操作，返回值“OK”,如果之前键值对存在，则不会执行操作，返回“（nil）”，效果等同于<code>setnx key value</code>，但是后者成功返回值1，失败返回值0。</li><li><code>set key value xx</code>： 设置key-value的键值对,只有之前该键值key对已经存在的时候才会执行操作（value会被覆盖），返回“OK”，若之前不存在则不会执行，返回“nil”。</li></ol><h5 id="同时设置-获取多个键值" tabindex="-1">同时设置/获取多个键值 <a class="header-anchor" href="#同时设置-获取多个键值" aria-label="Permalink to &quot;同时设置/获取多个键值&quot;">​</a></h5><p>设置多个值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mset k1 v1 k2 v2 .... #输出 v1 v2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>msetnx</code>：如果不存在创建成功</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msetnx k1 v1 k2 v2 ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>假如k1已经存在，k4不存在，则都不执行成功</p></blockquote><p>获取多个值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mget k1 k2 ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>mget</code>：都存在才会执行成功</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mget k1 k2 k3 k4 k5 ....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="获取指定区间范围内的值" tabindex="-1">获取指定区间范围内的值 <a class="header-anchor" href="#获取指定区间范围内的值" aria-label="Permalink to &quot;获取指定区间范围内的值&quot;">​</a></h5><p><code>getrange</code>：获取指定区间的值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getrange k1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 获取k1的 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 5是区间的范围，默认从0开始</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>setrange</code>：设置指定区间的值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setrange k1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxxx #设置k1从3往后的值为xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="数值的增减" tabindex="-1">数值的增减 <a class="header-anchor" href="#数值的增减" aria-label="Permalink to &quot;数值的增减&quot;">​</a></h5><blockquote><p>注意：一定要是数字才能进行加减</p></blockquote><h6 id="递增数字" tabindex="-1">递增数字 <a class="header-anchor" href="#递增数字" aria-label="Permalink to &quot;递增数字&quot;">​</a></h6><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">incr key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h6 id="增加指定的整数" tabindex="-1">增加指定的整数 <a class="header-anchor" href="#增加指定的整数" aria-label="Permalink to &quot;增加指定的整数&quot;">​</a></h6><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">incrby key x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key: 代表变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x：代表增加的数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h6 id="递减数值" tabindex="-1">递减数值 <a class="header-anchor" href="#递减数值" aria-label="Permalink to &quot;递减数值&quot;">​</a></h6><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decr key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h6 id="减少指定的整数" tabindex="-1">减少指定的整数 <a class="header-anchor" href="#减少指定的整数" aria-label="Permalink to &quot;减少指定的整数&quot;">​</a></h6><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decrby key x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：代表变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x：代表递减的数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="获取字符串的长度" tabindex="-1">获取字符串的长度 <a class="header-anchor" href="#获取字符串的长度" aria-label="Permalink to &quot;获取字符串的长度&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strlen key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：表示变量名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="字符串长度和内容追加" tabindex="-1">字符串长度和内容追加 <a class="header-anchor" href="#字符串长度和内容追加" aria-label="Permalink to &quot;字符串长度和内容追加&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">append key value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：表示变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value：表示要增加的字符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-label="Permalink to &quot;分布式锁&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setnx key value # 如果不存在把变量和值加上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value：值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expire)键秒值/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setnx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exist)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>set key vlaue 【ex seconds】【px milliseconds】 【nx|xx】</code></p><p><code>ex：key在多少秒后过期</code><code>px：key在多少毫秒之后过期</code><code>nx：当key不存在的时候，才创建key，效果等同于setnx</code><code>xx：当key存在的时候，覆盖key</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setex k1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">k1：表示变量名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：表示过期事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value：表示变量名的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>setnx</code>：只有在key不存在设置key值</p><h6 id="getset-先get在set-先获取值-在设置值" tabindex="-1">getset(先get在set)先获取值，在设置值 <a class="header-anchor" href="#getset-先get在set-先获取值-在设置值" aria-label="Permalink to &quot;getset(先get在set)先获取值，在设置值&quot;">​</a></h6><p>getset：将给定key的值设为value，并返回key的旧值（old value）。简单一句话，先get然后立即set</p><h3 id="列表-list" tabindex="-1">列表（List） <a class="header-anchor" href="#列表-list" aria-label="Permalink to &quot;列表（List）&quot;">​</a></h3><blockquote><p>特点：单key多value</p></blockquote><p><code>Redis</code>列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个双端链表，最多可以包含 2³²-1 个元素（4294967295，每个列表超过40亿个元素）,主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right都可以插入添加：</p><p>如果键不存在，创建新的链表</p><p>如果键已存在，新增内容</p><p>如果值全移除，对应的键也就消失了。</p><blockquote><p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</p></blockquote><p><img src="`+_+'" alt=""></p><p><img src="'+f+'" alt=""></p><h4 id="常用操作命令-l是从左到右-r是从右到左" tabindex="-1">常用操作命令(L是从左到右，R是从右到左) <a class="header-anchor" href="#常用操作命令-l是从左到右-r是从右到左" aria-label="Permalink to &quot;常用操作命令(L是从左到右，R是从右到左)&quot;">​</a></h4><ol><li><code>lpop key count</code>：移除并获取到第count个元素</li><li><code>lpush key value 【value2】</code>：将一个或多个值插入到列表头部</li><li><code>lpushx key value</code>：将一个或多个值插入到已存在的列表头部</li><li><code>lrange key start stop</code>：获取列表指定范围内的元素，start是开始，stop结束</li><li><code>lrem key count value</code>：移除列表重复的元素，count移除几个重复的元素，value元素值</li><li><code>lset key index value</code>：通过索引设置列表元素的值，index索引，value要设定的值</li><li><code>ltrim key start stop</code>：截取指定索引区间的元素，格式是 ltrim list的key 起始索引，结束索引</li><li><code>rpop key count</code>：移除并获取列表最后count个元素</li><li><code>rpoplpush source destination</code>：移除列表的最后一个元素，并将该元素添加到另一个列表并返回，就是将source的头一个元素，给destination的尾元素</li><li><code>rpush key value [value2]</code>：在列表中添加一个或多个值</li><li><code>rpushx key value</code>：为已存在的列表添加值</li><li><code>llen key</code>：获取列表中元素的个数</li><li><code>lindex key index</code>：按照索引下标获得元素（从上到下），key表示变量名，index表示索引</li><li><code>linsert key before/after oldValue newValue</code>：已有值插入的新值，key变量名，before/after 前或后，oldValue：key的已有值，newValue要插入的值</li></ol><p><code>rpush/lpush/lrange</code></p><p><img src="'+B+'" alt="image-20250406172123946"></p><p><code>rpop/lpop</code></p><p><img src="'+I+'" alt="image-20250406172356511"></p><p><code>lrem/lset</code></p><p><img src="'+w+'" alt="image-20250406172732940"></p><p><code>ltrim</code></p><p><img src="'+q+'" alt="image-20250406173052157"></p><p><code>rpoplpush</code></p><p><img src="'+D+'" alt="image-20250406173317366"></p><p><code>llen/lindex</code></p><p><img src="'+R+'" alt="image-20250406173508097"></p><p><code>linsert</code></p><p><img src="'+A+'" alt="image-20250406173742983"></p><h3 id="哈希表-hash" tabindex="-1">哈希表（Hash） <a class="header-anchor" href="#哈希表-hash" aria-label="Permalink to &quot;哈希表（Hash）&quot;">​</a></h3><p>特点：KV模式不变，但V是一个键值对</p><p><code>Redis hash</code>是一个<code>String</code>类型的<code>field</code>（字段）和<code>value</code>（值）的映射表，hash特别适合用于存储对象。</p><p><code>Redis</code>中每个<code>hash</code>可以存储 键值对（40多亿）</p><h4 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h4><p><img src="'+P+'" alt=""></p><p><code>hset key filed value</code>：设置值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hset user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name z3 age </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hget key filed value</code> ：获取值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hget user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+z+'" alt="image-20250406175251833"></p><p><strong><code>hmset/hmget</code>可以进行批处理</strong></p><p><code>hmset key filed value</code>：设置值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hmest user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name li4 age </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hmget key filed value</code>：获取值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hmget user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id name age</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+S+'" alt="image-20250406175459761"></p><p><code>hgetall key</code>：遍历key的所有属性和值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hgetall user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hdel key filed value</code>：删除指定的元素</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hdel user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+L+'" alt="image-20250406175551830"></p><p><code>hlen key</code>：获取key的长度</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hlen user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hexists key</code>：在key里面的某个值的key</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hexists user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+O+'" alt="image-20250406175725012"></p><p><code>hkeys key</code>：获取key里面的属性</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hkeys hash1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hvals key</code>：获取key里面的所有value值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hvals hash2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hincrby key filed value</code>：对某个整数的值加value</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hincrby user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+H+'" alt="image-20250406175903212"></p><p><code>hincrbyfloat key filed value</code>：对某个浮点数的值加value</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hincrbyfloat user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hsetnx key fuked value</code>：不存在赋值成功/新建成功，存在了无效</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hsetnx user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email zzssww@qq.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+G+'" alt="image-20250406180220994"></p><h3 id="集合-set" tabindex="-1">集合（Set） <a class="header-anchor" href="#集合-set" aria-label="Permalink to &quot;集合（Set）&quot;">​</a></h3><p>特点：单值多value，且无重复</p><p><code>Redis</code>的<code>Set</code>是<code>String</code>类型的无序集合，集合成员是唯一的，这就意味着不能出现重复的数据，集合对象的编码可以是 <code>intset</code> 或者 <code>hashtable</code></p><p><code>Redis</code> 中 <code>Set</code>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1) 。</p><p>集合中最大的成员数 2³²-1 (4294967295，每个集合可存储40多亿个成员)</p><p><code>sadd key member[member ...]</code>：添加元素，自动去重</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sadd set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>smembers key</code>：遍历集合中的所有元素</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">smembers set1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>sismember key member</code>：判断member属性值是否在集合中</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sismember set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+M+'" alt="image-20250409154617663"></p><p><code>srem key member[member ...]</code>：删除member元素</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srem set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>scard key</code>：获取集合里面的元素个数</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scard set1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>srandmember key [数字]</code>：从集合中随机展现设置的数字个数元素，元素不删除</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srandomember set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 从set1集合展现1个元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+T+'" alt="image-20250409154749391"></p><p><code>spop key [数字]</code>：从集合中随机弹出一个元素，出一个删一个</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spop set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #随机弹出一个元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>smove key1 key2 member</code>：在key1里已存在的某个值，将key1里已存在的某个值赋值给key2集合运算</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">smove set1 set2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #将set1中的7移动到set2里面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+X+`" alt="image-20250409154951035"></p><h4 id="集合运算" tabindex="-1">集合运算 <a class="header-anchor" href="#集合运算" aria-label="Permalink to &quot;集合运算&quot;">​</a></h4><p>A、B 两个集合，A的元素是abc12，B的元素是123ax</p><ol><li><p>集合的差集运算 A-B</p><p>属于A但不属于B的元素构成的集合</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdiff key [key...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdiff set2 set1 # set2 和 set1 的差集</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+N+`" alt="image-20250409155136630"></p></li><li><p>集合的并集运算 A ∪ B</p><p>属于A或者属于B的元素合并后的集合</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sunion key [key...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sunion set1 set2 # set1 和 set2 的并集</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>集合的交集运算 A ∩ B</p><p>属于 A 同时也属于 B 的共同拥有的元素构成的集合</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sinter key [key...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sinter set1 set2 # set1 和 set2 的交集</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+U+'" alt="image-20250409155245778"></p></li></ol><p><code>sintercard numkeys key [key...][limit limit]</code></p><p>redis7新命令</p><p>它不返回结果集，而只返回结果的基数（去重以后的数字个数）。返回由所有给定集合的交集产生的集合的基数（返回重复的个数）</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sinetercard </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set1 set2 limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 2个key set1 和 set2 只显示 1个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+V+`" alt="image-20250409155446974"></p><h3 id="有序集合-zset-sorted-set" tabindex="-1">有序集合（ZSet（sorted set）） <a class="header-anchor" href="#有序集合-zset-sorted-set" aria-label="Permalink to &quot;有序集合（ZSet（sorted set））&quot;">​</a></h3><p><code>zset</code>(<code>sorted set</code>：有序集合)</p><p>在 set 基础上，每个val值前加一个score分数值。之前set是k1 v1 v2 v3</p><p>现在zset是k1 score v1 score2 v2</p><p><code>Redis zset</code>和<code>set</code>一样也是<code>String</code>类型元素的集合，且不允许重复的成员。</p><blockquote><p>不同的是每个元素都会关联一个<code>double</code>类型的分数，<code>redis</code>正是通过分数来为集合中的成员进行从小到大的排序。</p></blockquote><blockquote><p><code>zset</code>的成员是唯一的，但分数<code>(score)</code>却可以重复</p></blockquote><blockquote><p><code>zset</code>集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是O（1）。集合中最大的成员数为 2³²-1</p></blockquote><p>向有序集合中加入一个元素和该元素的分数</p><p>添加元素：</p><p><code>zadd key score member [score member...]</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zadd zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v3 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素：</p><p><code>zrange key start stop [withscores]</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 遍历所有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 遍历所有包括分数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>逆序按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素</p><p><code>zrevrange</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrevrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 逆序遍历包括分数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrevrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 逆序遍历所有</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+K+`" alt="image-20250409170419443"></p><p>获取指定分数范围的元素：</p><p><code>zrangebyscore key min max [withscores] [limit offset count]</code></p><p>withscores：包括变量名</p><p>(：不包含</p><p>limit：作用是返回限制，limit开始下标步，多少步</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 按照分数找变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 按照分数遍历变量和值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 （</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 按分数遍历变量和值，不包含60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 （</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 按照分数遍历变量和值，不包含60，返回一个键值对</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+$+'" alt="image-20250409171225792"></p><p>获取元素的分数：</p><p><code>zscore key member</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zscore zset1 v1 # 获取 v1 元素的分数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取集合中元素的数量：</p><p><code>zcard key</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zcard zset1 # 获取 zset1 的集合数量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>某score下对应的value值，作用是删除元素</p><p><code>zrem key</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrem zset1 v5 # 删除 v5 元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Z+'" alt="image-20250409171654381"></p><p>增加某个元素的分数：</p><p><code>zincrby key incrmenet member</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zincrby zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1 # 给v1的值增加3分</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获得指定分数范围内的元素个数：</p><p><code>zcount key min max</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zcount zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 获取 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 到 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 分数的值有多少个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从键名列表中的第一个非空排序集中弹出一个或多个元素，它们是成员分数对</p><p><code>zmpop</code> redis 7.0 新命令</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zmpop </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zset min count </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 把最小的键值对给弹出，显示弹出的键值对</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获得下标值：</p><p><code>zrange key values</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 获得 zset的变量名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>逆序获得下标值</p><p><code>zrevrank key values</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrevrank zset v1 # 获得逆序的下标值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+j+'" alt="image-20250409172544136"></p><h3 id="位图-bitmap" tabindex="-1">位图（bitmap） <a class="header-anchor" href="#位图-bitmap" aria-label="Permalink to &quot;位图（bitmap）&quot;">​</a></h3><p><code>Bit arrays （or simply bitmaps，我们可以称之为位图）</code></p><img src="'+J+'" style="zoom:60%;"><p>一个字节(一个byte)=8位</p><p>上图由许许多多的小格子组成，每一个格子里面只能放1或者0，用它来判断Y/N状态，说的专业点，就是每一个小格子就是一个个bit</p><p>由0和1状态表现的二进制位的bit数组</p><p>说明：用String类型作为底层数据结构实现的一种统计二值状态的数据类型</p><p>位图本质是数组，它是基于String数据类型的按位的操作。该数组由多个二进制位组成，每个二进制位都对应一个偏移量(我们称之为一个索引)。</p><p>Bitmap支持的最大位数是2^32位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息(2^32 = 4294967296)</p><p><code>setbit</code>设置bit：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setbit key offset value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Q+'" alt="image-20250409180618769"></p><p><img src="'+W+'" alt="image-20250409180842482"></p><p><code>gitbit</code>获取某个bit的值：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getbit key offset</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Y+'" alt="image-20250409180948310"></p><p><code>strlen</code>统计字节占用多少：</p><p>不是字符串长度而是占据几个字节，超过8位后自己按照8位一组一byte再扩容</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strlen key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+ss+'" alt="image-20250409181059541"></p><p><code>bitcount</code>全部键里面含有多少1：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitcount key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+is+'" alt="image-20250409181139433"></p><p><code>bitop</code>：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destkey key key # 两个key合并放到destkey里面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+es+'" alt="image-20250409181646736"></p><p><img src="'+as+'" alt="image-20250409181818185"></p><h3 id="基数统计-hyperloglog-属于string-类型" tabindex="-1">基数统计（HyperLogLog）属于String 类型 <a class="header-anchor" href="#基数统计-hyperloglog-属于string-类型" aria-label="Permalink to &quot;基数统计（HyperLogLog）属于String 类型&quot;">​</a></h3><p><img src="'+ns+'" alt="image-20250409182113564"></p><p><code>HyperLogLog</code>是用来做**<u>基数统计</u>**的算法，<code>HyperLogLog</code>的优点是，在输入元素的数量或者体积非常大时，计算基数所需的空间总是固定且很小的。</p><p>在<code>Redis</code>里面，每个<code>HyperLogLog</code>键只需要花费 12KB 内存，就可以计算接近 2^64 个不同元素的基数，这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为<code>HyperLogLog</code>只会根据输入元素来计算基数，而不会存储元素本身，所以<code>HyperLogLog</code>不能像集合那样，返回输入的各个元素。</p><p><code>PFADD</code>将所有元素参数添加到 HyperLogLog 数据结构中：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PFADD key element [element ...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>PFCOUNT</code>返回给定 HyperLogLog 的基数估算值：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PFCOUNT key [key ...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>PFMERGE</code>将多个 HyperLogLog 合并为一个 HyperLogLog ，合并后的 HyperLogLog 的基数估算值是通过对所有 给定 HyperLogLog 进行并集计算得出的：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PFMERGE destkey sourcekey [sourcekey ...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>演示：</p><p><img src="'+ps+'" alt="image-20250410160818942"></p><h3 id="地理空间-geo" tabindex="-1">地理空间（GEO） <a class="header-anchor" href="#地理空间-geo" aria-label="Permalink to &quot;地理空间（GEO）&quot;">​</a></h3><p>移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的？</p><p>地球上的地理位置是使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。</p><p>例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，</p><p>然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆</p><p>使用如下SQL即可：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taxi from position where x0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是这样会有什么问题呢？</p><p>1.查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的</p><p>2.这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。</p><p>3.精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差</p><p><code>Redis GEO</code>主要用于存储地理位置信息，并对于存储的信息进行操作，包括：</p><ol><li>添加地理位置的坐标</li><li>获取地理位置的坐标</li><li>计算两个位置之间的距离</li><li>根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</li></ol><p><img src="'+ts+'" alt="image-20250410162957806"></p><p>命令：</p><p><strong>GEOADD</strong>：添加地理位置</p><p><img src="'+ls+'" alt="image-20250410163315401"></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEOADD city </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">116.403963</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 39.915119</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;天安门&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 116.403414</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 39.924091</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;故宫&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 116.024067</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40.362639</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;长城&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>GEOPOS</strong>：获取指定的经纬度</p><p><img src="'+ds+'" alt="image-20250410163507481"></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEOPOS city 天安门 故宫 长城</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+rs+'" alt="image-20250410163723293"></p><p><strong>GEOHASN</strong>：使用hash值来保存地理位置的坐标</p><p><img src="'+os+'" alt="image-20250410163750436"></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEOHASH city 天安门 故宫 长城</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>GEOLIST</strong>：返回两个给定位置之间的距离</p><p><img src="'+cs+'" alt="image-20250410164012610"></p><p>后面参数是距离单位：</p><ol><li>m 米</li><li>km 千米</li><li>ft 英尺</li><li>mi 英里</li></ol><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEODIST city 天安门 故宫 km</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+hs+`" alt="image-20250410164156033"></p><p><strong>GEORADIUS(以半径为中心)</strong>： 以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEORADIUS city </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">116.418017</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 39.914402</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km withdist withcoord count </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withhash desc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEORADIUS city </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">116.418017</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 39.914402</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km withdist withcoord withhash count </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> desc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</li><li>WITHCOORD: 将位置元素的经度和维度也一并返回。</li><li>WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大COUNT 限定返回的记录数。</li></ol><p><img src="`+ks+'" alt="image-20250410164811698"></p><p><strong>GEORADIUSBYMEMBER</strong>：找出位于指定范围内的元素，中心点是由给定的位置元素决定的</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GEORADIUSBYMEMBER  city 天安门 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> km withdist withcoord count </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withhash # 找出以天安门为中心，附近10km的地方</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+ms+'" alt="image-20250410165223579"></p><h3 id="流-stream" tabindex="-1">流（Stream) <a class="header-anchor" href="#流-stream" aria-label="Permalink to &quot;流（Stream)&quot;">​</a></h3><p><code>Redis Stream</code>是 <code>Redis 5.0</code>版本新增加的数据结构。</p><p><code>Redis Stream</code>主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 （pub/sub）来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开，Redis 宕机等，消息就会被丢弃。</p><p>简单来说发布订阅（pub/sub）可以分发消息，但无法记录历史消息。</p><p>而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。</p><p>Redis版的MQ消息中间件+阻塞队列</p><p><strong>能干嘛？</strong></p><p>实现消息队列，它支持消息的持久化，支持自动生成全局唯一ID、支持ack确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠</p><h4 id="底层结构和原理说明" tabindex="-1">底层结构和原理说明 <a class="header-anchor" href="#底层结构和原理说明" aria-label="Permalink to &quot;底层结构和原理说明&quot;">​</a></h4><p><img src="'+gs+'" alt="image-20250410172029685"></p><table tabindex="0"><thead><tr><th>1</th><th>Message Content</th><th>消息内容</th></tr></thead><tbody><tr><td>2</td><td>Consumer group</td><td>消费组，通过XGROUP CREATE 命令创建，同一个消费组可以有多个消费者</td></tr><tr><td>3</td><td>Last_delivered_id</td><td>游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。</td></tr><tr><td>4</td><td>Consumer</td><td>消费者，消费组中的消费者</td></tr><tr><td>5</td><td>Pending_ids</td><td>消费者会有一个状态变量，用于记录被当前消费已读取但未ack的消息Id，如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在Redis官方被称之为 PEL(Pending Entries List)，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理</td></tr></tbody></table><h4 id="基本命令理论简介" tabindex="-1">基本命令理论简介 <a class="header-anchor" href="#基本命令理论简介" aria-label="Permalink to &quot;基本命令理论简介&quot;">​</a></h4><p><strong>队列相关指令</strong></p><p><img src="'+us+'" alt="image-20250410172141313"></p><p><strong>消费组相关指令</strong></p><p><img src="'+bs+'" alt="image-20250410172214112"></p><p><strong>四个特殊符号</strong></p>',321)),i("ol",null,[s[3]||(s[3]=i("li",null,"-：最小可能出现的id",-1)),s[4]||(s[4]=i("li",null,"+：最大可能出现的id",-1)),i("li",null,[i("mjx-container",$s,[(p(),a("svg",Zs,s[0]||(s[0]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("text",{"data-variant":"italic",transform:"scale(1,-1)","font-size":"884px","font-family":"serif","font-style":"italic"},"：")])])],-1)]))),s[1]||(s[1]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"：")])],-1))]),s[2]||(s[2]=e("表示只消费新的消息，当前流中最大的id，可用于将要到来的信息"))]),s[5]||(s[5]=i("li",null,[e(">：用于"),i("code",null,"XREADGROUP"),e("命令，表现迄今还没有发送组中使用者的消息，会更新消费组的最后ID")],-1)),s[6]||(s[6]=i("li",null,[e("*：用于"),i("code",null,"XADD"),e("命令中，让系统自动生成id")],-1))]),s[8]||(s[8]=n('<h4 id="基本命令实操" tabindex="-1">基本命令实操 <a class="header-anchor" href="#基本命令实操" aria-label="Permalink to &quot;基本命令实操&quot;">​</a></h4><h5 id="队列相关指令" tabindex="-1">队列相关指令 <a class="header-anchor" href="#队列相关指令" aria-label="Permalink to &quot;队列相关指令&quot;">​</a></h5><p><strong>XADD</strong>：添加消息队列到末尾</p><p>XADD 用于向Stream 队列中添加消息，如果指定的Stream 队列不存在，则该命令执行时会新建一个Stream 队列</p><p>* 号表示服务器自动生成 MessageID(类似mysql里面主键auto_increment)，后面顺序跟着一堆 业务key/value</p><p>信息条目指的是序列号，在相同的毫秒下序列号从0开始递增，序列号是64位长度，理论上在同一毫秒内生成的数据量无法到达这个级别，因此不用担心序列号会不够用。millisecondsTime指的是Redis节点服务器的本地时间，如果存在当前的毫秒时间戳比以前已经存在的数据的时间戳小的话（本地时间钟后跳），那么系统将会采用以前相同的毫秒创建新的ID，也即redis 在增加信息条目时会检查当前 id 与上一条目的 id， 自动纠正错误的情况，一定要保证后面的 id 比前面大，一个流中信息条目的ID必须是单调增的，这是流的基础。 <strong>客户端显示传入规则:</strong></p><p>Redis对于ID有强制要求，格式必须是时间戳-自增Id这样的方式，且后续ID不能小于前一个ID Stream的消息内容，也就是图中的Message Content它的结构类似Hash结构，以key-value的形式存在。</p><p><img src="'+Es+'" alt="image-20250410174747266"></p><blockquote><p>注意：</p><ol><li>消息ID必须要比上个ID大</li><li>默认用型号表示自动生成规矩</li><li>*：用于XDD命令中，让系统自动生成ID</li></ol></blockquote><p><strong>xrange</strong>：用于获取消息列表（可以指定范围），忽略删除的消息</p><ol><li>start 表示开始值，- 代表最小值</li><li>end 表示结束值，+ 代表最大值</li><li>count 表示最多获取多少个值</li></ol><p><img src="'+ys+'" alt="image-20250410175418702"></p><p><strong>xrevrange</strong>：与<code>xrange</code>的区别在于，获取消息列表元素的方向是相反的，end在前，start在后</p><p><img src="'+vs+'" alt="image-20250410175614939"></p><p><strong>xdel</strong>：删除一条消息</p><p><img src="'+Cs+'" alt="image-20250410175725471"></p><p><strong>xlen</strong>：用于获取stream队列的消息的长度</p><p><img src="'+Fs+'" alt="image-20250410175746217"></p><p><strong>xtrim</strong>：用于对stream的长度进行截取，如超长会进行截取</p><ol><li><code>maxlen</code>：允许的最大长度，对流进行修剪限制长度</li><li><code>minid</code>：允许的最小id，从某id值开始比该id值小的将会被抛弃</li></ol><p><img src="'+xs+'" alt="image-20250410180149257"></p><p><img src="'+_s+'" alt="image-20250410181006834"></p><p><strong>xread</strong>：用于获取消息（阻塞/非阻塞），只会返回大于指定ID的消息</p><p><img src="'+fs+'" alt="image-20250410173811155"></p><ol><li><p>非阻塞</p><ol><li>$代表特殊ID，表示以当前Stream已经存储的最大的ID作为最后一个ID，当前Stream中不存在大于当前最大ID的消息，因此此时返回nil</li><li>0-0代表从最小的ID开始获取Stream中的消息，当不指定count，将会返回Stream中的所有消息，注意也可以使用0（00/000也都是可以的……）</li></ol><p><img src="'+Bs+'" alt="image-20250410181716134"></p></li><li><p>阻塞</p></li></ol><p><img src="'+Is+'" alt="image-20250410182230965"></p><p>总结：</p><p>​ Stream的基础方法，使用xadd存入消息和xread循环阻塞读取消息的方式可以实现简易版的消息队列，交互流程如下</p><p><img src="'+ws+'" alt="image-20250410173936545"></p><p>对比list结构</p><p><img src="'+qs+'" alt="image-20250410173951159"></p><h5 id="消费组相关指令" tabindex="-1">消费组相关指令 <a class="header-anchor" href="#消费组相关指令" aria-label="Permalink to &quot;消费组相关指令&quot;">​</a></h5><p><code>xgroup create</code>：用于创建消费组</p><p><img src="'+Ds+'" alt="image-20250410184052182"></p><ol><li>$表示从Stream尾部开始消费</li><li>0表示从Stream头部开始消费</li><li>创建消费者组的时候必须指定 ID, ID 为 0 表示从头开始消费，为 $ 表示只消费新的消息，队尾新来</li></ol><p><code>xreadgroup group</code></p><ol><li><p>&quot;&gt;&quot;，表示从第一条尚未被消费的消息开始读取</p></li><li><p>消费组group内的消费组consumer从mystream消息队列中读取所有消息</p></li><li><p>但是，不同消费组的消费者可以消费同一条消息</p><p><img src="'+Rs+'" alt="image-20250410184654314"></p></li><li><p>消费组的目的？</p><p>让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的</p></li></ol><p><img src="'+As+'" alt="image-20250410185005071"></p><table tabindex="0"><thead><tr><th>1问题</th><th>基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息？</th></tr></thead><tbody><tr><td>2</td><td>Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息保底措施，直到消费者使用 XACK 命令通知 Streams“消息已经处理完成”。</td></tr><tr><td>3</td><td>消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成</td></tr></tbody></table><p><img src="'+Ps+'" alt="image-20250410183229300"></p><p><code>xpending</code>：</p><ol><li>查询每个消费组内所有消费者&quot;已读取，但尚未确认&quot;的消息</li><li>查看某个消费者具体读取了哪些数据</li></ol><p><img src="'+zs+'" alt="image-20250410185349874"></p><p><code>xack</code>：向消息队列确认消息处理已完成</p><p><img src="'+Ss+'" alt="image-20250411220813033"></p><p><code>xinfo</code>：用于打印 stream\\consumer\\group\\的详细信息</p><p><img src="'+Ls+'" alt="image-20250411220856782"></p><h3 id="位域-bitfield" tabindex="-1">位域（bitfield） <a class="header-anchor" href="#位域-bitfield" aria-label="Permalink to &quot;位域（bitfield）&quot;">​</a></h3><p>通过 <code>bitfield</code>命令可以一次性操作多个比特位域（指的是连续的多个比特位），它会执行一系列操作并返回一个响应数组，这个数组中的元素对应参数列表中的相应操作的执行结果。</p><p>说白了就是通过<code>bitfield</code>命令我们可以一次性对比多个比特位域进行操作。</p><p><img src="'+Os+'" alt="image-20250411223808858"></p><p>能干嘛？</p><ol><li>位域修改</li><li>溢出控制</li></ol><p><img src="'+Hs+'" alt="image-20250411221002550"></p><p><a href="https://ascii.org.cn/" target="_blank" rel="noreferrer">ascii码 | ascii码对照表</a></p><p>返回指定位域：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitfield key [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type offset]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Gs+'" alt="image-20250411221551010"></p><ol><li>i：有符号数</li><li>u：无符号数</li><li>i8：读取8位</li></ol><p>hello 等价于 01101000 01100101 01101100 01101100 01101111</p><p><img src="'+Ms+'" alt="image-20250411221656767"></p><p>设置指定位域并返回它的原值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitfield key [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type offset value]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Ts+'" alt="image-20250411222138274"></p><p>二进制加一，默认情况下，<code>incrby</code> 使用wrap参数：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitfield key [incrby type offset increment]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Xs+'" alt="image-20250411222525532"></p><p>溢出控制<code>overflow[wrap|sat|fail]</code></p><ol><li><p>wrap：使用回绕（wrap around）方法处理有符号数和无符号数的溢出情况</p><p><img src="'+Ns+'" alt="image-20250411223252108"></p></li><li><p>sat：使用饱和计算（saturation arithmetic）方法处理溢出，下溢计算的结果为最小的整数值，而上溢计算的结果为最大的整数值</p><p><img src="'+Us+'" alt="image-20250411223309327"></p></li><li><p>fail：命令将拒绝执行哪些会导致上溢或者下溢情况出现的计算，并向用户返回空值表示计算未被执行</p><p><img src="'+Vs+'" alt="image-20250411223324513"></p></li></ol>',69))])}const ai=t(Ks,[["render",js]]);export{ei as __pageData,ai as default};
