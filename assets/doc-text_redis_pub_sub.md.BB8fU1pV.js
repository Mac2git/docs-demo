import{_ as i,c as e,a2 as a,o as l}from"./chunks/framework.3VuPyQdv.js";const n="/docs-demo/redisImages/image-20250416152204885.png",t="/docs-demo/redisImages/image-20250416152303136.png",p="/docs-demo/redisImages/image-20250416152345866.png",d="/docs-demo/redisImages/image-20250416153326379.png",r="/docs-demo/redisImages/image-20250416153815078.png",c="/docs-demo/redisImages/image-20250416154153634.png",u="/docs-demo/redisImages/image-20250416154647155.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/pub&sub.md","filePath":"doc-text/redis/pub&sub.md","lastUpdated":1744815719000}'),o={name:"doc-text/redis/pub&sub.md"};function m(h,s,b,g,v,k){return l(),e("div",null,s[0]||(s[0]=[a('<h2 id="发布-订阅" tabindex="-1">发布/订阅 <a class="header-anchor" href="#发布-订阅" aria-label="Permalink to &quot;发布/订阅&quot;">​</a></h2><p>是一种消息通信模式：发送者（publish）发送消息，订阅者（subscribe）接受消息，可以实现进程间的消息传递</p><p><code>Redis</code> 可以实现消息中间件 MQ 的功能，通过发布订阅实现消息的引导和分流。<strong>不推荐使用该功能</strong>，专业的事情交给专业的中间件，redis就做好分布式缓存功能</p><p><strong>能干嘛？</strong></p><ul><li><p>redis 客户端可以订阅任意数量的频道，类似我们微信关注多个公众号</p><ul><li><img src="'+n+'" alt="image-20250416152204885"></li><li>当有新的消息通过 publish 命令发送给频道 channel1 时 <ul><li><img src="'+t+'" alt="image-20250416152303136"></li></ul></li></ul><p>总结：</p><p>发布/订阅其实是一个轻量的队列，只不过数据不会被持久化，一般用来处理实时性较高的异步消息</p><p><img src="'+p+'" alt="image-20250416152345866"></p></li></ul><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subscribe channel [channel...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>订阅给定的一个或多个频道的信息</li><li>推荐先执行订阅后再发布，订阅成功之前发布的消息是收不到的</li><li>订阅的客户端每次可以收到一个3个参数的消息 <ul><li>消息的种类</li><li>始发频道的名称</li><li>实际的消息内容 <ul><li><img src="'+d+'" alt="image-20250416153326379"></li></ul></li></ul></li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">publish channel message</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>发布消息到指定的频道</li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">psubscribe pattern[pattern...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>按照模式批量订阅，订阅一个或多个符合给定模式（支持*号？号之类的）频道</p><ul><li><img src="'+r+'" alt="image-20250416153815078"></li></ul></li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pubsub subcommand [argument [argument ...]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>查看订阅与发布系统状态</li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pubsub channels</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>由活跃频道组成的列表</p></li><li><p><img src="'+c+'" alt="image-20250416154153634"></p></li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pubsub numsub [channel [channel...]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>某个频道有几个订阅者</li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pubsub numpay</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>只统计使用 pubscribe 命令执行的，返回客户端订阅的唯一模式的数量</li><li><img src="'+u+'" alt="image-20250416154647155"></li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unsubscribe [channel [channel...]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>取消订阅</li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">punsubscribe [pattern [pattern...]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>退订所有给定模式的频道</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>redis 可以实现消息中间件 MQ 的功能，通过发布订阅实现消息的引导和分流。<strong>不推荐使用该功能，专业的事情交给专业的中间件出来，redis就做好分布式缓存功能</strong></li><li>pub/sub 缺点 <ul><li>发布的消息在 redis 系统中不能持久化，因此，必须先订阅，再等待消息发布。如果先发布了消息，那么该消息由于没有订阅者，消息将被直接丢弃</li><li>消息只管发送对于发布者而言消息是即发即失的，不管接收，也没有 ack 机制，无法保证消息的消费成功。</li><li>以上的缺点导致redis的pub/sub模式就像个小玩具，在生产环境中几乎无用武之地，为此redis 5.0 版本新增了 stream 数据结构，不但支持多播，还支持数据持久化，相比 pub/sub 更加的强大</li></ul></li></ul>',26)]))}const _=i(o,[["render",m]]);export{y as __pageData,_ as default};
