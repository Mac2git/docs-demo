import{_ as e,c as i,a2 as a,o as n}from"./chunks/framework.3VuPyQdv.js";const l="/docs-demo/redisImages/list.png",t="/docs-demo/redisImages/bitmaps.png",b=JSON.parse('{"title":"Redis","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/redis.md","filePath":"doc-text/redis/redis.md","lastUpdated":1743779248000}'),p={name:"doc-text/redis/redis.md"};function d(h,s,r,c,o,k){return n(),i("div",null,s[0]||(s[0]=[a(`<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><h2 id="什么是redis" tabindex="-1">什么是Redis？ <a class="header-anchor" href="#什么是redis" aria-label="Permalink to &quot;什么是Redis？&quot;">​</a></h2><p>Redis 是一个内存数据存储，被数百万开发者用作缓存、向量数据库、文档数据库、流式引擎和消息代理。Redis 具有内置的复制和不同级别的磁盘持久化。它支持复杂的数据类型（例如，字符串、散列、列表、集合、有序集合和 JSON），并为这些数据类型定义了原子操作。</p><p>Redis 通常被称为数据结构服务器。这意味着 Redis 通过一组命令提供对可变数据结构的访问，这些命令通过 TCP 套接字和简单协议使用服务器-客户端模型发送。因此，不同的进程可以以共享的方式查询和修改相同的数据结构。</p><p>Redis 实现的数据结构具有一些特殊的属性：</p><ol><li>Redis 会将其存储在磁盘上，即使它们总是被服务器内存中读取和修改。这意味着 Redis 速度快，但同时也非易失性。</li><li>数据结构的实现强调内存效率，因此 Redis 内部的数据结构可能比使用高级编程语言建模的相同数据结构模型使用更少的内存。</li><li>Redis 提供了一系列数据库中常见的功能，如复制、可调的持久性级别、集群和高度可用性。</li></ol><h2 id="下载redis" tabindex="-1">下载Redis <a class="header-anchor" href="#下载redis" aria-label="Permalink to &quot;下载Redis&quot;">​</a></h2><blockquote><p><strong>命名规则：</strong></p><p>​ 版本号第二位如果是奇数，则为非稳定版本，如2.7、2.9、3.1</p><p>​ 版本号第二位如果是偶数，则为文档版本，如2.6、2.8、3.0、3.2</p><p>​ 当前奇数版本就是下一个稳定版本的开发版本，如2.9版本是3.0版本的开发版本</p></blockquote><p><a href="https://redis.io/downloads/" target="_blank" rel="noreferrer">下载Redis</a></p><h2 id="redis7新特性" tabindex="-1">Redis7新特性 <a class="header-anchor" href="#redis7新特性" aria-label="Permalink to &quot;Redis7新特性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>多AOF文件支持</th><th>7.0 版本中一个比较大的变化就是 aof 文件由一个变成了多个，主要分为两种类型：基本文件(base files)、增量文件(incr files)，请注意这些文件名称是复数形式说明每一类文件不仅仅只有一个。在此之外还引入了一个清单文件(manifest) 用于跟踪文件以及文件的创建和应用顺序（恢复）</th></tr></thead><tbody><tr><td>config命令增强</td><td>对于Config Set 和Get命令，支持在一次调用过程中传递多个配置参数。例如，现在我们可以在执行一次Config Set命令中更改多个参数： config set maxmemory 10000001 maxmemory-clients 50% port 6399</td></tr><tr><td>限制客户端内存使用Client-eviction</td><td>一旦 Redis 连接较多，再加上每个连接的内存占用都比较大的时候， Redis总连接内存占用可能会达到maxmemory的上限，可以增加允许限制所有客户端的总内存使用量配置项，redis.config 中对应的配置项// 两种配置形式：指定内存大小、基于 maxmemory 的百分比。maxmemory-clients 1gmaxmemory-clients 10%</td></tr><tr><td>listpack紧凑列表调整</td><td>listpack 是用来替代 ziplist 的新数据结构，在 7.0 版本已经没有 ziplist 的配置了（6.0版本仅部分数据类型作为过渡阶段在使用）listpack 已经替换了 ziplist 类似 hash-max-ziplist-entries 的配置</td></tr><tr><td>访问安全性增强ACLV2</td><td>在redis.conf配置文件中，protected-mode默认为yes，只有当你希望你的客户端在没有授权的情况下可以连接到Redis server的时候可以将protected-mode设置为no</td></tr><tr><td>Redis Functions</td><td>Redis函数，一种新的通过服务端脚本扩展Redis的方式，函数与数据本身一起存储。简言之，redis自己要去抢夺Lua脚本的饭碗</td></tr><tr><td>RDB保存时间调整</td><td>将持久化文件RDB的保存规则发生了改变，尤其是时间记录频度变化</td></tr><tr><td>命令新增和变动</td><td>Zset (有序集合)增加 ZMPOP、BZMPOP、ZINTERCARD 等命令Set (集合)增加 SINTERCARD 命令LIST (列表)增加 LMPOP、BLMPOP ，从提供的键名列表中的第一个非空列表键中弹出一个或多个元素。</td></tr><tr><td>性能资源利用率、安全、等改进</td><td>自身底层部分优化改动，Redis核心在许多方面进行了重构和改进主动碎片整理V2：增强版主动碎片整理，配合Jemalloc版本更新，更快更智能，延时更低HyperLogLog改进：在Redis5.0中，HyperLogLog算法得到改进，优化了计数统计时的内存使用效率，7更加优秀更好的内存统计报告</td></tr></tbody></table><p>Redis 命令</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis  执行了make install后，redis的课执行文件都会自动复制到 /usr/local/bin 目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redis服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli            redis命令行客户端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">benchmark        redis性能测试工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aof        aof文件修复工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dump    rdb文件检查工具</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="启动redis" tabindex="-1">启动Redis <a class="header-anchor" href="#启动redis" aria-label="Permalink to &quot;启动Redis&quot;">​</a></h2><ol><li><p>启动配置文件</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /myredis/redis7.conf # /myredis/redis7.conf 为配置文件名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>启动</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auth 用户名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>或</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a 用户名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p 端口号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><blockquote><p>不输入 <code>-p 端口号</code> 默认会找 <code>6379</code></p></blockquote><p>停止</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli shutdown</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="redis十大数据类型" tabindex="-1">Redis十大数据类型： <a class="header-anchor" href="#redis十大数据类型" aria-label="Permalink to &quot;Redis十大数据类型：&quot;">​</a></h2><h2 id="字符串-string" tabindex="-1">字符串（String） <a class="header-anchor" href="#字符串-string" aria-label="Permalink to &quot;字符串（String）&quot;">​</a></h2><p><code>String</code>是<code>redis</code>最基本的类型，一个<code>key</code>对应一个<code>value</code></p><p><code>String</code>类型是二进制安全的（支持序列号），意思是<code>redis</code>的<code>String</code>可以包含任何数据，比如<code>jpg</code>图片或者序列号对象</p><p><code>String</code>类型是<code>Redis</code>最基本的数据类型，一个<code>Redis</code>中字符串<code>value</code>最多可以是512M</p><h3 id="常用的操作命令" tabindex="-1">常用的操作命令 <a class="header-anchor" href="#常用的操作命令" aria-label="Permalink to &quot;常用的操作命令&quot;">​</a></h3><ol><li><code>keys *</code>：查看当前库所有的key</li><li><code>exists key</code>：判断某个key是否存在</li><li><code>type key</code>：查看你的key是什么类型</li><li><code>del key</code>：删除指定的key数据</li><li><code>unlink key</code>：非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步中操作</li><li><code>ttl key</code>：查看还有多少秒过期，-1表示永不过期，-2表示已过期</li><li><code>expire key 秒钟</code>：为给定的key设置过期时间</li><li><code>move key dbindex【0-15】</code>：将当前数据库的key移动到给定的数据库<code>dbindex【0-15】</code>当中</li><li><code>select dbindex</code>：切换数据库【0-15】，默认为0</li><li><code>dbsize</code>：查看当前数据库key的数量</li><li><code>flushdb</code>：清空当前库</li><li><code>flushall</code>：通杀全部库</li><li><code>help @*</code>：* 表示所有命令，都可以通过help来查看帮助文档</li></ol><blockquote><p>命令不区分大小写，但是名字区分大小写</p></blockquote><h3 id="string-类型的-api" tabindex="-1">String 类型的 API <a class="header-anchor" href="#string-类型的-api" aria-label="Permalink to &quot;String 类型的 API&quot;">​</a></h3><h4 id="set-指令" tabindex="-1">set 指令 <a class="header-anchor" href="#set-指令" aria-label="Permalink to &quot;set 指令&quot;">​</a></h4><p><code>set key value [ex seconds]</code> ：设置带有过期时间的键值对 单位：秒,效果等同于<code>setex key seconds value</code>，成功返回“OK”，如果对在有效时间内存在的键值对重新使用该命令，则value会被覆盖，有效时间也会被覆盖，并重新开始计时。</p><p><code>set key value [px milliseconds] </code>：设置带有过期时间的键值对 单位：毫秒,效果等同于<code>psetex key milliseconds value</code>，成功返回“OK”。如果对在有效时间内存在的键值对重新使用该命令，则value会被覆盖，有效时间也会被覆盖，并重新开始计时。</p><p><code>set key value nx</code>： 设置key-value的键值对，如果之前该键key不存在，则设置执行</p><p>操作，返回值“OK”,如果之前键值对存在，则不会执行操作，返回“（nil）”，效果等同于<code>setnx key value</code>，但是后者成功返回值1，失败返回值0。</p><p><code>set key value xx</code>： 设置key-value的键值对,只有之前该键值key对已经存在的时候才会执行操作（value会被覆盖），返回“OK”，若之前不存在则不会执行，返回“nil”。</p><h4 id="同时设置-获取多个键值" tabindex="-1">同时设置/获取多个键值 <a class="header-anchor" href="#同时设置-获取多个键值" aria-label="Permalink to &quot;同时设置/获取多个键值&quot;">​</a></h4><p>设置多个值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mset k1 v1 k2 v2 .... #输出 v1 v2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>msetnx</code>：如果不存在创建成功</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msetnx k1 v1 k2 v2 ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>假如k1已经存在，k4不存在，则都不执行成功</p></blockquote><p>获取多个值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mget k1 k2 ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>mget</code>：都存在才会执行成功</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mget k1 k2 k3 k4 k5 ....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="获取指定区间范围内的值" tabindex="-1">获取指定区间范围内的值 <a class="header-anchor" href="#获取指定区间范围内的值" aria-label="Permalink to &quot;获取指定区间范围内的值&quot;">​</a></h4><p><code>getrange</code>：获取指定区间的值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getrange k1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 获取k1的 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 5是区间的范围，默认从0开始</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>setrange</code>：设置指定区间的值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setrange k1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxxx #设置k1从3往后的值为xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="数值的增减" tabindex="-1">数值的增减 <a class="header-anchor" href="#数值的增减" aria-label="Permalink to &quot;数值的增减&quot;">​</a></h4><blockquote><p>注意：一定要是数字才能进行加减</p></blockquote><h5 id="递增数字" tabindex="-1">递增数字 <a class="header-anchor" href="#递增数字" aria-label="Permalink to &quot;递增数字&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">incr key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="增加指定的整数" tabindex="-1">增加指定的整数 <a class="header-anchor" href="#增加指定的整数" aria-label="Permalink to &quot;增加指定的整数&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">incrby key x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key: 代表变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x：代表增加的数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="递减数值" tabindex="-1">递减数值 <a class="header-anchor" href="#递减数值" aria-label="Permalink to &quot;递减数值&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decr key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="减少指定的整数" tabindex="-1">减少指定的整数 <a class="header-anchor" href="#减少指定的整数" aria-label="Permalink to &quot;减少指定的整数&quot;">​</a></h5><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decrby key x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：代表变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x：代表递减的数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="获取字符串的长度" tabindex="-1">获取字符串的长度 <a class="header-anchor" href="#获取字符串的长度" aria-label="Permalink to &quot;获取字符串的长度&quot;">​</a></h4><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strlen key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：表示变量名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="字符串长度和内容追加" tabindex="-1">字符串长度和内容追加 <a class="header-anchor" href="#字符串长度和内容追加" aria-label="Permalink to &quot;字符串长度和内容追加&quot;">​</a></h4><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">append key value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：表示变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value：表示要增加的字符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-label="Permalink to &quot;分布式锁&quot;">​</a></h4><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setnx key value # 如果不存在把变量和值加上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key：变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value：值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expire)键秒值/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setnx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exist)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>set key vlaue 【ex seconds】【px milliseconds】 【nx|xx】</code></p><p><code>ex：key在多少秒后过期</code><code>px：key在多少毫秒之后过期</code><code>nx：当key不存在的时候，才创建key，效果等同于setnx</code><code>xx：当key存在的时候，覆盖key</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setex k1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">k1：表示变量名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：表示过期事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value：表示变量名的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>setnx</code>：只有在key不存在设置key值</p><h4 id="getset-先get在set-先获取值-在设置值" tabindex="-1">getset(先get在set)先获取值，在设置值 <a class="header-anchor" href="#getset-先get在set-先获取值-在设置值" aria-label="Permalink to &quot;getset(先get在set)先获取值，在设置值&quot;">​</a></h4><p>getset：将给定key的值设为value，并返回key的旧值（old value）。简单一句话，先get然后立即set</p><h2 id="列表-list" tabindex="-1">列表（List） <a class="header-anchor" href="#列表-list" aria-label="Permalink to &quot;列表（List）&quot;">​</a></h2><blockquote><p>特点：单key多value</p></blockquote><p><code>Redis</code>列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个双端链表，最多可以包含 2³²-1 个元素（4294967295，每个列表超过40亿个元素）,主要功能有push/pop等，一般用在栈、队列、消息队列等场景。left、right都可以插入添加：</p><p>如果键不存在，创建新的链表</p><p>如果键已存在，新增内容</p><p>如果值全移除，对应的键也就消失了。</p><blockquote><p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</p></blockquote><p><img src="`+l+`" alt=""></p><h3 id="常用操作命令-l是从左到右-r是从右到左" tabindex="-1">常用操作命令(L是从左到右，R是从右到左) <a class="header-anchor" href="#常用操作命令-l是从左到右-r是从右到左" aria-label="Permalink to &quot;常用操作命令(L是从左到右，R是从右到左)&quot;">​</a></h3><ol><li><code>lpop key count</code>：移除并获取到第count个元素</li><li><code>lpush key value 【value2】</code>：将一个或多个值插入到列表头部</li><li><code>lpushx key value</code>：将一个或多个值插入到已存在的列表头部</li><li><code>lrange key start stop</code>：获取列表指定范围内的元素，start是开始，stop结束</li><li><code>lrem key count value</code>：移除列表重复的元素，count移除几个重复的元素，value元素值</li><li><code>lset key index value</code>：通过索引设置列表元素的值，index索引，value要设定的值</li><li><code>ltrim key start stop</code>：截取指定索引区间的元素，格式是 ltrim list的key 起始索引，结束索引</li><li><code>rpop key count</code>：移除并获取列表最后count个元素</li><li><code>rpoplpush source destination</code>：移除列表的最后一个元素，并将该元素添加到另一个列表并返回，就是将source的头一个元素，给destination的尾元素</li><li><code>rpush key value [value2]</code>：在列表中添加一个或多个值</li><li><code>rpushx key value</code>：为已存在的列表添加值</li><li><code>llen key</code>：获取列表中元素的个数</li><li><code>lindex key index</code>：按照索引下标获得元素（从上到下），key表示变量名，index表示索引</li><li><code>linsert key before/after oldValue newValue</code>：已有值插入的新值，key变量名，before/after 前或后，oldValue：key的已有值，newValue要插入的值</li></ol><h2 id="哈希表-hash" tabindex="-1">哈希表（Hash） <a class="header-anchor" href="#哈希表-hash" aria-label="Permalink to &quot;哈希表（Hash）&quot;">​</a></h2><p>特点：KV模式不变，但V是一个键值对</p><p><code>Redis hash</code>是一个<code>String</code>类型的<code>field</code>（字段）和<code>value</code>（值）的映射表，hash特别适合用于存储对象。</p><p><code>Redis</code>中每个<code>hash</code>可以存储 键值对（40多亿）</p><p><code>hset key filed value</code>：设置值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hset user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name z3 age </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hget key filed value</code> ：获取值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hget user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hmset key filed value</code>：设置值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hmest user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name li4 age </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hmget key filed value</code>：获取值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hmget user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id name age</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hgetall key</code>：遍历key的所有属性和值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hgetall user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hdel key filed value</code>：删除指定的元素</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hdel user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hlen key</code>：获取key的长度</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hlen user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hexists key</code>：在key里面的某个值的key</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hexists user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hkeys key</code>：获取key里面的属性</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hkeys hash1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hvals key</code>：获取key里面的所有value值</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hvals hash2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hincrby key filed value</code>：对某个整数的值加value</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hincrby user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hincrbyfloat key filed value</code>：对某个浮点数的值加value</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hincrbyfloat user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>hsetnx key fuked value</code>：不存在新建成功，存在了无效</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hsetnx user:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email zzssww@qq.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="集合-set" tabindex="-1">集合（Set） <a class="header-anchor" href="#集合-set" aria-label="Permalink to &quot;集合（Set）&quot;">​</a></h2><p>特点：单值多value，且无重复</p><p><code>Redis</code>的<code>Set</code>是<code>String</code>类型的无序集合，集合成员是唯一的，这就意味着不能出现重复的数据，集合对象的编码可以是 <code>intset</code> 或者 <code>hashtable</code></p><p><code>Redis</code> 中 <code>Set</code>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1) 。</p><p>集合中最大的成员数 2³²-1 (4294967295，每个集合可存储40多亿个成员)</p><p><code>sadd key member[member ...]</code>：添加元素，自动去重</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sadd set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>smembers key</code>：遍历集合中的所有元素</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">smembers set1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>sismember key member</code>：判断member属性值是否在集合中</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sismember set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>srem key member[member ...]</code>：删除member元素</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srem set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>scard key</code>：获取集合里面的元素个数</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scard set1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>srandmember key [数字]</code>：从集合中随机展现设置的数字个数元素，元素不删除</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srandomember set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 从set1集合展现1个元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>spop key [数字]</code>：从集合中随机弹出一个元素，出一个删一个</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spop set1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #随机弹出一个元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>smove key1 key2 member</code>：在key1里已存在的某个值，将key1里已存在的某个值赋值给key2集合运算</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">smove set1 set2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #将set1中的7移动到set2里面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="集合运算" tabindex="-1">集合运算 <a class="header-anchor" href="#集合运算" aria-label="Permalink to &quot;集合运算&quot;">​</a></h3><p>A、B 两个集合，A的元素是abc12，B的元素是123ax</p><ol><li><p>集合的差集运算 A-B</p><p>属于A但不属于B的元素构成的集合</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdiff key [key...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sdiff set2 set1 # set2 和 set1 的差集</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>集合的并集运算 A ∪ B</p><p>属于A或者属于B的元素合并后的集合</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sunion key [key...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sunion set1 set2 # set1 和 set2 的并集</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>集合的交集运算 A ∩ B</p><p>属于 A 同时也属于 B 的共同拥有的元素构成的集合</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sinter key [key...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sinter set1 set2 # set1 和 set2 的交集</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p><code>sintercard numkeys key [key...][limit limit]</code></p><p>redis7新命令</p><p>它不返回结果集，而只返回结果的基数（去重以后的数字个数）。返回由所有给定集合的交集产生的集合的基数（返回重复的个数）</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sinetercard </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set1 set2 limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 2个key set1 和 set2 只显示 1个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="有序集合-zset-sorted-set" tabindex="-1">有序集合（ZSet（sorted set）） <a class="header-anchor" href="#有序集合-zset-sorted-set" aria-label="Permalink to &quot;有序集合（ZSet（sorted set））&quot;">​</a></h2><p><code>zset</code>(<code>sorted set</code>：有序集合)</p><p>在 set 基础上，每个val值前加一个score分数值。之前set是k1 v1 v2 v3</p><p>现在zset是k1 score v1 score2 v2</p><p><code>Redis zset</code>和<code>set</code>一样也是<code>String</code>类型元素的集合，且不允许重复的成员。</p><blockquote><p>不同的是每个元素都会关联一个<code>double</code>类型的分数，<code>redis</code>正是通过分数来为集合中的成员进行从小到大的排序。</p></blockquote><blockquote><p><code>zset</code>的成员是唯一的，但分数<code>(score)</code>却可以重复</p></blockquote><blockquote><p><code>zset</code>集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是O（1）。集合中最大的成员数为 2³²-1</p></blockquote><p>向有序集合中加入一个元素和该元素的分数</p><p>添加元素：</p><p><code>zadd key score member [score member...]</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zadd zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v3 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素：</p><p><code>zrange key start stop [withscores]</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 遍历所有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 遍历所有包括分数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>逆序按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素</p><p><code>zrevrange</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrevrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 逆序遍历包括分数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrevrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 逆序遍历所有</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>获取指定分数范围的元素：</p><p><code>zrangebyscore key min max [withscores] [limit offset count]</code></p><p>withscores：包括变量名</p><p>(：不包含</p><p>limit：作用是返回限制，limit开始下标步，多少步</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 按照分数找变量名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 按照分数遍历变量和值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 （</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores # 按分数遍历变量和值，不包含60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrangebyscore zset1 （</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> withscores limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  # 按照分数遍历变量和值，不包含60，返回一个键值对</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>获取元素的分数：</p><p><code>zscore key member</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zscore zset1 v1 # 获取 v1 元素的分数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取集合中元素的数量：</p><p><code>zcard key</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zcard zset1 # 获取 zset1 的集合数量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>某score下对应的value值，作用是删除元素</p><p><code>zrem key</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrem zset1 v5 # 删除 v5 元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>增加某个元素的分数：</p><p><code>zincrby key incrmenet member</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zincrby zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1 # 给v1的值增加3分</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获得指定分数范围内的元素个数：</p><p><code>zcount key min max</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zcount zset1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 获取 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 到 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 分数的值有多少个</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从键名列表中的第一个非空排序集中弹出一个或多个元素，它们是成员分数对</p><p><code>zmpop</code> redis 7.0 新命令</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zmpop </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zset min count </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 把最小的键值对给弹出，显示弹出的键值对</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获得下标值：</p><p><code>zrange key values</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrange zset </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 获得 zset的变量名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>逆序获得下标值</p><p><code>zrevrank key values</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">zrevrank zset v1 # 获得逆序的下标值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="地理空间-geo" tabindex="-1">地理空间（GEO） <a class="header-anchor" href="#地理空间-geo" aria-label="Permalink to &quot;地理空间（GEO）&quot;">​</a></h2><p><code>Redis GEO</code>主要用于存储地理位置信息，并对于存储的信息进行操作，包括：</p><ol><li>添加地理位置的坐标</li><li>获取地理位置的坐标</li><li>计算两个位置之间的距离</li><li>根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</li></ol><h2 id="基数统计-hyperloglog" tabindex="-1">基数统计（HyperLogLog） <a class="header-anchor" href="#基数统计-hyperloglog" aria-label="Permalink to &quot;基数统计（HyperLogLog）&quot;">​</a></h2><p><code>HyperLogLog</code>是用来做**<u>基数统计</u>**的算法，<code>HyperLogLog</code>的优点是，在输入元素的数量或者体积非常大时，计算基数所需的空间总是固定且很小的。</p><p>在<code>Redis</code>里面，每个<code>HyperLogLog</code>键只需要花费 12KB 内存，就可以计算接近 2^64 个不同元素的基数，这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为<code>HyperLogLog</code>只会根据输入元素来计算基数，而不会存储元素本身，所以<code>HyperLogLog</code>不能像集合那样，返回输入的各个元素。</p><h2 id="位图-bitmap" tabindex="-1">位图（bitmap） <a class="header-anchor" href="#位图-bitmap" aria-label="Permalink to &quot;位图（bitmap）&quot;">​</a></h2><p><code>Bit arrays （or simply bitmaps，我们可以称之为位图）</code></p><img src="`+t+'" style="zoom:60%;"><p>一个字节(一个byte)=8位</p><p>上图由许许多多的小格子组成，每一个格子里面只能放1或者0，用它来判断Y/N状态，说的专业点，就是每一个小格子就是一个个bit</p><p>由0和1状态表现的二进制位的bit数组</p><h2 id="位域-bitfield" tabindex="-1">位域（bitfield） <a class="header-anchor" href="#位域-bitfield" aria-label="Permalink to &quot;位域（bitfield）&quot;">​</a></h2><p>通过 <code>bitfield</code>命令可以一次性操作多个比特位域（指的是连续的多个比特位），它会执行一系列操作并返回一个响应数组，这个数组中的元素对应参数列表中的相应操作的执行结果。</p><p>说白了就是通过<code>bitfield</code>命令我们可以一次性对比多个比特位域进行操作。</p><h2 id="流-stream" tabindex="-1">流（Stream) <a class="header-anchor" href="#流-stream" aria-label="Permalink to &quot;流（Stream)&quot;">​</a></h2><p><code>Redis Stream</code>是 <code>Redis 5.0</code>版本新增加的数据结构。</p><p><code>Redis Stream</code>主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 （pub/sub）来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开，Redis 宕机等，消息就会被丢弃。</p><p>简单来说发布订阅（pub/sub）可以分发消息，但无法记录历史消息。</p><p>而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失</p>',208)]))}const g=e(p,[["render",d]]);export{b as __pageData,g as default};
