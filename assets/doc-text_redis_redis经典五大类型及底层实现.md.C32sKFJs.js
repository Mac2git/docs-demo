import{_ as e,c as s,a2 as a,o as t}from"./chunks/framework.3VuPyQdv.js";const p="/docs-demo/redisImages/image-20250716165354378.png",l="/docs-demo/redisImages/image-20250716170131856.png",r="/docs-demo/redisImages/image-20250716170742811.png",d="/docs-demo/redisImages/image-20250716170949148.png",o="/docs-demo/redisImages/image-20250716170957043.png",m="/docs-demo/redisImages/image-20250716171058106.png",n="/docs-demo/redisImages/image-20250716171235555.png",c="/docs-demo/redisImages/image-20250716171632672.png",g="/docs-demo/redisImages/image-20250716171746488.png",h="/docs-demo/redisImages/image-20250716171937938.png",u="/docs-demo/redisImages/image-20250716171957848.png",_="/docs-demo/redisImages/image-20250716172245094.png",b="/docs-demo/redisImages/image-20250716172324587.png",k="/docs-demo/redisImages/image-20250716172342336.png",q="/docs-demo/redisImages/image-20250717175335798.png",I="/docs-demo/redisImages/image-20250717175358840.png",y="/docs-demo/redisImages/image-20250717175715503.png",x="/docs-demo/redisImages/image-20250717175735825.png",z="/docs-demo/redisImages/image-20250717175910184.png",f="/docs-demo/redisImages/image-20250717181148922.png",S="/docs-demo/redisImages/image-20250717181253912.png",P="/docs-demo/redisImages/image-20250717181404448.png",O="/docs-demo/redisImages/image-20250717181445493.png",R="/docs-demo/redisImages/image-20250717181509011.png",D="/docs-demo/redisImages/image-20250717181559043.png",E="/docs-demo/redisImages/image-20250717181734422.png",v="/docs-demo/redisImages/image-20250717181814642.png",j="/docs-demo/redisImages/image-20250717182024992.png",N="/docs-demo/redisImages/image-20250717182218853.png",A="/docs-demo/redisImages/image-20250717182429283.png",C="/docs-demo/redisImages/image-20250718172440375.png",w="/docs-demo/redisImages/image-20250718172632631.png",L="/docs-demo/redisImages/image-20250718173724656.png",B="/docs-demo/redisImages/image-20250718173756472.png",F="/docs-demo/redisImages/image-20250718173811739.png",G="/docs-demo/redisImages/image-20250718173820486.png",H="/docs-demo/redisImages/image-20250718173923812.png",J="/docs-demo/redisImages/image-20250718173951302.png",T="/docs-demo/redisImages/image-20250718174421071.png",K="/docs-demo/redisImages/image-20250718174214155.png",Z="/docs-demo/redisImages/image-20250718174234621.png",M="/docs-demo/redisImages/image-20250718180957953.png",V="/docs-demo/redisImages/image-20250718181512946.png",$="/docs-demo/redisImages/image-20250718181206307.png",U="/docs-demo/redisImages/image-20250718181233064.png",W="/docs-demo/redisImages/image-20250718181534080.png",Q="/docs-demo/redisImages/image-20250718181635588.png",X="/docs-demo/redisImages/image-20250718181709091.png",Y="/docs-demo/redisImages/image-20250718181718725.png",ii="/docs-demo/redisImages/image-20250718181937055.png",ei="/docs-demo/redisImages/image-20250718182001674.png",si="/docs-demo/redisImages/image-20250718182025751.png",ai="/docs-demo/redisImages/image-20250718182036492.png",ti="/docs-demo/redisImages/image-20250718182445621.png",pi="/docs-demo/redisImages/image-20250718182644113.png",li="/docs-demo/redisImages/image-20250718182732390.png",ri="/docs-demo/redisImages/image-20250718182753983.png",di="/docs-demo/redisImages/image-20250718182842208.png",oi="/docs-demo/redisImages/image-20250718183008200.png",mi="/docs-demo/redisImages/image-20250718183057653.png",ni="/docs-demo/redisImages/image-20250719170734724.png",ci="/docs-demo/redisImages/image-20250719170758547.png",gi="/docs-demo/redisImages/image-20250719171909980.png",hi="/docs-demo/redisImages/image-20250719172057855.png",ui="/docs-demo/redisImages/image-20250719172106542.png",_i="/docs-demo/redisImages/image-20250719172131076.png",bi="/docs-demo/redisImages/image-20250719172152713.png",ki="/docs-demo/redisImages/image-20250719172207049.png",qi="/docs-demo/redisImages/image-20250719172335753.png",Ii="/docs-demo/redisImages/image-20250719172409193.png",yi="/docs-demo/redisImages/image-20250719172514866.png",xi="/docs-demo/redisImages/image-20250719172539546.png",zi="/docs-demo/redisImages/image-20250719172556712.png",fi="/docs-demo/redisImages/image-20250719172628534.png",Si="/docs-demo/redisImages/image-20250719230633635.png",Pi="/docs-demo/redisImages/image-20250719230929887.png",Oi="/docs-demo/redisImages/image-20250719230939536.png",Ri="/docs-demo/redisImages/image-20250719231031510.png",Di="/docs-demo/redisImages/image-20250719231058329.png",Ei="/docs-demo/redisImages/image-20250719231153304.png",vi="/docs-demo/redisImages/image-20250720164040253.png",ji="/docs-demo/redisImages/image-20250720164419983.png",Ni="/docs-demo/redisImages/image-20250720164515154.png",Ai="/docs-demo/redisImages/image-20250720165008568.png",Ci="/docs-demo/redisImages/image-20250720165109650.png",wi="/docs-demo/redisImages/image-20250720165549111.png",Li="/docs-demo/redisImages/image-20250720165652847.png",Bi="/docs-demo/redisImages/image-20250720165725665.png",Fi="/docs-demo/redisImages/image-20250720165803047.png",Gi="/docs-demo/redisImages/image-20250720165842959.png",Hi="/docs-demo/redisImages/image-20250720170312513.png",Ji="/docs-demo/redisImages/image-20250720170340969.png",Ti="/docs-demo/redisImages/image-20250720170407334.png",Ki="/docs-demo/redisImages/image-20250720171528498.png",Zi="/docs-demo/redisImages/image-20250720170710779.png",Mi="/docs-demo/redisImages/image-20250720170735027.png",Vi="/docs-demo/redisImages/image-20250720170855675.png",$i="/docs-demo/redisImages/image-20250720170930879.png",Ui="/docs-demo/redisImages/image-20250720170952949.png",Wi="/docs-demo/redisImages/image-20250720171137367.png",Qi="/docs-demo/redisImages/image-20250720171355626.png",Xi="/docs-demo/redisImages/image-20250720171412731.png",Yi="/docs-demo/redisImages/image-20250720171646305.png",ie="/docs-demo/redisImages/image-20250720171806258.png",ee="/docs-demo/redisImages/image-20250720171814235.png",se="/docs-demo/redisImages/image-20250720171846382.png",ae="/docs-demo/redisImages/image-20250720171856481.png",te="/docs-demo/redisImages/image-20250720171944856.png",pe="/docs-demo/redisImages/image-20250720172224873.png",le="/docs-demo/redisImages/image-20250720172316427.png",re="/docs-demo/redisImages/image-20250720172457864.png",de="/docs-demo/redisImages/image-20250720172522705.png",oe="/docs-demo/redisImages/image-20250720172727901.png",me="/docs-demo/redisImages/image-20250720172835076.png",ne="/docs-demo/redisImages/image-20250720172852165.png",ce="/docs-demo/redisImages/image-20250720172941555.png",ge="/docs-demo/redisImages/image-20250720172954650.png",he="/docs-demo/redisImages/image-20250720173025379.png",ue="/docs-demo/redisImages/image-20250720173035219.png",_e="/docs-demo/redisImages/image-20250720173208670.png",be="/docs-demo/redisImages/image-20250720173227370.png",ke="/docs-demo/redisImages/image-20250720173301672.png",qe="/docs-demo/redisImages/image-20250720173412806.png",Ie="/docs-demo/redisImages/image-20250720173713526.png",ye="/docs-demo/redisImages/image-20250720173754323.png",xe="/docs-demo/redisImages/image-20250720173829537.png",ze="/docs-demo/redisImages/image-20250721162119847.png",fe="/docs-demo/redisImages/image-20250721162155118.png",Se="/docs-demo/redisImages/image-20250721162221385.png",Pe="/docs-demo/redisImages/image-20250721162337117.png",Oe="/docs-demo/redisImages/image-20250721162527062.png",Re="/docs-demo/redisImages/image-20250721162534143.png",De="/docs-demo/redisImages/image-20250721162543774.png",Ee="/docs-demo/redisImages/image-20250721162559150.png",ve="/docs-demo/redisImages/image-20250721162654157.png",Ge=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/redis经典五大类型及底层实现.md","filePath":"doc-text/redis/redis经典五大类型及底层实现.md","lastUpdated":1753350435000}'),je={name:"doc-text/redis/redis经典五大类型及底层实现.md"};function Ne(Ae,i,Ce,we,Le,Be){return t(),s("div",null,i[0]||(i[0]=[a('<h2 id="redis经典五大类型源码及底层实现" tabindex="-1">Redis经典五大类型源码及底层实现 <a class="header-anchor" href="#redis经典五大类型源码及底层实现" aria-label="Permalink to &quot;Redis经典五大类型源码及底层实现&quot;">​</a></h2><p>本源码基于redis7.0.5</p><p>Redis数据类型和底层数据结构</p><ul><li>SDS动态字符串</li><li>双向链表</li><li>压缩列表ziplist</li><li>哈希表hashtable</li><li>跳表skiplist</li><li>整数集合intset</li><li>快速列表quicklist</li><li>紧凑列表listpack</li></ul><p>源码在哪里？</p><p>github ：<a href="https://github.com/redis/redis" target="_blank" rel="noreferrer">https://github.com/redis/redis</a></p><p><img src="'+p+'" alt="image-20250716165354378"></p><h3 id="redis核心部分" tabindex="-1">Redis核心部分 <a class="header-anchor" href="#redis核心部分" aria-label="Permalink to &quot;Redis核心部分&quot;">​</a></h3><p>src源码包下面该如何看？</p><h4 id="redis基本数据结构-骨架" tabindex="-1">Redis基本数据结构（骨架） <a class="header-anchor" href="#redis基本数据结构-骨架" aria-label="Permalink to &quot;Redis基本数据结构（骨架）&quot;">​</a></h4><ul><li><p>Github官网说明</p><p><img src="'+l+'" alt="image-20250716170131856"></p><ul><li>Redis对象object.c</li><li>字符串t_string.c</li><li>列表t_list.c</li><li>字典t_hash.c</li><li>集合及有序集合t_set.c和t_zset.c</li><li>数据流t_stream.c：Streams的底层实现结构listpack.c和rax.c</li></ul></li><li><p>简单动态字符串sds.c</p></li><li><p>整数集合intset.c</p></li><li><p>压缩列表ziplist.c</p></li><li><p>快速链表quicklist.c</p></li><li><p>listpack（紧凑列表）</p></li><li><p>字典dict.c</p></li></ul><h4 id="redis数据库的实现" tabindex="-1">Redis数据库的实现 <a class="header-anchor" href="#redis数据库的实现" aria-label="Permalink to &quot;Redis数据库的实现&quot;">​</a></h4><ul><li>数据库的底层实现db.c</li><li>持久化rdb.c和aof.c</li></ul><h4 id="redis服务端和客户端实现" tabindex="-1">Redis服务端和客户端实现 <a class="header-anchor" href="#redis服务端和客户端实现" aria-label="Permalink to &quot;Redis服务端和客户端实现&quot;">​</a></h4><ul><li>事件驱动ae.c和ae_epoll.c</li><li>网络连接anet.c和networking.c</li><li>服务端程序server.c</li><li>客户端程序redis-cli.c</li></ul><h4 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h4><ul><li>主从复制replication.c</li><li>哨兵sentinel.c</li><li>集群cluster.c</li><li>其他数据结构，如hyperloglog.c、geo.c等</li><li>其他功能，如pub/sub、Lua脚本</li></ul><h2 id="平时说的redis的字典数据库kv键到底是什么" tabindex="-1">平时说的redis的字典数据库KV键到底是什么 <a class="header-anchor" href="#平时说的redis的字典数据库kv键到底是什么" aria-label="Permalink to &quot;平时说的redis的字典数据库KV键到底是什么&quot;">​</a></h2><ul><li><p>怎样实现键值对（key-value）数据库的</p><ul><li>redis是key-value存储系统 <ul><li>key一般都是String类型的字符串对象</li><li>value类型则为redis对象（redisObject） <ul><li>value可以是字符串对象，也可以是集合数据类型的对象，比如List对象、Hash对象、Set对象和Zset对象</li></ul></li></ul></li></ul><p><img src="'+r+'" alt="image-20250716170742811"></p></li><li><p>10大类型说明（粗分）</p><ul><li><p>传统的5大类型</p><ul><li>String</li><li>List</li><li>Hash</li><li>Set</li><li>ZSet</li></ul></li><li><p>新介绍的5大类型</p><ul><li><p>bitmap：实质String</p></li><li><p>hyperloglog：实质String</p></li><li><p>GEO：实质Zset</p></li><li><p>Stream：实质Stream</p></li><li><p>BITFIELD：看具体key</p><p><img src="'+d+'" alt="image-20250716170949148"></p><p><img src="'+o+'" alt="image-20250716170957043"></p><p><img src="'+m+'" alt="image-20250716171058106"></p></li></ul></li><li><p>上帝视角</p><p><img src="'+n+'" alt="image-20250716171235555"></p></li><li><p>Redis定义了redisObject结构体来表示string、hash、list、set、zset等数据类型</p><ul><li><p>C语言struct结构体语法简介</p><p><img src="'+c+'" alt="image-20250716171632672"></p><p><img src="'+g+'" alt="image-20250716171746488"></p></li><li><p>Redis中每个对象都是一个redisObject结构</p></li><li><p>字典、KV是什么（重点）</p><ul><li><p>每个键值对都会有一个dictEntry</p></li><li><p>源码位置：dict.h</p></li><li><p>重点：从dictEntry到RedisObject</p><p><img src="'+h+'" alt="image-20250716171937938"></p><p><img src="'+u+'" alt="image-20250716171957848"></p></li></ul></li><li><p>这些键值对是如何保存进Redis并进行读取操作，O(1)复杂度</p><p><img src="'+_+'" alt="image-20250716172245094"></p></li><li><p>redisObject+Redis数据类型+Redis所有编码方式（底层实现）三者之间的关系</p><p><img src="'+b+'" alt="image-20250716172324587"></p><p><img src="'+k+'" alt="image-20250716172342336"></p></li></ul></li></ul></li></ul><h2 id="_5大结构底层c语言源码分析" tabindex="-1">5大结构底层C语言源码分析 <a class="header-anchor" href="#_5大结构底层c语言源码分析" aria-label="Permalink to &quot;5大结构底层C语言源码分析&quot;">​</a></h2><p>重点：redis数据类型与数据结构总纲图</p><ol><li>SDS动态字符串</li><li>双向链表</li><li>压缩列表ziplist</li><li>哈希表hashtable</li><li>跳表skiplist</li><li>整数集合intset</li><li>快速列表quicklist</li><li>紧凑列表listpack</li></ol><p>redis6.0.5</p><p><img src="'+q+'" alt="image-20250717175335798"></p><p>redis7</p><p><img src="'+I+'" alt="image-20250717175358840"></p><p>源码分析总体数据结构大纲</p><ul><li><p>redisObject操作底层定义来自哪里？</p><p>通常我们了解的数据结构有字符串、双端链表、字典、压缩列表、整数集合等，但是Redis为了加快读写速度，并没有直接使用这些数据结构，而是在此基础上又包装了一层称之为RedisObject。</p><p>RedisObject 有五种对象：字符串对象（String）、列表对象（List）、哈希对象（Hash）、集合对象（Set）和有序集合对象（ZSet）。</p><p><img src="'+y+'" alt="image-20250717175715503"></p><p><img src="'+x+'" alt="image-20250717175735825"></p></li></ul><p>每个键值对都会有一个dictEntry</p><ul><li><p>set hello word为例，因为Redis是KV键值对的数据库，每个键值对都会有一个dictEntry(源码位置：dict.h)，</p><p>里面指向了key和value的指针，next 指向下一个 dictEntry。</p><p>key 是字符串，但是 Redis 没有直接使用 C 的字符数组，而是存储在redis自定义的 SDS中。</p><p><strong>value 既不是直接作为字符串存储，也不是直接存储在 SDS 中，而是存储在redisObject 中</strong>。</p><p>实际上五种常用的数据类型的任何一种，都是通过 redisObject 来存储的。</p><p><img src="'+z+'" alt="image-20250717175910184"></p><p>看看类型<code>type key</code></p><p>​ <img src="'+f+'" alt="image-20250717181148922"></p><p>看看编码<code>object encoding key</code></p></li></ul><p><img src="'+S+'" alt="image-20250717181253912"></p><p>redisObject结构的作用</p><p>为了便于操作，Redis采用redisObjec结构来统一五种不同的数据类型，这样所有的数据类型就都可以以相同的形式在函数间传递而不用使用特定的类型结构。同时，为了识别不同的数据类型，redisObjec中定义了type和encoding字段对不同的数据类型加以区别。简单地说，redisObjec就是string、hash、list、set、zset的父类，可以在函数间传递时隐藏具体的类型信息，所以作者抽象了redisObjec结构来到达同样的目的。</p><p><img src="'+P+'" alt="image-20250717181404448"></p><ul><li><p>RedisObject各字段的含义</p><p><img src="'+O+'" alt="image-20250717181445493"></p><ol><li>4位的type表示具体的数据类型</li><li>4位的encoding表示该类型的物理编码方式见下表，同一种数据类型可能有不同的编码方式。</li></ol><p>(比如String就提供了3种:int embstr raw)</p><p><img src="'+R+'" alt="image-20250717181509011"></p></li></ul><ol start="3"><li><p>lru字段表示当内存超限时采用LRU算法清除内存中的对象。</p></li><li><p>refcount表示对象的引用计数。</p></li><li><p>ptr指针指向真正的底层数据结构的指针。</p></li></ol><p>案例</p><p><code>set age 17</code></p><p><img src="'+D+'" alt="image-20250717181559043"></p><table tabindex="0"><thead><tr><th style="text-align:center;">type</th><th style="text-align:center;">类型</th></tr></thead><tbody><tr><td style="text-align:center;">encoding</td><td style="text-align:center;">编码，此处是数字类型</td></tr><tr><td style="text-align:center;">lru</td><td style="text-align:center;">最近被访问的时间</td></tr><tr><td style="text-align:center;">refcount</td><td style="text-align:center;">等于1，表示当前对象被引用的次数</td></tr><tr><td style="text-align:center;">ptr</td><td style="text-align:center;">value值是多少，当前就是17</td></tr></tbody></table><h3 id="经典5大数据结构解析" tabindex="-1">经典5大数据结构解析 <a class="header-anchor" href="#经典5大数据结构解析" aria-label="Permalink to &quot;经典5大数据结构解析&quot;">​</a></h3><p>各个类型的数据结构的编码映射和定义</p><p><img src="'+E+'" alt="image-20250717181734422"></p><p><code>Debug object key</code></p><p>命令</p><p><img src="'+v+'" alt="image-20250717181814642"></p><p>开启前</p><p><img src="'+j+'" alt="image-20250717182024992"></p><p>开启后</p><p><img src="'+N+'" alt="image-20250717182218853"></p><p><img src="'+A+'" alt="image-20250717182429283"></p><ul><li>value at: 内存地址</li><li>refcount: 引用次数</li><li>encoding: 物理编码类型</li><li>serializedlength: 序列化后的长度（注意这里的长度是序列化后的长度，保存为rdb文件时使用了该算法，不是真正存贮在内存的大小),会对字串做一些可能的压缩以便底层优化</li><li>lru：记录最近使用时间戳</li><li>lru_seconds_idle（秒）：空闲时间</li></ul><h3 id="string数据结构介绍" tabindex="-1">String数据结构介绍 <a class="header-anchor" href="#string数据结构介绍" aria-label="Permalink to &quot;String数据结构介绍&quot;">​</a></h3><p>RedisObject内部对应3大物理编码</p><p><img src="'+C+'" alt="image-20250718172440375"></p><h4 id="int" tabindex="-1">int <a class="header-anchor" href="#int" aria-label="Permalink to &quot;int&quot;">​</a></h4><p>保存long型（长整型）的64位（8个字节）有符号整数</p><p><img src="'+w+'" alt="image-20250718172632631"></p><blockquote><p>只有整数才会使用int，如果是浮点数，Redis内部其实先将浮点数转化为字符串值，然后在保存。</p></blockquote><h4 id="embstr" tabindex="-1">embstr <a class="header-anchor" href="#embstr" aria-label="Permalink to &quot;embstr&quot;">​</a></h4><p>代表<code>embstr</code>格式的 SDS (Simple Dynamic String 简单动态字符串)，保存长度小于44字节的字符串</p><p>embstr 顾名思义即：embedded string，表示嵌入式的 String</p><h4 id="raw" tabindex="-1">raw <a class="header-anchor" href="#raw" aria-label="Permalink to &quot;raw&quot;">​</a></h4><p>保存长度大于44字节的字符串</p><h4 id="案例测试" tabindex="-1">案例测试 <a class="header-anchor" href="#案例测试" aria-label="Permalink to &quot;案例测试&quot;">​</a></h4><p><img src="'+L+'" alt="image-20250718173724656"></p><h4 id="c语言中字符串的展现" tabindex="-1">C语言中字符串的展现 <a class="header-anchor" href="#c语言中字符串的展现" aria-label="Permalink to &quot;C语言中字符串的展现&quot;">​</a></h4><p><img src="'+B+'" alt="image-20250718173756472"></p><p><img src="'+F+'" alt="image-20250718173811739"></p><p><img src="'+G+'" alt="image-20250718173820486"></p><p>用空间换取时间</p><h4 id="sds简单动态字符串" tabindex="-1">SDS简单动态字符串 <a class="header-anchor" href="#sds简单动态字符串" aria-label="Permalink to &quot;SDS简单动态字符串&quot;">​</a></h4><p>sds.h源码分析</p><p><img src="'+H+'" alt="image-20250718173923812"></p><p>说明</p><p><img src="'+J+'" alt="image-20250718173951302"></p><p>Redis中字符串的实现,SDS有多种结构（sds.h）：</p><p>sdshdr5、(2^5=32byte)</p><p>sdshdr8、(2 ^ 8=256byte)</p><p>sdshdr16、(2 ^ 16=65536byte=64KB)</p><p>sdshdr32、 (2 ^ 32byte=4GB)</p><p>sdshdr64，2的64次方byte＝17179869184G用于存储不同的长度的字符串。</p><p>len 表示 SDS 的长度，使我们在获取字符串长度的时候可以在 O(1)情况下拿到，而不是像 C 那样需要遍历一遍字符串。</p><p>alloc 可以用来计算 free 就是字符串已经分配的未使用的空间，有了这个值就可以引入预分配空间的算法了，而不用去考虑内存分配的问题。</p><p>buf 表示字符串数组，真存数据的。</p><p><img src="'+T+'" alt="image-20250718174421071"></p><p>官网：<a href="https://github.com/antirez/sds" target="_blank" rel="noreferrer">https://github.com/antirez/sds</a></p><h4 id="redis为什么重新设计一个sds数据结构" tabindex="-1">Redis为什么重新设计一个SDS数据结构？ <a class="header-anchor" href="#redis为什么重新设计一个sds数据结构" aria-label="Permalink to &quot;Redis为什么重新设计一个SDS数据结构？&quot;">​</a></h4><p><img src="'+K+'" alt="image-20250718174214155"></p><p>C语言没有Java里面的String类型，只能是靠自己的char[]来实现，字符串在 C 语言中的存储方式，想要获取 「Redis」的长度，需要从头开始遍历，直到遇到 &#39;\\0&#39; 为止。所以，Redis 没有直接使用 C 语言传统的字符串标识，而是自己构建了一种名为简单动态字符串 SDS（simple dynamic string）的抽象类型，并将 SDS 作为 Redis 的默认字符串。</p><p><img src="'+Z+'" alt="image-20250718174234621"></p><table tabindex="0"><thead><tr><th>C语言</th><th>SDS</th><th></th></tr></thead><tbody><tr><td><strong>字符串长度处理</strong></td><td>需要从头开始遍历，直到遇到 &#39;\\0&#39; 为止，时间复杂度O(N)</td><td>记录当前字符串的长度，直接读取即可，时间复杂度 O(1)</td></tr><tr><td><strong>内存重新分配</strong></td><td>分配内存空间超过后，会导致数组下标越级或者内存分配溢出</td><td>空间预分配SDS 修改后，len 长度小于 1M，那么将会额外分配与 len 相同长度的未使用空间。如果修改后长度大于 1M，那么将分配1M的使用空间。惰性空间释放有空间分配对应的就有空间释放。SDS 缩短时并不会回收多余的内存空间，而是使用 free 字段将多出来的空间记录下来。如果后续有变更操作，直接使用 free 中记录的空间，减少了内存的分配。</td></tr><tr><td><strong>二进制安全</strong></td><td>二进制数据并不是规则的字符串格式，可能会包含一些特殊的字符，比如 &#39;\\0&#39; 等。前面提到过，C中字符串遇到 &#39;\\0&#39; 会结束，那 &#39;\\0&#39; 之后的数据就读取不上了</td><td>根据 len 长度来判断字符串结束的，二进制安全的问题就解决了</td></tr></tbody></table><h4 id="_3-大物理编码方式" tabindex="-1">3 大物理编码方式 <a class="header-anchor" href="#_3-大物理编码方式" aria-label="Permalink to &quot;3 大物理编码方式&quot;">​</a></h4><p><img src="'+M+'" alt="image-20250718180957953"></p><h5 id="int-编码格式" tabindex="-1">int 编码格式 <a class="header-anchor" href="#int-编码格式" aria-label="Permalink to &quot;int 编码格式&quot;">​</a></h5><p><img src="'+V+'" alt="image-20250718181512946"></p><p>命令示例： set k2 123</p><p>当字符串键值的内容可以用一个64位有符号整形来表示时，Redis会将键值转化为long型来进行存储，此时即对应 OBJ_ENCODING_INT 编码类型。内部的内存结构表示如下:</p><p><img src="'+$+'" alt="image-20250718181206307"></p><p>Redis 启动时会预先建立 10000 个分别存储 0~9999 的 redisObject 变量作为共享对象，这就意味着如果 set字符串的键值在 0~10000 之间的话，则可以 <strong>直接指向共享对象 而不需要再建立新对象，此时键值不占空间！</strong></p><p>set k1 123</p><p>set k2 123</p><p><img src="'+U+'" alt="image-20250718181233064"></p><p>redis源码：server.h，笔记下面有</p><p><img src="'+W+'" alt="image-20250718181534080"></p><p>redis6源代码：object.c笔记下面还有</p><p><img src="'+Q+'" alt="image-20250718181635588"></p><p>redis7源代码：object.c笔记下面还有</p><p><img src="'+X+'" alt="image-20250718181709091"></p><p><img src="'+Y+'" alt="image-20250718181718725"></p><blockquote><p>如果值一样，且是int类型的编码格式，就直接引用之前的，不会再去开辟新的空间！前提是值不能超过10000，0~9999才可以！</p></blockquote><h5 id="embstr-编码格式" tabindex="-1">embstr 编码格式 <a class="header-anchor" href="#embstr-编码格式" aria-label="Permalink to &quot;embstr 编码格式&quot;">​</a></h5><p><img src="'+ii+'" alt="image-20250718181937055"></p><p>redis源代码：object.c</p><p><img src="'+ei+'" alt="image-20250718182001674"></p><p>对于长度小于 44的字符串，Redis 对键值采用OBJ_ENCODING_EMBSTR 方式，EMBSTR 顾名思义即：embedded string，表示嵌入式的String。从内存结构上来讲 即字符串 sds结构体与其对应的 redisObject 对象分配在同一块连续的内存空间，字符串sds嵌入在redisObject对象之中一样。</p><p><img src="'+si+'" alt="image-20250718182025751"></p><p><img src="'+ai+'" alt="image-20250718182036492"></p><p>进一步createEmbddedStringObject方法</p><p><img src="'+ti+'" alt="image-20250718182445621"></p><blockquote><p>没有申请新的redisObject对象，只是在之前redisObject对象下加了一个1，内存紧凑。实现了内存的高度连续！减少碎片，不占空间</p></blockquote><h5 id="raw编码格式" tabindex="-1">raw编码格式 <a class="header-anchor" href="#raw编码格式" aria-label="Permalink to &quot;raw编码格式&quot;">​</a></h5><p><img src="'+pi+'" alt="image-20250718182644113"></p><p>set k3 大于44长度的一个字符串，随便写</p><p><img src="'+li+'" alt="image-20250718182732390"></p><p>当字符串的键值为长度大于44的超长字符串时，Redis 则会将键值的内部编码方式改为OBJ_ENCODING_RAW格式，这与OBJ_ENCODING_EMBSTR编码方式的不同之处在于，此时动态字符串sds的内存与其依赖的redisObject的内存不再连续了</p><p><img src="'+ri+'" alt="image-20250718182753983"></p><h5 id="明明没有超过阈值-为什么变成-raw-了" tabindex="-1">明明没有超过阈值，为什么变成 raw 了 <a class="header-anchor" href="#明明没有超过阈值-为什么变成-raw-了" aria-label="Permalink to &quot;明明没有超过阈值，为什么变成 raw 了&quot;">​</a></h5><p><img src="'+di+'" alt="image-20250718182842208"></p><p>如果先添加一个字符，在拼接一个字符，直接去最大“raw”</p><p>判断不出来，就取最大Raw</p><h5 id="转变逻辑图" tabindex="-1">转变逻辑图 <a class="header-anchor" href="#转变逻辑图" aria-label="Permalink to &quot;转变逻辑图&quot;">​</a></h5><p><img src="'+oi+'" alt="image-20250718183008200"></p><h5 id="案例结论" tabindex="-1">案例结论 <a class="header-anchor" href="#案例结论" aria-label="Permalink to &quot;案例结论&quot;">​</a></h5><p>只有整数才会使用 int，如果是浮点数， Redis 内部其实先将浮点数转化为字符串值，然后再保存。</p><p>embstr 与 raw 类型底层的数据结构其实都是 SDS (简单动态字符串，Redis 内部定义 sdshdr 一种结构)。</p><p>那这两者的区别见下图：</p><table tabindex="0"><thead><tr><th style="text-align:left;">1 int</th><th style="text-align:left;">Long类型整数时，RedisObject中的ptr指针直接赋值为整数数据，不再额外的指针再指向整数了，节省了指针的空间开销。</th></tr></thead><tbody><tr><td style="text-align:left;">2 embstr</td><td style="text-align:left;">当保存的是字符串数据且字符串小于等于44字节时，embstr类型将会调用内存分配函数，只分配一块连续的内存空间，空间中依次包含 redisObject 与 sdshdr 两个数据结构，让元数据、指针和SDS是一块连续的内存区域，这样就可以避免内存碎片</td></tr><tr><td style="text-align:left;">3 raw</td><td style="text-align:left;">当字符串大于44字节时，SDS的数据量变多变大了，SDS和RedisObject布局分家各自过，会给SDS分配多的空间并用指针指向SDS结构，raw 类型将会调用两次内存分配函数，分配两块内存空间，一块用于包含 redisObject结构，而另一块用于包含 sdshdr 结构</td></tr></tbody></table><p><img src="'+mi+'" alt="image-20250718183057653"></p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>redis 内部会根据用户给的不同键值而使用不同的编码格式，自适应地选择较优化的内部编码格式，而这一切对用户完全透明！</p><h3 id="hash数据结果介绍" tabindex="-1">Hash数据结果介绍 <a class="header-anchor" href="#hash数据结果介绍" aria-label="Permalink to &quot;Hash数据结果介绍&quot;">​</a></h3><h4 id="hash的两种编码格式" tabindex="-1">hash的两种编码格式 <a class="header-anchor" href="#hash的两种编码格式" aria-label="Permalink to &quot;hash的两种编码格式&quot;">​</a></h4><p>redis6</p><ul><li>ziplist</li><li>hashtable</li></ul><p>redis7</p><ul><li>listpack</li><li>hashtable</li></ul><h4 id="redis6-案例" tabindex="-1">redis6（案例） <a class="header-anchor" href="#redis6-案例" aria-label="Permalink to &quot;redis6（案例）&quot;">​</a></h4><h5 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h5><p><strong>hash-max-ziplist-entries：使用压缩列表保存时哈希集合中的最大元素个数。</strong></p><p><strong>hash-max-ziplist-value：使用压缩列表保存时哈希集合中单个元素的最大长度。</strong></p><p>Hash类型键的字段个数 小于 hash-max-ziplist-entries 并且每个字段名和字段值的长度 小于 hash-max-ziplist-value 时，</p><p>Redis才会使用 OBJ_ENCODING_ZIPLIST来存储该键，前述条件任意一个不满足则会转换为 OBJ_ENCODING_HT（hashtable）的编码方式</p><p><img src="'+ni+'" alt="image-20250719170734724"></p><p><img src="'+ci+'" alt="image-20250719170758547">;</p><h5 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h5><p>hash-max-ziplist-entries：使用压缩列表保存时哈希集合中的最大元素个数</p><p>hash-max-ziplist-value：使用压缩列表保存时哈希集合中单个元素的最大长度。</p><h5 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h5><ol><li>哈希对象保存的键值对数量小于512个</li><li>所有的键值对和值的字符串长度都小于等于64byte（一个英文字母一个字节）时用ziplist，反之用hashtable</li></ol><p>ziplist升级到hashtable可以，反过来降级不可以</p><ul><li>一旦从压缩列表转为了哈希表，Hash类型就会一直用哈希表进行保存而不会再转回压缩列表了。</li><li>在节省内存空间方面哈希表就没有压缩列表高效了。</li></ul><h5 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h5><p><img src="'+gi+'" alt="image-20250719171909980"></p><h5 id="源码分析" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析" aria-label="Permalink to &quot;源码分析&quot;">​</a></h5><p>t_hash.c</p><ul><li><p>在 redis 中，hashtable 被称为字典（dictionary），它是一个数组+链表的结构</p></li><li><p>OBJ_ENCODING_HT（hashtable）编码分析</p><ul><li><p>OBJ_ENCODING_HT 这种编码方式内部才是真正的哈希表结构，或称为字典结构，其可以实现O(1)复杂度的读写操作，因此效率很高。</p><p>在 Redis内部，从 OBJ_ENCODING_HT类型到底层真正的散列表数据结构是一层层嵌套下去的，组织关系见面图：</p><p><img src="'+hi+'" alt="image-20250719172057855"></p><p><img src="'+ui+'" alt="image-20250719172106542"></p><p>源代码：dict.h</p><p><img src="'+_i+'" alt="image-20250719172131076"></p><p><img src="'+bi+'" alt="image-20250719172152713"></p><p><img src="'+ki+'" alt="image-20250719172207049"></p><ul><li>每个键值对都会有一个dictEntry</li></ul></li></ul></li><li><p>hset 命令解读</p><p><img src="'+qi+'" alt="image-20250719172335753"></p><ul><li><p>类型</p><p><img src="'+Ii+'" alt="image-20250719172409193"></p></li></ul></li></ul><p>ziplist.c</p><ul><li><p>ziplist，什么样？</p><p>源代码：ziplist.c</p><p>为了节约内存而开发的，它是由连续内存块组成的顺序型数据结构，有点类似于数组</p><p>ziplist是一个经过特殊编码的双向链表，它不存储指向前一个链表节点prev和指向下一个链表节点的指针next而是存储上一个节点长度和当前节点长度，通过牺牲部分读写性能，来换取高效的内存空间利用率，节约内存，是一种时间换空间的思想。只用在字段个数少，字段值小的场景里面</p><p><img src="'+yi+'" alt="image-20250719172514866"></p><p><img src="'+xi+'" alt="image-20250719172539546"></p><p><img src="'+zi+'" alt="image-20250719172556712"></p><ul><li><p>ziplist 各个组成单元什么意思</p><p><img src="'+fi+'" alt="image-20250719172628534"></p></li></ul></li><li><p>zlentry，压缩列表节点的构成</p><ul><li><p>官网源码</p><p><img src="'+Si+`" alt="image-20250719230633635"></p></li><li><p>zlentry 实体结构解析</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 再内存中并没有存下下面结构体zlentry的内容，只是为了方便，在代码中定义了这样的结构体，包含了一些其他信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zlentry {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prevrawlensize, prevrawlen;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //用来计算前面节点的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lensize, len;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          //本节点的长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headersize;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            //头部大小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoding;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                             //编码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} zlentry;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>ziplist 存取情况</p><p><img src="`+Pi+'" alt="image-20250719230929887"></p><p><img src="'+Oi+'" alt="image-20250719230939536"></p><table tabindex="0"><thead><tr><th style="text-align:center;">prevlen</th><th style="text-align:center;">记录了前一个节点的长度；</th></tr></thead><tbody><tr><td style="text-align:center;">encoding</td><td style="text-align:center;">记录了当前节点实际数据的类型以及长度</td></tr><tr><td style="text-align:center;">data</td><td style="text-align:center;">记录了当前节点的实际数据</td></tr></tbody></table><ul><li><p>zlentry 解析</p><p>压缩列表zlentry节点结构：每个zlentry由前一个节点的长度、encoding和entry-data三部分组成</p><p><img src="'+Ri+'" alt="image-20250719231031510"></p><p>前节点：(前节点占用的内存字节数)表示前1个zlentry的长度，privious_entry_length有两种取值情况：1字节或5字节。取值1字节时，表示上一个entry的长度小于254字节。虽然1字节的值能表示的数值范围是0到255，但是压缩列表中zlend的取值默认是255，因此，就默认用255表示整个压缩列表的结束，其他表示长度的地方就不能再用255这个值了。所以，当上一个entry长度小于254字节时，prev_len取值为1字节，否则，就取值为5字节。记录长度的好处：占用内存小，1或者5个字节</p><p>enncoding：记录节点的content保存数据的类型和长度。</p><p>content：保存实际数据内容</p><p><img src="'+Di+'" alt="image-20250719231058329"></p></li><li><p>为什么 zlentry 这么设计？数组和链表数据结构对比</p><p>privious_entry_length，encoding长度都可以根据编码方式推算，真正变化的是content，而content长度记录在encoding里 ，因此entry的长度就知道了。entry总长度 = privious_entry_length字节数+encoding字节数+content字节数</p><p><img src="'+Ei+'" alt="image-20250719231153304"></p><p>为什么entry这么设计？记录前一个节点的长度？</p><p>链表在内存中，一般是不连续的，遍历相对比较慢，而ziplist可以很好的解决这个问题。如果知道了当前的起始地址，因为entry是连续的，entry后一定是另一个entry，想知道下一个entry的地址，只要将当前的起始地址加上当前entry总长度。如果还想遍历下一个entry，只要继续同样的操作。</p></li></ul></li><li><p><strong>明明有链表了，为什么出来一个压缩链表？</strong></p><ol><li><p>普通的双向链表会有两个指针，在存储数据很小的情况下，我们存储的实际数据的大小可能还没有指针占用的内存大，得不偿失。ziplist 是一个特殊的双向链表没有维护双向指针:previous next；而是存储上一个 entry的长度和当前entry的长度，通过长度推算下一个元素在什么地方。牺牲读取的性能，获得高效的存储空间，因为(简短字符串的情况)存储指针比存储entry长度更费内存。这是典型的“时间换空间”。</p></li><li><p>链表在内存中一般是不连续的，遍历相对比较慢而ziplist可以很好的解决这个问题，普通数组的遍历是根据数组里存储的数据类型找到下一个元素的(例如int类型的数组访问下一个元素时每次只需要移动一个sizeof(int)就行)，但是ziplist的每个节点的长度是可以不一样的，而我们面对不同长度的节点又不可能直接sizeof(entry)，所以ziplist只好将一些必要的偏移量信息记录在了每一个节点里，使之能跳到上一个节点或下一个节点。</p><p>备注:sizeof实际上是获取了数据在内存中所占用的存储空间，以字节为单位来计数。</p></li><li><p>头节点里有头节点里同时还有一个参数 len，和string类型提到的 SDS 类似，这里是用来记录链表长度的。因此获取链表长度时不用再遍历整个链表，直接拿到len值就可以了，这个时间复杂度是 O(1)</p></li></ol></li><li><p>ziplist 总结</p><p>ziplist为了节省内存，采用了紧凑的连续存储。</p><p>ziplist是一个双向链表，可以在时间复杂度为 O(1) 下从头部、尾部进行 pop 或 push。</p><p>新增或更新元素可能会出现连锁更新现象(致命缺点导致被listpack替换)。</p><p>不能保存过多的元素，否则查询效率就会降低，数量小和内容小的情况下可以使用。</p></li></ul></li></ul><h4 id="redis7-案例" tabindex="-1">redis7（案例） <a class="header-anchor" href="#redis7-案例" aria-label="Permalink to &quot;redis7（案例）&quot;">​</a></h4><h5 id="案例-1" tabindex="-1">案例 <a class="header-anchor" href="#案例-1" aria-label="Permalink to &quot;案例&quot;">​</a></h5><p><strong>hash-max-listpack-entries：使用压缩列表保存时哈希集合中的最大元素个数。</strong></p><p><strong>hash-max-listpack-value：使用压缩列表保存时哈希集合中单个元素的最大长度。</strong></p><p>Hash类型键的字段个数 小于 hash-max-listpack-entries且每个字段名和字段值的长度 小于 hash-max-listpack-value 时，</p><p>Redis才会使用OBJ_ENCODING_LISTPACK来存储该键，前述条件任意一个不满足则会转换为 OBJ_ENCODING_HT（hashtable）的编码方式</p><p><img src="'+vi+'" alt="image-20250720164040253"></p><p><img src="'+ji+'" alt="image-20250720164419983"></p><p><img src="'+Ni+'" alt="image-20250720164515154"></p><p><img src="'+Ai+'" alt="image-20250720165008568"></p><p><img src="'+Ci+'" alt="image-20250720165109650"></p><h5 id="结构-1" tabindex="-1">结构 <a class="header-anchor" href="#结构-1" aria-label="Permalink to &quot;结构&quot;">​</a></h5><p>hash-max-listpack-entries：使用紧凑列表保存时哈希集合中的最大元素个数</p><p>hash-max-listpack-value：使用紧凑列表保存时哈希集合中单个元素的最大长度</p><h5 id="结论-1" tabindex="-1">结论 <a class="header-anchor" href="#结论-1" aria-label="Permalink to &quot;结论&quot;">​</a></h5><ol><li>哈希对象保存的键值对数量小于512个</li><li>所有的键值对的键和值的字符串长度都小于等于64byte（一个英文字母一个字节）时用listpack，反之用hashtable</li></ol><p>listpack升级到hashtable可以，反过来降级不可以</p><h5 id="流程-同redis6-只不过ziplist改为listpack" tabindex="-1">流程（同redis6，只不过ziplist改为listpack） <a class="header-anchor" href="#流程-同redis6-只不过ziplist改为listpack" aria-label="Permalink to &quot;流程（同redis6，只不过ziplist改为listpack）&quot;">​</a></h5><p><img src="'+wi+'" alt="image-20250720165549111"></p><h5 id="源码分析-1" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析-1" aria-label="Permalink to &quot;源码分析&quot;">​</a></h5><p>源码说明</p><ul><li><p>实现：object.c</p><p><img src="'+Li+'" alt="image-20250720165652847"></p></li><li><p>实现：listpack.c</p><p><img src="'+Bi+'" alt="image-20250720165725665"></p><p>lpNew 函数创建了一个空的 listpack，一开始分配的大小是 LP_HDR_SIZE 再加 1 个字节。LP_HDR_SIZE 宏定义是在 listpack.c 中，它默认是 6 个字节，其中 4 个字节是记录 listpack 的总字节数，2 个字节是记录 listpack 的元素数量。此外，listpack 的最后一个字节是用来标识 listpack 的结束，其默认值是宏定义 LP_EOF。和 ziplist 列表项的结束标记一样，LP_EOF 的值也是 255</p></li><li><p>实现2：object.c</p><p><img src="'+Fi+'" alt="image-20250720165803047"></p></li></ul><p><strong>明明有了ziplist了，为什么出来一个listpack紧凑列表？</strong></p><p><img src="'+Gi+'" alt="image-20250720165842959"></p><p>压缩列表里的每个节点中的 prelen 属性都记录了【前一个节点的长度】，而且 prelen 属性的空间大小跟前一个节点长度值有关，比如：</p><ul><li>如果<strong>前一个节点的长度小于 254 字节</strong>，那么 prelen 属性需要用 <strong>1字节的空间</strong>来保存这个长度值</li><li>如果<strong>前一个节点的长度大于等于 254 字节</strong>，那么 prelen 属性需要用 <strong>5字节的空间</strong>来保存这个长度值</li></ul><p>ziplist的连锁更新问题</p><p>​ 压缩列表新增某个元素或修改某个元素时，如果空间不不够，压缩列表占用的内存空间就需要重新分配。而当新插入的元素较大时，可能会导致后续元素的 prevlen 占用空间都发生变化，从而引起「连锁更新」问题，导致每个元素的空间都要重新分配，造成访问压缩列表性能的下降。</p><p>案例说明：<strong>压缩列表每个节点正因为需要保存前一个节点的长度字段，就会有连锁更新的隐患</strong></p><p>第一步：现在假设一个压缩列表中有多个连续的、长度在 250～253 之间的节点，如下图：</p><p><img src="'+Hi+'" alt="image-20250720170312513"></p><p>因为这些节点长度值小于 254 字节，所以 prevlen 属性需要用 1 字节的空间来保存这个长度值，一切OK，O(∩_∩)O哈哈~</p><p>第二步：这时，如果将一个长度大于等于 254 字节的新节点加入到压缩列表的表头节点，即新节点将成为entry1的前置节点，如下图：</p><p><img src="'+Ji+'" alt="image-20250720170340969"></p><p>因为entry1节点的prevlen属性只有1个字节大小，无法保存新节点的长度，此时就需要对压缩列表的空间重分配操作并将entry1节点的prevlen 属性从原来的 1 字节大小扩展为 5 字节大小。</p><p>第三步：连续更新问题出现</p><p><img src="'+Ti+'" alt="image-20250720170407334"></p><p>entry1节点原本的长度在250～253之间，因为刚才的扩展空间，此时entry1节点的长度就大于等于254，因此原本entry2节点保存entry1节点的 prevlen属性也必须从1字节扩展至5字节大小。entry1节点影响entry2节点，entry2节点影响entry3节点......一直持续到结尾。这种在特殊情况下产生的连续多次空间扩展操作就叫做「连锁更新」</p><p>结论</p><p>listpack 是 Redis 设计用来取代掉 ziplist 的数据结构，它通过每个节点记录自己的长度且放在节点的尾部，来彻底解决掉了 ziplist 存在的连锁更新的问题</p><p>listpack结构</p><p><img src="'+Ki+'" alt="image-20250720171528498"></p><ul><li><p>官网：<a href="https://github.com/antirez/listpack/blob/master/listpack.md" target="_blank" rel="noreferrer">https://github.com/antirez/listpack/blob/master/listpack.md</a></p></li><li><p>listpack由4部分组成：total Bytes、Num Elem、Entry以及End</p><p><img src="'+Zi+'" alt="image-20250720170710779"></p><table tabindex="0"><thead><tr><th>Total Bytes</th><th>为整个listpack的空间大小，占用4个字节，每个listpack最多占用4294967295Bytes。</th></tr></thead><tbody><tr><td>num-elements</td><td>为listpack中的元素个数，即Entry的个数占用2个字节</td></tr><tr><td>element-1~element-N</td><td>为每个具体的元素</td></tr><tr><td>listpack-end-byte</td><td>为listpack结束标志，占用1个字节，内容为0xFF。</td></tr></tbody></table><p><img src="'+Mi+'" alt="image-20250720170735027"></p></li><li><p>entry 结构</p><ul><li><p>当前元素的编码类型（entry-encoding）</p></li><li><p>元素数据（entry-data）</p></li><li><p>以及编码类型和元素数据这两部分的长度（entry-len）</p></li><li><p>listpackEntry结构定义：listpack.h</p><p><img src="'+Vi+'" alt="image-20250720170855675"></p></li></ul></li></ul><p>ziplist 内存布局 VS listpack 内存布局</p><p><img src="'+$i+'" alt="image-20250720170930879"></p><p>和ziplist 列表项类似，listpack 列表项也包含了元数据信息和数据本身。不过，为了避免ziplist引起的连锁更新问题，listpack 中的每个列表项</p><p>不再像ziplist列表项那样保存其前一个列表项的长度。</p><p><img src="'+Ui+'" alt="image-20250720170952949"></p><h5 id="hash-的两种编码格式" tabindex="-1">hash 的两种编码格式 <a class="header-anchor" href="#hash-的两种编码格式" aria-label="Permalink to &quot;hash 的两种编码格式&quot;">​</a></h5><ul><li>redis 6 <ul><li>ziplist</li><li>hashtable</li></ul></li><li>redis 7 <ul><li>listpack</li><li>hashtable</li></ul></li></ul><h3 id="list-数据结构介绍" tabindex="-1">List 数据结构介绍 <a class="header-anchor" href="#list-数据结构介绍" aria-label="Permalink to &quot;List 数据结构介绍&quot;">​</a></h3><h4 id="redis-6-案例" tabindex="-1">redis 6（案例） <a class="header-anchor" href="#redis-6-案例" aria-label="Permalink to &quot;redis 6（案例）&quot;">​</a></h4><p><img src="'+Wi+'" alt="image-20250720171137367"></p><ol><li><p>ziplist压缩配置：list-compress-depth 0</p><p>表示一个quicklist两端不被压缩的节点个数。这里的节点是指quicklist双向链表的节点，而不是指ziplist里面的数据项个数</p><p>参数list-compress-depth的取值含义如下：</p><p>​ 0: 是个特殊值，表示都不压缩。这是Redis的默认值。</p><p>​ 1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。</p><p>​ 2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。</p><p>​ 3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。</p></li></ol><p>依此类推…</p><ol start="2"><li>ziplist中entry配置：list-max-ziplist-size -2</li></ol><p>​ 当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。比如，当这个参数配置成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项。当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度。这时，它只能取-1到-5这五个值，</p><p>每个值含义如下：</p><p>-5: 每个quicklist节点上的ziplist大小不能超过64 Kb。（注：1kb =&gt; 1024 bytes）</p><p>-4: 每个quicklist节点上的ziplist大小不能超过32 Kb。</p><p>-3: 每个quicklist节点上的ziplist大小不能超过16 Kb。</p><p>-2: 每个quicklist节点上的ziplist大小不能超过8 Kb。（-2是Redis给出的默认值）</p><p>-1: 每个quicklist节点上的ziplist大小不能超过4 Kb。</p><h5 id="redis-6版本前的list的一种编码格式" tabindex="-1">redis 6版本前的List的一种编码格式 <a class="header-anchor" href="#redis-6版本前的list的一种编码格式" aria-label="Permalink to &quot;redis 6版本前的List的一种编码格式&quot;">​</a></h5><p>list用quicklist来存储，quicklist存储了一个双向链表，每个节点都是ziplist</p><p><img src="'+Qi+'" alt="image-20250720171355626"></p><p>在Redis3.0之前，list采用的底层数据结构是ziplist压缩列表+linkedList双向链表</p><p>然后在高版本的Redis中底层数据结构是quicklist(替换了ziplist+linkedList)，而quicklist也用到了ziplist</p><p>结论：quicklist就是「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表</p><p><img src="'+Xi+'" alt="image-20250720171412731"></p><h5 id="quicklist总纲" tabindex="-1">quicklist总纲 <a class="header-anchor" href="#quicklist总纲" aria-label="Permalink to &quot;quicklist总纲&quot;">​</a></h5><p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。</p><p><img src="'+Yi+'" alt="image-20250720171646305"></p><p>是 ziplist 和 linkedlist 的结合体</p><h5 id="源码分析-2" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析-2" aria-label="Permalink to &quot;源码分析&quot;">​</a></h5><ul><li><p>quicklist.h，head和tail指向双向列表的表头和表尾</p><ul><li><p>quicklist 结构</p><p><img src="'+ie+'" alt="image-20250720171806258"></p><p><img src="'+ee+'" alt="image-20250720171814235"></p></li><li><p>quicklistNode 结构</p><p><img src="'+se+'" alt="image-20250720171846382"></p><p><img src="'+ae+'" alt="image-20250720171856481"></p></li><li><p>quicklistNode 中的 *zl 指向一个 ziplist 一个ziplist 可以存放多个元素</p><p><img src="'+te+'" alt="image-20250720171944856"></p></li></ul></li></ul><h4 id="redis-7-案例" tabindex="-1">redis 7（案例） <a class="header-anchor" href="#redis-7-案例" aria-label="Permalink to &quot;redis 7（案例）&quot;">​</a></h4><p><img src="'+pe+'" alt="image-20250720172224873"></p><p>listpack紧凑列表</p><p>是用来替代 ziplist 的新数据结构，在 7.0 版本已经没有 ziplist 的配置了（6.0版本仅部分数据类型作为过渡阶段在使用）</p><h5 id="源码说明" tabindex="-1">源码说明 <a class="header-anchor" href="#源码说明" aria-label="Permalink to &quot;源码说明&quot;">​</a></h5><p>实现：t_list.c</p><ul><li><p>本图最下方有lpush命令执行后直接调用pushGenericCommand命令</p><p><img src="'+le+'" alt="image-20250720172316427"></p><ul><li><p>看看 redis 6 的相同文件 t_list.c</p><p><img src="'+re+'" alt="image-20250720172457864"></p></li></ul></li><li><p>实现：object.c</p><p><img src="'+de+'" alt="image-20250720172522705"></p></li><li><p>redis 7的 list 的一种编码格式</p><ul><li><p>list 用 quicklist 来存储，quicklist 存储了一个双向链表，每个节点都是一个listpack</p></li><li><p>quicklist</p><p>是 listpack 和 linkedlist 的结合体</p></li></ul></li></ul><h3 id="set-数据结构介绍" tabindex="-1">Set 数据结构介绍 <a class="header-anchor" href="#set-数据结构介绍" aria-label="Permalink to &quot;Set 数据结构介绍&quot;">​</a></h3><h4 id="案例-2" tabindex="-1">案例 <a class="header-anchor" href="#案例-2" aria-label="Permalink to &quot;案例&quot;">​</a></h4><p>Redis用intset或hashtable存储set。如果元素都是整数类型，就用intset存储。</p><p>如果不是整数类型，就用hashtable（数组+链表的存来储结构）。key就是元素的值，value为null。</p><p><img src="'+oe+'" alt="image-20250720172727901"></p><p>set-proc-title 修改进程标题以显示一些运行时信息</p><h4 id="set-的两种编码方式" tabindex="-1">Set 的两种编码方式 <a class="header-anchor" href="#set-的两种编码方式" aria-label="Permalink to &quot;Set 的两种编码方式&quot;">​</a></h4><ol><li>inset</li><li>hashtable</li></ol><h4 id="源码分析-3" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析-3" aria-label="Permalink to &quot;源码分析&quot;">​</a></h4><p>t_set.c</p><p><img src="'+me+'" alt="image-20250720172835076"></p><p><img src="'+ne+'" alt="image-20250720172852165"></p><h3 id="zset-数据结构介绍" tabindex="-1">ZSet 数据结构介绍 <a class="header-anchor" href="#zset-数据结构介绍" aria-label="Permalink to &quot;ZSet 数据结构介绍&quot;">​</a></h3><h4 id="案例-3" tabindex="-1">案例 <a class="header-anchor" href="#案例-3" aria-label="Permalink to &quot;案例&quot;">​</a></h4><h5 id="redis-6" tabindex="-1">redis 6 <a class="header-anchor" href="#redis-6" aria-label="Permalink to &quot;redis 6&quot;">​</a></h5><p>当有序集合中包含的元素数量超过服务器属性 server.zset_max_ziplist_entries 的值（默认值为 128 ），</p><p>或者有序集合中新添加元素的 member 的长度大于服务器属性 server.zset_max_ziplist_value 的值（默认值为 64 ）时，</p><p>redis会使用跳跃表作为有序集合的底层实现。</p><p>否则会使用ziplist作为有序集合的底层实现</p><p><img src="'+ce+'" alt="image-20250720172941555"></p><p><img src="'+ge+'" alt="image-20250720172954650"></p><h5 id="redis-7" tabindex="-1">redis 7 <a class="header-anchor" href="#redis-7" aria-label="Permalink to &quot;redis 7&quot;">​</a></h5><p><img src="'+he+'" alt="image-20250720173025379"></p><p><img src="'+ue+'" alt="image-20250720173035219"></p><h4 id="zset-的两种编码格式" tabindex="-1">ZSet 的两种编码格式 <a class="header-anchor" href="#zset-的两种编码格式" aria-label="Permalink to &quot;ZSet 的两种编码格式&quot;">​</a></h4><ul><li>redis 6 <ul><li>ziplist</li><li>skiplist</li></ul></li><li>redis 7 <ul><li>listpack</li><li>skiplist</li></ul></li></ul><h4 id="redis-6-源码分析" tabindex="-1">redis 6 源码分析 <a class="header-anchor" href="#redis-6-源码分析" aria-label="Permalink to &quot;redis 6 源码分析&quot;">​</a></h4><p>t_zset.c</p><p><img src="'+_e+'" alt="image-20250720173208670"></p><p><img src="'+be+'" alt="image-20250720173227370"></p><h4 id="redis-7-源码分析" tabindex="-1">redis 7 源码分析 <a class="header-anchor" href="#redis-7-源码分析" aria-label="Permalink to &quot;redis 7 源码分析&quot;">​</a></h4><p>t_zset.c</p><p><img src="'+ke+'" alt="image-20250720173301672"></p><h3 id="小总结" tabindex="-1">小总结 <a class="header-anchor" href="#小总结" aria-label="Permalink to &quot;小总结&quot;">​</a></h3><h4 id="redis-6-类型-物理编码-对应表" tabindex="-1">redis 6 类型-物理编码-对应表 <a class="header-anchor" href="#redis-6-类型-物理编码-对应表" aria-label="Permalink to &quot;redis 6 类型-物理编码-对应表&quot;">​</a></h4><p><img src="'+qe+'" alt="image-20250720173412806"></p><h4 id="redis-6-数据类型对应的底层数据结构" tabindex="-1">redis 6 数据类型对应的底层数据结构 <a class="header-anchor" href="#redis-6-数据类型对应的底层数据结构" aria-label="Permalink to &quot;redis 6 数据类型对应的底层数据结构&quot;">​</a></h4><ol><li><p>字符串</p><p>int：8个字节的长整型。</p><p>embstr：小于等于44个字节的字符串。</p><p>raw：大于44个字节的字符串。</p><p>Redis会根据当前值的类型和长度决定使用哪种内部编码实现。</p></li><li><p>哈希</p><p>ziplist(压缩列表)：当哈希类型元素个数小于hash-max-ziplist-entries 配置(默认512个)、同时所有值都小于hash-max-ziplist-value配置(默认64 字节)时，Redis会使用ziplist作为哈希的内部实现，ziplist使用更加紧凑的 结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀。</p><p>hashtable(哈希表)：当哈希类型无法满足ziplist的条件时，Redis会使 用hashtable作为哈希的内部实现，因为此时ziplist的读写效率会下降，而hashtable的读写时间复杂度为O(1)。</p></li><li><p>列表</p><p>ziplist(压缩列表)：当列表的元素个数小于list-max-ziplist-entries配置 (默认512个)，同时列表中每个元素的值都小于list-max-ziplist-value配置时 (默认64字节)，Redis会选用ziplist来作为列表的内部实现来减少内存的使用。</p><p>linkedlist(链表)：当列表类型无法满足ziplist的条件时，Redis会使用 linkedlist作为列表的内部实现。quicklist ziplist和linkedlist的结合以ziplist为节点的链表(linkedlist)</p></li><li><p>集合</p><p>intset(整数集合)：当集合中的元素都是整数且元素个数小于set-max-intset-entries配置(默认512个)时，Redis会用intset来作为集合的内部实现，从而减少内存的使用。hashtable(哈希表)：当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</p></li><li><p>有序集合</p><p>ziplist(压缩列表)：当有序集合的元素个数小于zset-max-ziplist- entries配置(默认128个)，同时每个元素的值都小于zset-max-ziplist-value配 置(默认64字节)时，Redis会用ziplist来作为有序集合的内部实现，ziplist 可以有效减少内存的使用。</p><p>skiplist(跳跃表):当ziplist条件不满足时，有序集合会使用skiplist作 为内部实现，因为此时ziplist的读写效率会下降。</p></li></ol><h4 id="redis-6-数据类型以及数据结构的关系" tabindex="-1">redis 6 数据类型以及数据结构的关系 <a class="header-anchor" href="#redis-6-数据类型以及数据结构的关系" aria-label="Permalink to &quot;redis 6 数据类型以及数据结构的关系&quot;">​</a></h4><p><img src="'+Ie+'" alt="image-20250720173713526"></p><h4 id="redis-7数据类型以及数据结构的关系" tabindex="-1">redis 7数据类型以及数据结构的关系 <a class="header-anchor" href="#redis-7数据类型以及数据结构的关系" aria-label="Permalink to &quot;redis 7数据类型以及数据结构的关系&quot;">​</a></h4><p><img src="'+ye+'" alt="image-20250720173754323"></p><h4 id="redis-数据类型以及数据结构的时间复杂度" tabindex="-1">redis 数据类型以及数据结构的时间复杂度 <a class="header-anchor" href="#redis-数据类型以及数据结构的时间复杂度" aria-label="Permalink to &quot;redis 数据类型以及数据结构的时间复杂度&quot;">​</a></h4><p><img src="'+xe+'" alt="image-20250720173829537"></p><h3 id="skiplist面试题" tabindex="-1">skiplist面试题 <a class="header-anchor" href="#skiplist面试题" aria-label="Permalink to &quot;skiplist面试题&quot;">​</a></h3><h4 id="为什么引出跳表" tabindex="-1">为什么引出跳表 <a class="header-anchor" href="#为什么引出跳表" aria-label="Permalink to &quot;为什么引出跳表&quot;">​</a></h4><p>先从一个单链表来讲</p><ul><li><p>对于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。</p></li><li><p>这样查找效率就会很低，时间复杂度会很高O(N)</p><p><img src="'+ze+'" alt="image-20250721162119847"></p></li></ul><h4 id="痛点" tabindex="-1">痛点 <a class="header-anchor" href="#痛点" aria-label="Permalink to &quot;痛点&quot;">​</a></h4><p><img src="'+fe+'" alt="image-20250721162155118"></p><p>解决方法：升维，也叫空间换时间。</p><ul><li><p>优化 1</p><p><img src="'+Se+'" alt="image-20250721162221385"></p><p>这个例子里，我们看出，加来一层索引之后，查找一个结点需要遍历的结点个数减少了，也就是说查找效率提高了。</p></li><li><p>优化 2</p><ul><li><p>画了一个包含 64 个结点的链表，按照前面讲的这种思路，建立了五级索引</p><p><img src="'+Pe+'" alt="image-20250721162337117"></p></li></ul></li></ul><h4 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h4><p>跳表是可以实现二分查找的有序链表</p><p>skiplist是一种以空间换取时间的结构。</p><p>由于链表，无法进行二分查找，因此借鉴数据库索引的思想，提取出链表中关键节点（索引），先在关键节点上查找，再进入下层链表查找，提取多层关键节点，就形成了跳跃表</p><p>但是：由于索引也要占据一定空间的，所以，索引添加的越多，空间占用的越多</p><blockquote><p>总结来讲</p><p>​ 跳表 = 链表 + 多级索引</p></blockquote><h4 id="跳表时间-空间复杂度介绍" tabindex="-1">跳表时间+空间复杂度介绍 <a class="header-anchor" href="#跳表时间-空间复杂度介绍" aria-label="Permalink to &quot;跳表时间+空间复杂度介绍&quot;">​</a></h4><ul><li><p>跳表的时间复杂度</p><p>跳表查询的时间复杂度分析，如果链表里有N个结点，会有多少级索引呢？</p><p>按照我们前面讲的，两两取首。每两个结点会抽出一个结点作为上一级索引的结点，以此估算：</p><p>第一级索引的结点个数大约就是n/2，</p><p>第二级索引的结点个数大约就是n/4，</p><p>第三级索引的结点个数大约就是n/8，依次类推......</p><p>也就是说，第k级索引的结点个数是第k-1级索引的结点个数的1/2，那第k级索引结点的个数就是n/(2^k)</p><p><img src="'+Oe+'" alt="image-20250721162527062"></p><p><img src="'+Re+'" alt="image-20250721162534143"></p><p><img src="'+De+'" alt="image-20250721162543774"></p><p><img src="'+Ee+'" alt="image-20250721162559150"></p><p>时间复杂度是 O(logN)</p></li><li><p>跳表的空间复杂度</p><p>跳表查询的空间复杂度分析</p><p>比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？</p><p>我们来分析一下跳表的空间复杂度。</p><p>第一步：首先原始链表长度为n，</p><p>第二步：两两取首，每层索引的结点数：n/2, n/4, n/8 ... , 8, 4, 2 每上升一级就减少一半，直到剩下2个结点,以此类推；如果我们把每层索引的结点数写出来，就是一个等比数列。</p><p><img src="'+ve+'" alt="image-20250721162654157"></p><p>这几级索引的结点总和就是n/2+n/4+n/8…+8+4+2=n-2。所以，跳表的空间复杂度是O(n) 。也就是说，如果将包含n个结点的单链表构造成跳表，我们需要额外再用接近n个结点的存储空间。</p></li><li><p>优缺点</p><p><strong>优点：</strong></p><p>跳表是一个最典型的空间换时间解决方案，而且只有在数据量较大的情况下才能体现出来优势。而且应该是读多写少的情况下才能使用，所以它的适用范围应该还是比较有限的</p><p><strong>缺点：</strong></p><p>维护成本相对要高，</p><p>在单链表中，一旦定位好要插入的位置，插入结点的时间复杂度是很低的，就是O(1)</p><p>但是：</p><p>新增或者删除时需要把所有索引都更新一遍，为了保证原始链表中数据的有序性，我们需要先找</p><p>到要动作的位置，这个查找操作就会比较耗时最后在新增和删除的过程中的更新，时间复杂度也是O(log n)</p></li></ul>',312)]))}const He=e(je,[["render",Ne]]);export{Ge as __pageData,He as default};
