import{_ as i,c as a,a2 as s,o as l}from"./chunks/framework.3VuPyQdv.js";const o="/docs-demo/redisImages/image-20250416160335729.png",m="/docs-demo/redisImages/image-20250416165241212.png",r="/docs-demo/redisImages/image-20250416165307679.png",t="/docs-demo/redisImages/image-20250416165412427.png",p="/docs-demo/redisImages/image-20250416165619557.png",d="/docs-demo/redisImages/image-20250416165720318.png",g="/docs-demo/redisImages/image-20250416165819294.png",c="/docs-demo/redisImages/image-20250416165901873.png",n="/docs-demo/redisImages/image-20250416170002549.png",_="/docs-demo/redisImages/image-20250416170101192.png",h="/docs-demo/redisImages/image-20250416170152373.png",u="/docs-demo/redisImages/image-20250416170236656.png",I="/docs-demo/redisImages/image-20250416170351266.png",f="/docs-demo/redisImages/image-20250416170415481.png",v="/docs-demo/redisImages/image-20250416170638143.png",b="/docs-demo/redisImages/image-20250418211505189.png",q="/docs-demo/redisImages/image-20250418211822625.png",k="/docs-demo/redisImages/image-20250418224045300.png",P="/docs-demo/redisImages/image-20250418224709693.png",x="/docs-demo/redisImages/image-20250418224817758.png",w="/docs-demo/redisImages/image-20250418224136632.png",B="/docs-demo/redisImages/image-20250418224349195.png",S="/docs-demo/redisImages/image-20250418224431124.png",D="/docs-demo/redisImages/image-20250418225224247.png",$="/docs-demo/redisImages/image-20250418225407582.png",y="/docs-demo/redisImages/image-20250418225601215.png",N="/docs-demo/redisImages/image-20250419130824794.png",R="/docs-demo/redisImages/image-20250419131714791.png",M="/docs-demo/redisImages/image-20250419131834418.png",E="/docs-demo/redisImages/image-20250419131946540.png",G="/docs-demo/redisImages/image-20250419132018603.png",J="/docs-demo/redisImages/image-20250419132033066.png",O="/docs-demo/redisImages/image-20250419132251235.png",U="/docs-demo/redisImages/image-20250419132337419.png",V="/docs-demo/redisImages/image-20250419132140369.png",Y="/docs-demo/redisImages/image-20250419132930604.png",j="/docs-demo/redisImages/image-20250419133730232.png",z="/docs-demo/redisImages/image-20250419134221438.png",W=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/replica.md","filePath":"doc-text/redis/replica.md","lastUpdated":1754641226000}'),A={name:"doc-text/redis/replica.md"};function C(F,e,H,K,L,Q){return l(),a("div",null,e[0]||(e[0]=[s('<h2 id="复制-replica" tabindex="-1">复制（replica） <a class="header-anchor" href="#复制-replica" aria-label="Permalink to &quot;复制（replica）&quot;">​</a></h2><p>就是主从复制，master以写为主，slave以读为主。当master数据变化的时候，自动将新的数据异步同步到其他slave数据库</p><p>优点：</p><ul><li>读写分离</li><li>容灾恢复</li><li>数据备份</li><li>水平扩容支撑高并发</li></ul><p>如何使用</p><ul><li>配从（库）不配主（库）</li><li>权限细节，重要 <ul><li>master 如果配置了 requirepass 参数，需要密码登录</li><li>那么 slave 就要配置 masterauth 来设置校验密码，否则的话 master 会拒绝 slave的访问请求 <ul><li><img src="'+o+'" alt="image-20250416160335729"></li></ul></li></ul></li><li>基本操作命令 <ul><li>info replication：可以查看复制节点的主从关系和配置信息</li><li>replicaof 主库IP 主库端口：一般写入进 redis.conf 配置文件内</li><li>slaveof 主库IP 主库端口 <ul><li>每次与 master 断开之后，都需要重新连接，除非你配置进 redis.conf 文件</li><li>在运行期间修改 slave 节点的信息，如果该数据库已经是某个主数据库的从数据库，那么会停止和原主数据库的同步关系<strong>转而和新的主数据库同步，重新拜主数据库</strong></li></ul></li><li>slaveof no one：使当前数据库停止与其他数据库的同步，<strong>转成主数据库，自立为王</strong></li></ul></li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><ul><li>架构说明 <ul><li>一个 master 两个 slave</li><li>拷贝多个redis.conf 文件 <ul><li>redis6379.conf</li><li>redis6380.conf</li><li>redis6381.conf <ul><li><img src="'+m+'" alt="image-20250416165241212"></li><li><img src="'+r+'" alt="image-20250416165307679"></li><li><img src="'+t+'" alt="image-20250416165412427"></li></ul></li></ul></li><li>修改配置文件 <ul><li>以redis6380为例，redis6381跟redis6380一样 <ul><li><img src="'+p+'" alt="image-20250416165619557"></li><li><img src="'+d+'" alt="image-20250416165720318"></li><li><img src="'+g+'" alt="image-20250416165819294"></li><li><img src="'+c+'" alt="image-20250416165901873"></li><li><img src="'+n+'" alt="image-20250416170002549"></li><li><img src="'+_+'" alt="image-20250416170101192"></li><li><img src="'+h+'" alt="image-20250416170152373"></li><li><img src="'+u+'" alt="image-20250416170236656"></li><li><img src="'+I+'" alt="image-20250416170351266"></li><li><img src="'+f+'" alt="image-20250416170415481"></li><li><img src="'+v+'" alt="image-20250416170638143"></li></ul></li></ul></li><li>效果，启动redis6379、redis6380、redis6381，并查看（如果连接不上试试ping命令 ，看看是否可以和主机ping通，如果ping不通关闭防火墙<code>systemctl stop firewalld</code>） <ul><li>如果端口号不是 6379 启动的时候加上端口号，如果不加默认6379 <ul><li><img src="'+b+'" alt="image-20250418211505189"></li></ul></li><li>启动两个从机 <ul><li><img src="'+q+'" alt="image-20250418211822625"></li><li><img src="'+k+'" alt="image-20250418224045300"></li><li>主机日志查看 连接 <ul><li><img src="'+P+'" alt="image-20250418224709693"></li></ul></li><li>从机日志查看连接 <ul><li><img src="'+x+'" alt="image-20250418224817758"></li></ul></li><li>主机 <ul><li><img src="'+w+'" alt="image-20250418224136632"></li></ul></li><li><img src="'+B+'" alt="image-20250418224349195"></li><li>使用从机访问试试 <ul><li><img src="'+S+'" alt="image-20250418224431124"></li></ul></li></ul></li></ul></li></ul></li></ul><p>问题：</p><ol><li><p>从机可以执行写命令吗？</p><p><img src="'+D+'" alt="image-20250418225224247"></p></li><li><p>从机切入点问题</p><p>slave是从头开始复制还是从切入点开始复制?</p><p>master启动，写到k3</p><p>slave1跟着master同时启动，跟着写到k3</p><p>slave2写到k3后才启动，那之前的是否也可以复制？</p><p>Y，首次一锅端，后续跟随，master写，slave跟</p></li><li><p>主机shutdown后，从机会不会上位</p><p>从机不动，原地待命，从机数据可以正常使用；等待主机重启动归来</p></li><li><p>主机shutdown后，重启后主从关系还在吗？从机还能否顺利复制？</p><p><img src="'+$+'" alt="image-20250418225407582"></p></li><li><p>某台从机down后，master继续，从机重启后它能跟上主机吗？</p><p>可以</p></li></ol><h3 id="命令操作主从关系" tabindex="-1">命令操作主从关系 <a class="header-anchor" href="#命令操作主从关系" aria-label="Permalink to &quot;命令操作主从关系&quot;">​</a></h3><p><img src="'+y+'" alt="image-20250418225601215"></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>配置，持久稳定</p><p>命令，当次生效</p><h3 id="链式复制" tabindex="-1">链式复制 <a class="header-anchor" href="#链式复制" aria-label="Permalink to &quot;链式复制&quot;">​</a></h3><p>上一个slave可以是下一个slave的master，slave同样可以接受其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master，可以有效减轻主master的写压力</p><p>中途变更转向：会清除之前的数据，重新建立拷贝最新的</p><p>我们这三个形成链式结构</p><p><img src="'+N+'" alt="image-20250419130824794"></p><ol><li><p>修改<code>192.168.0.132</code>的配置文件(永久生效)</p><p><img src="'+R+'" alt="image-20250419131714791"></p><p><img src="'+M+'" alt="image-20250419131834418"></p><p>在6379写入信息</p><p><img src="'+E+'" alt="image-20250419131946540"></p><p><img src="'+G+'" alt="image-20250419132018603"></p><p><img src="'+J+'" alt="image-20250419132033066"></p></li><li><p><code>slaveof 主库IP 主库端口</code></p><p><img src="'+O+'" alt="image-20250419132251235"></p><p><img src="'+U+'" alt="image-20250419132337419"></p></li></ol><p>6380的主IP是6379，从IP是6381，6380是否可以写入信息？</p><p><img src="'+V+'" alt="image-20250419132140369"></p><p>不可以！</p><h3 id="从机变主机" tabindex="-1">从机变主机 <a class="header-anchor" href="#从机变主机" aria-label="Permalink to &quot;从机变主机&quot;">​</a></h3><p>可以通过 <code>slaveof no one</code>使当前数据库停止与其他数据库的同步，转成主数据库</p><p><img src="'+Y+'" alt="image-20250419132930604"></p><blockquote><p>注意：</p><p>​ 这个命令不是长期有效的，如果<code>shutdown</code>后，在启动不会生效</p></blockquote><h3 id="复制原理和工作流程" tabindex="-1">复制原理和工作流程 <a class="header-anchor" href="#复制原理和工作流程" aria-label="Permalink to &quot;复制原理和工作流程&quot;">​</a></h3><h4 id="slave启动-同步初请" tabindex="-1">slave启动，同步初请 <a class="header-anchor" href="#slave启动-同步初请" aria-label="Permalink to &quot;slave启动，同步初请&quot;">​</a></h4><p>slave启动成功连接到master后会发送一个sync命令</p><p>slave首次全新连接master，一次完全同步（全量复制）将被自动执行，slave自身原有数据会被master数据覆盖清除</p><h4 id="首次连接-全量复制" tabindex="-1">首次连接，全量复制 <a class="header-anchor" href="#首次连接-全量复制" aria-label="Permalink to &quot;首次连接，全量复制&quot;">​</a></h4><p>master节点收到sync命令后会开始在后台保存快照（即RDB持久化，主从复制时会触发RDB），同时收集所有接受到的用于修改数据集命令缓存起来，master节点执行RDB持久化完后，master将rdb快照文件和所有缓存的命令发送到所有slave，以完成一次完全同步。</p><p>而slave服务在接受到数据库文件数据后，将其存盘并加载到内存中，从而完成复制初始化</p><h4 id="心跳持续-保持通信" tabindex="-1">心跳持续，保持通信 <a class="header-anchor" href="#心跳持续-保持通信" aria-label="Permalink to &quot;心跳持续，保持通信&quot;">​</a></h4><p><code>repl-ping-replica-period 10</code></p><p>master发出PING包的周期，默认是10秒</p><p><img src="'+j+'" alt="image-20250419133730232"></p><h4 id="进入平稳-增量复制" tabindex="-1">进入平稳，增量复制 <a class="header-anchor" href="#进入平稳-增量复制" aria-label="Permalink to &quot;进入平稳，增量复制&quot;">​</a></h4><p>master继续将新的所有收集到的修改命令自动依次传给slave，完成同步</p><h4 id="从机下线-重连续传" tabindex="-1">从机下线，重连续传 <a class="header-anchor" href="#从机下线-重连续传" aria-label="Permalink to &quot;从机下线，重连续传&quot;">​</a></h4><p>master会检查backlog里面的offset，master和slave都会保存一个复制的offset还有一个masterId，offset是保存在backlog中的。<strong>master只会把已经复制的offset后面的数据复制给slave</strong></p><h3 id="复制的缺点" tabindex="-1">复制的缺点 <a class="header-anchor" href="#复制的缺点" aria-label="Permalink to &quot;复制的缺点&quot;">​</a></h3><h4 id="复制延时-信号衰减" tabindex="-1">复制延时，信号衰减 <a class="header-anchor" href="#复制延时-信号衰减" aria-label="Permalink to &quot;复制延时，信号衰减&quot;">​</a></h4><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><p><img src="'+z+'" alt="image-20250419134221438"></p><h4 id="master挂了如何办" tabindex="-1">master挂了如何办？ <a class="header-anchor" href="#master挂了如何办" aria-label="Permalink to &quot;master挂了如何办？&quot;">​</a></h4><p>默认情况下，不会在slave节点中自动重选一个master</p><p>那每次都要人工干预？</p><p><strong>无人值守安装变成刚需</strong></p>',51)]))}const X=i(A,[["render",C]]);export{W as __pageData,X as default};
