import{_ as t,c as i,a2 as a,o as l}from"./chunks/framework.3VuPyQdv.js";const d="/docs-demo/redisImages/image-20250415204940730.png",r="/docs-demo/redisImages/image-20250415205124361.png",s="/docs-demo/redisImages/image-20250415205319774.png",o="/docs-demo/redisImages/image-20250415205925403.png",c="/docs-demo/redisImages/image-20250415210930539.png",n="/docs-demo/redisImages/image-20250415211255820.png",p="/docs-demo/redisImages/image-20250415211808180.png",m="/docs-demo/redisImages/image-20250415214547842.png",h="/docs-demo/redisImages/image-20250415220303463.png",g="/docs-demo/redisImages/image-20250415220543199.png",u="/docs-demo/redisImages/image-20250415220620665.png",R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/redis/事务+管道.md","filePath":"doc-text/redis/事务+管道.md","lastUpdated":1744726250000}'),b={name:"doc-text/redis/事务+管道.md"};function x(_,e,k,q,y,P){return l(),i("div",null,e[0]||(e[0]=[a('<h2 id="redis事务" tabindex="-1">Redis事务 <a class="header-anchor" href="#redis事务" aria-label="Permalink to &quot;Redis事务&quot;">​</a></h2><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<strong>按顺序地串行化而不会被其他命令插入，不许加塞</strong></p><p>能干嘛？</p><p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p><h3 id="redis事务-vs-数据库事务" tabindex="-1">redis事务 vs 数据库事务 <a class="header-anchor" href="#redis事务-vs-数据库事务" aria-label="Permalink to &quot;redis事务 vs 数据库事务&quot;">​</a></h3><table tabindex="0"><thead><tr><th>1 单独的隔离操作</th><th>Redis的事务仅仅是保证事务里的操作会被连续独占的执行，redis命令执行是单线程架构，在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求的</th></tr></thead><tbody><tr><td>2 没有隔离级别的概念</td><td>因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这种问题了</td></tr><tr><td>3不保证原子性</td><td>Redis的事务不保证原子性，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，没有执行到一半进行回滚的能力</td></tr><tr><td>4 排它性</td><td>Redis会保证一个事务内的命令依次执行，而不会被其它命令插入</td></tr></tbody></table><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">discard：取消事务，放弃执行事务块内的所以命令</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">exec：执行所有事务块内的命令</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">multi：标记一个事务块的开始</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">unwatch：取消watch命令对所有key的监视</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">watch key [key....]：监视一个（或多个）key，如果在事务执行之前这个（或这些）key 被其他命令所改动，那么事务将被打断</td></tr></tbody></table><h3 id="正常执行-multi-开启事务-exec-执行事务" tabindex="-1">正常执行(multi(开启事务)+exec(执行事务)) <a class="header-anchor" href="#正常执行-multi-开启事务-exec-执行事务" aria-label="Permalink to &quot;正常执行(multi(开启事务)+exec(执行事务))&quot;">​</a></h3><p><img src="'+d+'" alt="image-20250415204940730"></p><h3 id="放弃事务-discard" tabindex="-1">放弃事务(discard) <a class="header-anchor" href="#放弃事务-discard" aria-label="Permalink to &quot;放弃事务(discard)&quot;">​</a></h3><p><img src="'+r+'" alt="image-20250415205124361"></p><h3 id="在事务中数据报错都不会执行" tabindex="-1">在事务中数据报错都不会执行 <a class="header-anchor" href="#在事务中数据报错都不会执行" aria-label="Permalink to &quot;在事务中数据报错都不会执行&quot;">​</a></h3><p><img src="'+s+'" alt="image-20250415205319774"></p><h3 id="在事务中数据报错了-不影响别的数据执行" tabindex="-1">在事务中数据报错了，不影响别的数据执行 <a class="header-anchor" href="#在事务中数据报错了-不影响别的数据执行" aria-label="Permalink to &quot;在事务中数据报错了，不影响别的数据执行&quot;">​</a></h3><p><img src="'+o+'" alt="image-20250415205925403"></p><p>Redis不提供事务回滚的功能，开发者必须在事务执行出错后，自行恢复数据库状态</p><blockquote><p>注意：</p><p>​ <code>redis</code>事务和传统数据库事务区别，不一定要么一起成功要么一起失败</p></blockquote><h3 id="监控-watch" tabindex="-1">监控（watch） <a class="header-anchor" href="#监控-watch" aria-label="Permalink to &quot;监控（watch）&quot;">​</a></h3><p><code>redis</code>使用watch来提供乐观锁定，类似与<code>CAS</code>（<code>check-and-set</code>）</p><ul><li>悲观锁： <ul><li>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。</li></ul></li><li>乐观锁： <ul><li>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。</li><li>乐观锁策略:提交版本必须 大于 记录当前版本才能执行更新</li></ul></li><li>CAS： <ul><li>在 Redis 中，CAS（Check-And-Set）是一种使用乐观锁来保证数据一致性的方法。它的基本思想是：在执行某个操作之前，先检查数据是否被其他客户端修改过，如果没有，则执行操作；如果有，则放弃操作并重试。</li></ul></li></ul><p>watch：初始化 k1 和 balance 两个 key，先监控在开启 <code>multi</code>，保证两 key 变动在同一事务内</p><p><img src="'+c+'" alt="image-20250415210930539"></p><p>有加塞篡改</p><p><img src="'+n+'" alt="image-20250415211255820"></p><h3 id="unwatch" tabindex="-1">unwatch <a class="header-anchor" href="#unwatch" aria-label="Permalink to &quot;unwatch&quot;">​</a></h3><p>用于取消 WATCH 命令对所有 key 的监视。</p><p><img src="'+p+'" alt="image-20250415211808180"></p><p>一旦执行了exec之前加的监控锁都会被取消掉了</p><p>当客户端连接丢失的时候（比如退出链接），所有东西都会被取消监视</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>开启：以 <code>multi</code>开始一个事务</li><li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由<code>exec</code>命令触发事务</li></ul><h2 id="redis管道-pipeline" tabindex="-1">Redis管道(Pipeline) <a class="header-anchor" href="#redis管道-pipeline" aria-label="Permalink to &quot;Redis管道(Pipeline)&quot;">​</a></h2><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。一个请求会遵循以下步骤：</p><p>1 客户端向服务端发送命令分四步(发送命令→命令排队→命令执行→返回结果)，并监听Socket返回，通常以阻塞模式等待服务端响应。</p><p>2 服务端处理命令，并将结果返回给客户端。</p><p><strong>上述两步称为：Round Trip Time(简称RTT,数据包往返于两端的时间)，问题笔记最下方</strong></p><p><img src="'+m+'" alt="image-20250415214547842"></p><p>如果同时需要执行大量的命令，那么就要等待上一条命令应答后再执行，这中间不仅仅多了RTT（Round Time Trip），而且还频繁调用系统IO，发送网络请求，同时需要redis调用多次read()和write()系统方法，系统方法会将数据从用户态转移到内核态，这样就会对进程上下文有比较大的影响了，性能不太好，o(╥﹏╥)o</p><p>管道是什么？</p><ul><li>Pipline 是为了解决 RTT 往返回时，仅仅是将命令一次性发送，对整个 Redis 的执行不造成其他任何影响</li></ul><p>一句话：</p><ul><li>批处理命令变化优化措施，类似 Redis 的原生批命令（mset和mget）</li></ul><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h3><p><img src="'+h+'" alt="image-20250415220303463"></p><p><img src="'+g+'" alt="image-20250415220543199"></p><p><strong>一定要在 redis 外面执行</strong></p><p><img src="'+u+'" alt="image-20250415220620665"></p><h4 id="总结-1" tabindex="-1">总结： <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p>事务的原子性</p><ul><li>原子性（Atomicity） 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</li><li>一致性（Consistency） 事务开始前和结束后，数据库的完整性约束没有被破坏。比如A向B转账，不可能A扣了钱，B却没收到。</li><li>隔离性（Isolation） 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。 同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</li><li>持久性（Durability） 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li></ul><p>Pipeline与原生批处理命令对比</p><ul><li>原生批量命令是原子性（例如：mset、mget），pipeline 是非原子性</li><li>原生批量命令一次只能执行一种命令，pipeline支持批量执行不同命令</li><li>原生批命令是服务端实现的，而pipeline需要服务端与客户端共同完成</li></ul><p>Pipeline 与事务对比</p><ul><li>事务具有原子性，管道不具有原子性</li><li>管道一次性将多个命令发送到服务器，事务是一条一条的发，事务只有在接收到exec命令后才会执行，管道不会</li><li>执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会</li></ul><p>使用Pipeline注意事项</p><ul><li>pipeline 缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发送异常，将会继续执行后续的指令</li><li>使用 pipeline 组装的命令个数不能太多，不然数据量过大客户端阻塞的时间可能过久，同时服务端此时也被迫回复一个队列答复，占用很多内存。</li></ul>',57)]))}const w=t(b,[["render",x]]);export{R as __pageData,w as default};
