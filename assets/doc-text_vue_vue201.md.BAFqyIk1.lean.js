import{_ as a,c as t,a2 as o,o as r}from"./chunks/framework.3VuPyQdv.js";const d=JSON.parse('{"title":"vue作者：","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/vue/vue201.md","filePath":"doc-text/vue/vue201.md","lastUpdated":1744450410000}'),l={name:"doc-text/vue/vue201.md"};function u(p,e,i,n,v,h){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="vue作者" tabindex="-1">vue作者： <a class="header-anchor" href="#vue作者" aria-label="Permalink to &quot;vue作者：&quot;">​</a></h1><p>​ vue框架是尤雨溪开发的。尤雨溪在就职于谷歌的期间发现常用的angular过于臃肿，所以想自己写一个简单的框架练手，vue就是这样诞生的。</p><p>​ 2014 年 2 月，vue第一次发布在 Github 上，至今已经有8年了，目前核心库依然由尤雨溪维护，其他的子项目由团队成员维护。vue的发行版都是以动漫命名的。</p><h1 id="什么是vue" tabindex="-1">什么是vue？ <a class="header-anchor" href="#什么是vue" aria-label="Permalink to &quot;什么是vue？&quot;">​</a></h1><p>​ 官方给出的解释是：Vue是一套用于构建用户页面的前端框架。</p><h2 id="_1-构建用户页面-用vue往html页面中填充数据-非常方便" tabindex="-1">1.<strong>构建用户页面：用vue往html页面中填充数据，非常方便：</strong> <a class="header-anchor" href="#_1-构建用户页面-用vue往html页面中填充数据-非常方便" aria-label="Permalink to &quot;1.**构建用户页面：用vue往html页面中填充数据，非常方便：**&quot;">​</a></h2><p>​ 前端开发者最主要的工作，就是为了网站的使用者(又称为：网站的用户)构建出美观、舒适、好用的网页。</p><ol><li><p>编写页面结构：使用html超文本标记语言，搭建出网页的内容结构</p></li><li><p>美化样式：使用css样式，美化的可视化效果</p></li><li><p>处理交互：使用JavaScript来操作DOM对象，处理用户和网页之间的交互行为</p></li></ol><p>​ 使用vue构建用户页面，解决了jQuery+模板引擎的诸多痛点，极大提高了前端开发的效率和体验。</p><h2 id="_2-框架" tabindex="-1">2.框架： <a class="header-anchor" href="#_2-框架" aria-label="Permalink to &quot;2.框架：&quot;">​</a></h2><p>​ 框架是一套现成的解决方案，程序员只能遵守框架的规范，去填写自己的业务功能！</p><p>​ 官方给vue的定位是前端框架，因为他提供了构建用户页面的一整套解决方案(俗称vue全家桶)</p><p>​ vue(核心库) vue-router(路由方案) vuex(状态管理方案) vue组件库(快速搭建页面UI效果的方案)</p><p>​ 以及辅助vue项目开发的一系列工具：</p><p>​ vue-cli(npm全局包：一键生成工程化的vue项目-基于webpack、大而全)</p><p>​ vite(npm全局包：一键生成工程化的vue项目-小而巧)</p><p>​ vue-devtools(浏览器插件：辅助调试的工具)</p><p>​ vetur(vscode插件：提供语法高亮和只能提示)</p><p>​</p><p><strong>总结：Vue.js是一套构建用户界面的渐进式框架，Vue 采用自下向上增量开发的设计，其核心库只关注视图层，易于上手。</strong></p><p>​ 同时vue完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p><ol><li><p>MVVM即model，view，viewmodel，它是数据驱动模式，即所有的一切通过操作数据来进行，而尽量避免操作dom树。</p></li><li><p>用户的操作在view通过viewmodel进行数据处理，分情况是否通过ajax与model层进行交互，再返回到view层，在这个过程中</p><p>view和viewmodel的数据双向绑定使得我们完全的摆脱了对dom的繁琐操作，而是专心于对用户的操作进行处理，避免了MVC中</p><p>control层过厚的问题。</p></li></ol><h2 id="扩展资料" tabindex="-1">扩展资料： <a class="header-anchor" href="#扩展资料" aria-label="Permalink to &quot;扩展资料：&quot;">​</a></h2><p>​</p><h2 id="vue在web开发、网站制作中的优势" tabindex="-1"><strong>vue在web开发、网站制作中的优势</strong> <a class="header-anchor" href="#vue在web开发、网站制作中的优势" aria-label="Permalink to &quot;**vue在web开发、网站制作中的优势**&quot;">​</a></h2><ol><li><p>据绑定：vue会根据对应的元素，进行设置元素数据，通过输入框，以及get获取数据等多种方式进行数据的实时绑定，进行网页及应用的数据渲染 。</p></li><li><p>组件式开发：通过vue的模块封装，它可以将一个web开发中设计的各种模块进行拆分，变成单独的组件，然后通过数据绑定，调用对应模版组件，同时传入参数，即可完成对整个项目的开发。</p></li><li><p>简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。</p></li></ol><h2 id="vue的特性" tabindex="-1">vue的特性： <a class="header-anchor" href="#vue的特性" aria-label="Permalink to &quot;vue的特性：&quot;">​</a></h2><h3 id="_1-数据驱动视图" tabindex="-1">1.数据驱动视图 <a class="header-anchor" href="#_1-数据驱动视图" aria-label="Permalink to &quot;1.数据驱动视图&quot;">​</a></h3><h4 id="_1-1-1什么是数据驱动视图" tabindex="-1">1.1.1什么是数据驱动视图？ <a class="header-anchor" href="#_1-1-1什么是数据驱动视图" aria-label="Permalink to &quot;1.1.1什么是数据驱动视图？&quot;">​</a></h4><p>​ 数据的变化会驱动视图自动更新</p><p>​ 在使用了vue的页面中，vue会监听数据的变化，从而自动重新渲染页面的结构</p><blockquote><p>​ <strong>注意：数据驱动视图是单向的数据绑定。</strong></p><p>​ <strong>好处：当页面数据发生变化时，页面会自动重新渲染！</strong></p></blockquote><h4 id="_2-双向数据绑定" tabindex="-1">2.双向数据绑定 <a class="header-anchor" href="#_2-双向数据绑定" aria-label="Permalink to &quot;2.双向数据绑定&quot;">​</a></h4><p>​ 在网页中form表单负责采集数据，Ajax负责提交数据。</p><p>​ 在填写表单时，双向数据绑定可以辅助开发者在不操作DOM的前提下，自动把用户填写的内容同步到数据源中</p><p>​ 好处：开发者不需要手动操作DOM元素，来获取表单元素最新的值！</p><blockquote><h6 id="什么是双向数据绑定" tabindex="-1">什么是双向数据绑定？ <a class="header-anchor" href="#什么是双向数据绑定" aria-label="Permalink to &quot;什么是双向数据绑定？&quot;">​</a></h6><p>​ <strong>1、js数据的变化，会被自动渲染到页面上</strong></p><p>​ <strong>2、页面上表单采集的数据发生的变化的时候，会被vue自动获取到，并更新到js数据中。</strong></p></blockquote>',37)]))}const c=a(l,[["render",u]]);export{d as __pageData,c as default};
