import{_ as o,c as a,a2 as t,o as r}from"./chunks/framework.3VuPyQdv.js";const l="/docs-demo/vue/vue2Images/MVVM%E6%A8%A1%E5%9E%8B.jpeg",i="/docs-demo/vue/vue2Images/MVVM%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png",c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/vue/vue202.md","filePath":"doc-text/vue/vue202.md","lastUpdated":1744072960000}'),s={name:"doc-text/vue/vue202.md"};function M(d,e,n,V,m,v){return r(),a("div",null,e[0]||(e[0]=[t('<h2 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-label="Permalink to &quot;MVVM&quot;">​</a></h2><h3 id="_1-mvvm示意图" tabindex="-1">1.MVVM示意图： <a class="header-anchor" href="#_1-mvvm示意图" aria-label="Permalink to &quot;1.MVVM示意图：&quot;">​</a></h3><p>​ MVVM 是 vue 实现数据驱动视图和双向数据绑定的核心原理。MVVM 指的是 Model、View 和 ViewModel， 它把每个 HTML 页面都拆分成了这三个部分，如图所示：</p><img src="'+l+'" style="zoom:50%;"><p><strong>在 MVVM 概念中：</strong></p><ol><li>Model 表示当前页面渲染时所依赖的数据源。</li><li>View 表示当前页面所渲染的 DOM 结构。</li><li>ViewModel 表示 vue 的实例，它是 MVVM 的核心。</li></ol><h3 id="mvvm工作原理" tabindex="-1">MVVM工作原理： <a class="header-anchor" href="#mvvm工作原理" aria-label="Permalink to &quot;MVVM工作原理：&quot;">​</a></h3><p>​ ViewModel 作为 MVVM 的核心，是它把当前页面的数据源（Model）和页面的结构（View）连接在了一起。</p><img src="'+i+'" style="zoom:80%;"><ol><li><p><strong>当数据源发生变化时，会被 ViewModel 监听到，VM 会根据最新的数据源自动更新页面的结构</strong></p></li><li><p><strong>当表单元素的值发生变化时，也会被 VM 监听到，VM 会把变化过后最新的值自动同步到 Model 数据源中</strong></p></li></ol><h3 id="vue的优势" tabindex="-1">vue的优势： <a class="header-anchor" href="#vue的优势" aria-label="Permalink to &quot;vue的优势：&quot;">​</a></h3><p>​ <strong>MVVM 在 vue中，程序员不需要操作 DOM，程序员只需要把数据维护好即可！(数据驱动视图)</strong></p>',12)]))}const p=o(s,[["render",M]]);export{c as __pageData,p as default};
