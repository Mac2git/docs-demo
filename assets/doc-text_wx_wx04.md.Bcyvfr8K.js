import{_ as s,c as i,a2 as e,o as t}from"./chunks/framework.3VuPyQdv.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx04.md","filePath":"doc-text/wx/wx04.md","lastUpdated":1744538836000}'),l={name:"doc-text/wx/wx04.md"};function h(r,a,n,p,o,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h2 id="_3-wxml、wxss、js逻辑交互" tabindex="-1">3. WXML、WXSS、js逻辑交互 <a class="header-anchor" href="#_3-wxml、wxss、js逻辑交互" aria-label="Permalink to &quot;3. WXML、WXSS、js逻辑交互&quot;">​</a></h2><h3 id="wxml" tabindex="-1">WXML <a class="header-anchor" href="#wxml" aria-label="Permalink to &quot;WXML&quot;">​</a></h3><h3 id="_3-1-什么是-wxml" tabindex="-1">3.1 什么是 WXML <a class="header-anchor" href="#_3-1-什么是-wxml" aria-label="Permalink to &quot;3.1  什么是 WXML&quot;">​</a></h3><p>​ WXML（WeiXin Markup Language）是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网 页开发中的 HTML。</p><h3 id="_3-2-wxml-和-html-的区别" tabindex="-1">3.2 WXML 和 HTML 的区别 <a class="header-anchor" href="#_3-2-wxml-和-html-的区别" aria-label="Permalink to &quot;3.2  WXML 和 HTML 的区别&quot;">​</a></h3><h4 id="_3-2-1-标签名称不同" tabindex="-1">3.2.1 标签名称不同 <a class="header-anchor" href="#_3-2-1-标签名称不同" aria-label="Permalink to &quot;3.2.1 标签名称不同&quot;">​</a></h4><p>​ ● HTML （div, span, img, a）</p><p>​ ● WXML（view, text, image, navigator）</p><h4 id="_3-2-2-属性节点不同" tabindex="-1">3.2.2 属性节点不同 <a class="header-anchor" href="#_3-2-2-属性节点不同" aria-label="Permalink to &quot;3.2.2 属性节点不同&quot;">​</a></h4><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;超链接 &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pages/home/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-2-3-提供了类似于-vue-中的模板语法" tabindex="-1">3.2.3.提供了类似于 Vue 中的模板语法 <a class="header-anchor" href="#_3-2-3-提供了类似于-vue-中的模板语法" aria-label="Permalink to &quot;3.2.3.提供了类似于 Vue 中的模板语法&quot;">​</a></h4><p>​ 数据绑定</p><p>​ 列表渲染</p><p>​ 条件渲染</p><hr><h3 id="wxss" tabindex="-1">WXSS <a class="header-anchor" href="#wxss" aria-label="Permalink to &quot;WXSS&quot;">​</a></h3><h3 id="_3-3什么是-wxss" tabindex="-1">3.3什么是 WXSS <a class="header-anchor" href="#_3-3什么是-wxss" aria-label="Permalink to &quot;3.3什么是 WXSS&quot;">​</a></h3><p>​ WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式，类似于网页开发中的 CSS。</p><h4 id="_3-3-1-wxss-和-css-的区别" tabindex="-1">3.3.1 WXSS 和 CSS 的区别 <a class="header-anchor" href="#_3-3-1-wxss-和-css-的区别" aria-label="Permalink to &quot;3.3.1  WXSS 和 CSS 的区别&quot;">​</a></h4><h4 id="_1新增了-rpx-尺寸单位" tabindex="-1">①新增了 rpx 尺寸单位 <a class="header-anchor" href="#_1新增了-rpx-尺寸单位" aria-label="Permalink to &quot;①新增了 rpx 尺寸单位&quot;">​</a></h4><p>​ CSS 中需要手动进行像素单位换算，例如 rem</p><p>​ WXSS 在底层支持新的尺寸单位 rpx，在不同大小的屏幕上小程序会自动进行换算</p><h4 id="_2提供了全局的样式和局部样式" tabindex="-1">②提供了全局的样式和局部样式 <a class="header-anchor" href="#_2提供了全局的样式和局部样式" aria-label="Permalink to &quot;②提供了全局的样式和局部样式&quot;">​</a></h4><p>​ 项目根目录中的 app.wxss 会作用于所有小程序页面</p><p>​ 局部页面的 .wxss 样式仅对当前页面生效</p><h4 id="_3wxss-仅支持部分-css-选择器" tabindex="-1">③WXSS 仅支持部分 CSS 选择器 <a class="header-anchor" href="#_3wxss-仅支持部分-css-选择器" aria-label="Permalink to &quot;③WXSS 仅支持部分 CSS 选择器&quot;">​</a></h4><p>​ .class 和 #id</p><p>​ element</p><p>​ 并集选择器、后代选择器</p><p>​ ::after 和 ::before 等伪类选择器</p><hr><h3 id="js逻辑交互" tabindex="-1">js逻辑交互 <a class="header-anchor" href="#js逻辑交互" aria-label="Permalink to &quot;js逻辑交互&quot;">​</a></h3><p>​</p><h4 id="_1-小程序中的-js-文件" tabindex="-1">1. 小程序中的 .js 文件 <a class="header-anchor" href="#_1-小程序中的-js-文件" aria-label="Permalink to &quot;1. 小程序中的 .js 文件&quot;">​</a></h4><p>​ 一个项目仅仅提供界面展示是不够的，在小程序中，我们通过 .js 文件来处理用户的操作。例如：响应用户的点击、获取用 户的位置等等。</p><hr><p>​</p><h4 id="_2-小程序中-js-文件的分类" tabindex="-1">2. 小程序中 .js 文件的分类 <a class="header-anchor" href="#_2-小程序中-js-文件的分类" aria-label="Permalink to &quot;2. 小程序中 .js 文件的分类&quot;">​</a></h4><p>​</p><p>​ 小程序中的 JS 文件分为三大类，分别是：</p><h5 id="_1app-js" tabindex="-1">①app.js <a class="header-anchor" href="#_1app-js" aria-label="Permalink to &quot;①app.js&quot;">​</a></h5><p>​ 是整个小程序项目的入口文件，通过调用 App() 函数来启动整个小程序</p><h5 id="_2页面的-js-文件" tabindex="-1">②页面的 .js 文件 <a class="header-anchor" href="#_2页面的-js-文件" aria-label="Permalink to &quot;②页面的 .js 文件&quot;">​</a></h5><p>​ 是页面的入口文件，通过调用 Page() 函数来创建并运行页面</p><p>​ ③普通的 .js 文件</p><p>​ 是普通的功能模块文件，用来封装公共的函数或属性供页面使用</p>`,46)]))}const u=s(l,[["render",h]]);export{c as __pageData,u as default};
