import{_ as n,c as l,a2 as o,j as t,t as d,a as e,G as s,B as p,o as h}from"./chunks/framework.3VuPyQdv.js";const E="/docs-demo/wxImages/%E5%9C%A8data%E4%B8%AD%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%95%B0%E6%8D%AE.png",m="/docs-demo/wxImages/Mustache%E8%AF%AD%E6%B3%95%E7%9A%84%E6%A0%BC%E5%BC%8F.png",c="/docs-demo/wxImages/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%86%85%E5%AE%B9js.png",g="/docs-demo/wxImages/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%86%85%E5%AE%B9html.png",u="/docs-demo/wxImages/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7js.png",b="/docs-demo/wxImages/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7html.png",B="/docs-demo/wxImages/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6js.png",x="/docs-demo/wxImages/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97html.png",A="/docs-demo/wxImages/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6js.png",_="/docs-demo/wxImages/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97html.png",k="/docs-demo/wxImages/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E4%BB%B6.png",f="/docs-demo/wxImages/target%E5%92%8CcurrentTarget%E7%9A%84%E5%8C%BA%E5%88%AB.png",w="/docs-demo/wxImages/bindtap%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F1.png",q="/docs-demo/wxImages/bindtap%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F2.png",y="/docs-demo/wxImages/%E5%9C%A8%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E4%B8%AD%E4%B8%BAdata%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%B5%8B%E5%80%BC.png",C="/docs-demo/wxImages/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82.png",P="/docs-demo/wxImages/data-xxx%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%BC%A0%E5%8F%82.png",D="/docs-demo/wxImages/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E5%8F%82event.target.dataset.%E5%8F%82%E6%95%B0%E5%90%8D.png",F="/docs-demo/wxImages/bindinput%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F1.png",v="/docs-demo/wxImages/bindinput%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F2.png",I="/docs-demo/wxImages/%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%92%8Cdata%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE.png",z="/docs-demo/wxImages/%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%92%8Cdata%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%84.png",j="/docs-demo/wxImages/%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%92%8Cdata%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E7%BE%8E%E5%8C%96%E6%A0%B7%E5%BC%8F.png",M="/docs-demo/wxImages/%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%A1%86%E5%92%8Cdata%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E7%BB%91%E5%AE%9Ainput%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png",T="/docs-demo/wxImages/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%931.png",L="/docs-demo/wxImages/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%9302.png",N="/docs-demo/wxImages/%E7%BB%93%E5%90%88block%E4%BD%BF%E7%94%A8if.png",O="/docs-demo/wxImages/hidden.png",S="/docs-demo/wxImages/for%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93.png",V="/docs-demo/wxImages/%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%BD%93%E5%89%8D%E9%A1%B9%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D.png",$="/docs-demo/wxImages/key%E7%9A%84%E4%BD%BF%E7%94%A8.png",R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx15.md","filePath":"doc-text/wx/wx15.md","lastUpdated":1742700738000}'),H={name:"doc-text/wx/wx15.md"},W={id:"_14-3-2-结合-使用-wx-if",tabindex:"-1"};function X(r,a,G,J,U,K){const i=p("block");return h(),l("div",null,[a[8]||(a[8]=o('<h2 id="_14-wxml模板语法" tabindex="-1">14. WXML模板语法 <a class="header-anchor" href="#_14-wxml模板语法" aria-label="Permalink to &quot;14. WXML模板语法&quot;">​</a></h2><p>​</p><h3 id="_14-1-数据绑定" tabindex="-1">14.1 数据绑定 <a class="header-anchor" href="#_14-1-数据绑定" aria-label="Permalink to &quot;14.1 数据绑定&quot;">​</a></h3><h4 id="_14-1-1-数据绑定的基本原则" tabindex="-1">14.1.1 数据绑定的基本原则 <a class="header-anchor" href="#_14-1-1-数据绑定的基本原则" aria-label="Permalink to &quot;14.1.1  数据绑定的基本原则&quot;">​</a></h4><p>​ ①在 data 中定义数据</p><p>​ ②在 WXML 中使用数据</p><p>​</p><hr><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h4><h4 id="_14-1-2-在-data-中定义页面的数据" tabindex="-1">14.1.2 在 data 中定义页面的数据 <a class="header-anchor" href="#_14-1-2-在-data-中定义页面的数据" aria-label="Permalink to &quot;14.1.2  在 data 中定义页面的数据&quot;">​</a></h4><p>​ 在页面对应的 .js 文件中，把数据定义到 data 对象中即可：</p><p><img src="'+E+`" alt="image-20230302214608481"></p><p>​ 代码：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ info }}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h4 id="_14-1-3-mustache-语法的格式" tabindex="-1">14.1.3 Mustache 语法的格式 <a class="header-anchor" href="#_14-1-3-mustache-语法的格式" aria-label="Permalink to &quot;14.1.3 Mustache 语法的格式&quot;">​</a></h4><p>​ <img src="`+m+'" alt="image-20230302214758893"></p><h4 id="_14-1-4-mustache-语法的应用场景" tabindex="-1">14.1.4 Mustache 语法的应用场景 <a class="header-anchor" href="#_14-1-4-mustache-语法的应用场景" aria-label="Permalink to &quot;14.1.4  Mustache 语法的应用场景&quot;">​</a></h4><p>​ Mustache 语法的主要应用场景如下：</p><p>​ 绑定内容</p><p>​ 绑定属性</p><div class="language-apl vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">apl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">							运算（三元运算、算术运算等）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h4 id="_14-1-5-动态绑定内容" tabindex="-1">14.1.5 动态绑定内容 <a class="header-anchor" href="#_14-1-5-动态绑定内容" aria-label="Permalink to &quot;14.1.5 动态绑定内容&quot;">​</a></h4><p>​ 页面的数据如下：</p><p>​ <img src="'+c+'" alt="image-20230302215103708" style="zoom:67%;"></p><p>​ 页面的结构如下：</p><p>​ <img src="'+g+'" alt="image-20230302215205006" style="zoom:67%;"></p><hr><p>​</p><h4 id="_14-1-6-动态绑定属性" tabindex="-1">14.1.6 动态绑定属性 <a class="header-anchor" href="#_14-1-6-动态绑定属性" aria-label="Permalink to &quot;14.1.6 动态绑定属性&quot;">​</a></h4><p>​ 页面的数据如下：</p><p>​ <img src="'+u+'" alt="image-20230302215303968" style="zoom:67%;"></p><p>​ 页面的结构如下：</p><img src="'+b+'" alt="image-20230302215343465" style="zoom:67%;"><hr><h4 id="_14-1-7-三元运算" tabindex="-1">14.1.7 三元运算 <a class="header-anchor" href="#_14-1-7-三元运算" aria-label="Permalink to &quot;14.1.7 三元运算&quot;">​</a></h4><p>​ 页面的数据如下：</p><p>​ <img src="'+B+'" alt="image-20230302215441371" style="zoom:67%;"></p><p>​ 页面的结构如下：</p><p>​ <img src="'+x+'" alt="image-20230302215605041" style="zoom:67%;"></p><hr><h4 id="_14-1-8-算数运算" tabindex="-1">14.1.8 算数运算 <a class="header-anchor" href="#_14-1-8-算数运算" aria-label="Permalink to &quot;14.1.8 算数运算&quot;">​</a></h4><p>​ 页面的数据如下：</p><p>​ <img src="'+A+'" alt="image-20230302215808434" style="zoom:67%;"></p><p>​ 页面的结构如下：</p><img src="'+_+'" alt="image-20230302215842583" style="zoom:67%;"><hr><h3 id="_14-2-事件" tabindex="-1">14.2 事件 <a class="header-anchor" href="#_14-2-事件" aria-label="Permalink to &quot;14.2 事件&quot;">​</a></h3><p>​</p><h4 id="_14-2-1-什么是事件" tabindex="-1">14.2.1 什么是事件 <a class="header-anchor" href="#_14-2-1-什么是事件" aria-label="Permalink to &quot;14.2.1 什么是事件&quot;">​</a></h4><p>​ 事件是渲染层到逻辑层的通讯方式。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理</p><img src="'+k+'" alt="image-20230302220021498" style="zoom:67%;"><hr><h4 id="_14-2-2-小程序中常用的事件" tabindex="-1">14.2.2 小程序中常用的事件 <a class="header-anchor" href="#_14-2-2-小程序中常用的事件" aria-label="Permalink to &quot;14.2.2 小程序中常用的事件&quot;">​</a></h4><p>​</p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th>绑定方式</th><th style="text-align:left;">事件描述</th></tr></thead><tbody><tr><td style="text-align:left;">tap</td><td>bindtap 或 bind:tap</td><td style="text-align:left;">手指触摸后马上离开，类似于 HTML 中的 click 事件</td></tr><tr><td style="text-align:left;">input</td><td>bindinput 或 bind:input</td><td style="text-align:left;">文本框的输入事件</td></tr><tr><td style="text-align:left;">change</td><td>bindchange 或 bind:change</td><td style="text-align:left;">状态改变时触发</td></tr></tbody></table><hr><h4 id="_14-2-3-事件对象的属性列表" tabindex="-1">14.2.3 事件对象的属性列表 <a class="header-anchor" href="#_14-2-3-事件对象的属性列表" aria-label="Permalink to &quot;14.2.3 事件对象的属性列表&quot;">​</a></h4><p>​ 当事件回调触发的时候，会收到一个事件对象 event，它的详细属性如下表所示：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>事件类型</td></tr><tr><td>timeStamp</td><td>Integer</td><td>页面打开到触发事件所经过的毫秒数</td></tr><tr><td>target</td><td>Object</td><td>触发事件的组件的一些属性值集合</td></tr><tr><td>currentTarget</td><td>Object</td><td>当前组件的一些属性值集合</td></tr><tr><td>detail</td><td>Object</td><td>额外的信息</td></tr><tr><td>touches</td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table><hr><h4 id="_14-2-4-target-和-currenttarget-的区别" tabindex="-1">14.2.4 target 和 currentTarget 的区别 <a class="header-anchor" href="#_14-2-4-target-和-currenttarget-的区别" aria-label="Permalink to &quot;14.2.4 target 和 currentTarget 的区别&quot;">​</a></h4><p>​ target 是触发该事件的源头组件，而 currentTarget 则是当前事件所绑定的组件。举例如下：</p><p>​ <img src="'+f+'" alt="image-20230302220307341" style="zoom:67%;"></p><p>​ 点击内部的按钮时，点击事件以冒泡的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。</p><p>​ 此时，对于外层的 view 来说：</p><p>​ e.target 指向的是触发事件的源头组件，因此，e.target 是内部的按钮组件</p><p>​ e.currentTarget 指向的是当前正在触发事件的那个组件，因此，e.currentTarget 是当前的 view 组件</p><hr><h4 id="_14-2-5-bindtap-的语法格式" tabindex="-1">14.2.5 bindtap 的语法格式 <a class="header-anchor" href="#_14-2-5-bindtap-的语法格式" aria-label="Permalink to &quot;14.2.5 bindtap 的语法格式&quot;">​</a></h4><p>​ 在小程序中，不存在 HTML 中的 onclick 鼠标点击事件，而是通过 tap 事件来响应用户的触摸行为。</p><p>​ ①通过 bindtap，可以为组件绑定 tap 触摸事件，语法如下：</p><p>​ <img src="'+w+'" alt="image-20230302220505144" style="zoom:67%;"></p><p>​ ②在页面的 .js 文件中定义对应的事件处理函数，事件参数通过形参 event（一般简写成 e） 来接收：</p><p>​ <img src="'+q+'" alt="image-20230302220544708" style="zoom:67%;"></p><hr><h4 id="_14-2-6-在事件处理函数中为-data-中的数据赋值" tabindex="-1">14.2.6 在事件处理函数中为 data 中的数据赋值 <a class="header-anchor" href="#_14-2-6-在事件处理函数中为-data-中的数据赋值" aria-label="Permalink to &quot;14.2.6 在事件处理函数中为 data 中的数据赋值&quot;">​</a></h4><p>​ 通过调用 this.setData(dataObject) 方法，可以给页面 data 中的数据重新赋值，示例如下：</p><p>​ <img src="'+y+'" alt="image-20230302220803664" style="zoom:67%;"></p><hr><h4 id="_14-2-7-事件传参" tabindex="-1">14.2.7 事件传参 <a class="header-anchor" href="#_14-2-7-事件传参" aria-label="Permalink to &quot;14.2.7 事件传参&quot;">​</a></h4><h5 id="第一种方式通过-传参" tabindex="-1">第一种方式通过()传参： <a class="header-anchor" href="#第一种方式通过-传参" aria-label="Permalink to &quot;第一种方式通过()传参：&quot;">​</a></h5><p>​ 小程序中的事件传参比较特殊，不能在绑定事件的同时为事件处理函数传递参数。例如，下面的代码将不能正常工作：</p><p>​ <img src="'+C+'" alt="image-20230302220924410" style="zoom:67%;"></p><p>​ 因为小程序会把 bindtap 的属性值，统一当作事件名称来处理，相当于要调用一个名称为 btnHandler(123) 的事件处理函数。</p><h5 id="第二种方式通过data-xx传参" tabindex="-1">第二种方式通过data-xx传参： <a class="header-anchor" href="#第二种方式通过data-xx传参" aria-label="Permalink to &quot;第二种方式通过data-xx传参：&quot;">​</a></h5><p>​ 可以为组件提供 data-* 自定义属性传参，其中 代表的是参数的名字，示例代码如下：</p><p>​</p><p>​ <img src="'+P+'" alt="image-20230302221037861" style="zoom:67%;"></p><p>​ 最终：</p><p>​ info 会被解析为参数的名字</p><p>​ 数值 2 会被解析为参数的值</p><p>​</p><h5 id="获取参数值" tabindex="-1">获取参数值： <a class="header-anchor" href="#获取参数值" aria-label="Permalink to &quot;获取参数值：&quot;">​</a></h5><p>​ 在事件处理函数中，通过 event.target.dataset.参数名 即可获取到具体参数的值，示例代码如下：</p><p>​ <img src="'+D+'" alt="image-20230302221220131" style="zoom:67%;"></p><hr><h4 id="_14-2-8-bindinput-的语法格式" tabindex="-1">14.2.8 bindinput 的语法格式 <a class="header-anchor" href="#_14-2-8-bindinput-的语法格式" aria-label="Permalink to &quot;14.2.8 bindinput 的语法格式&quot;">​</a></h4><p>​ 在小程序中，通过 input 事件来响应文本框的输入事件，语法格式如下：</p><p>​ ①通过 bindinput，可以为文本框绑定输入事件：</p><p>​ <img src="'+F+'" alt="image-20230302221751328" style="zoom:67%;"></p><p>​ ②在页面的 .js 文件中定义事件处理函数：</p><p>​ <img src="'+v+'" alt="image-20230302221829360" style="zoom:67%;"></p><hr><h4 id="_14-2-9-实现文本框和data之间的数据同步" tabindex="-1">14.2.9 实现文本框和data之间的数据同步 <a class="header-anchor" href="#_14-2-9-实现文本框和data之间的数据同步" aria-label="Permalink to &quot;14.2.9 实现文本框和data之间的数据同步&quot;">​</a></h4><h5 id="实现步骤" tabindex="-1">实现步骤： <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤：&quot;">​</a></h5><p>​ ①定义数据</p><p>​ ②渲染结构</p><p>​ ③美化样式</p><p>​ ④绑定 input 事件处理函数</p><h6 id="_1定义数据" tabindex="-1">①定义数据 <a class="header-anchor" href="#_1定义数据" aria-label="Permalink to &quot;①定义数据&quot;">​</a></h6><p>​</p><p>​ <img src="'+I+'" alt="image-20230302222130663" style="zoom:67%;"></p><h6 id="_2渲染结构" tabindex="-1">②渲染结构 <a class="header-anchor" href="#_2渲染结构" aria-label="Permalink to &quot;②渲染结构&quot;">​</a></h6><p>​ <img src="'+z+'" alt="image-20230302222223154" style="zoom:67%;"></p><h6 id="_3美化样式" tabindex="-1">③美化样式 <a class="header-anchor" href="#_3美化样式" aria-label="Permalink to &quot;③美化样式&quot;">​</a></h6><p>​</p><p>​ <img src="'+j+'" alt="image-20230302222344510" style="zoom:67%;"></p><h6 id="_4绑定-input-事件处理函数" tabindex="-1">④绑定 input 事件处理函数 <a class="header-anchor" href="#_4绑定-input-事件处理函数" aria-label="Permalink to &quot;④绑定 input 事件处理函数&quot;">​</a></h6><img src="'+M+'" alt="image-20230302222423626" style="zoom:67%;"><hr><h3 id="_14-3-模板语法-条件渲染" tabindex="-1">14.3 模板语法 -条件渲染 <a class="header-anchor" href="#_14-3-模板语法-条件渲染" aria-label="Permalink to &quot;14.3 模板语法 -条件渲染&quot;">​</a></h3><h4 id="_14-3-1-wx-if" tabindex="-1">14.3.1 wx:if <a class="header-anchor" href="#_14-3-1-wx-if" aria-label="Permalink to &quot;14.3.1 wx:if&quot;">​</a></h4>',125)),t("p",null,'​ 在小程序中，使用 wx:if="'+d(r.condition)+'" 来判断是否需要渲染该代码块：',1),a[9]||(a[9]=t("p",null,[e("​ "),t("img",{src:T,alt:"image-20230302222658506",style:{zoom:"67%"}})],-1)),a[10]||(a[10]=t("p",null,"​ 也可以用 wx:elif 和 wx:else 来添加 else 判断：",-1)),a[11]||(a[11]=t("img",{src:L,alt:"image-20230302222755993",style:{zoom:"67%"}},null,-1)),a[12]||(a[12]=t("hr",null,null,-1)),t("h4",W,[a[0]||(a[0]=e("14.3.2 结合 ")),s(i),a[1]||(a[1]=e(" 使用 wx:if ")),a[2]||(a[2]=t("a",{class:"header-anchor",href:"#_14-3-2-结合-使用-wx-if","aria-label":'Permalink to "14.3.2 结合 <block /> 使用 wx:if"'},"​",-1))]),t("p",null,[a[3]||(a[3]=e("​ 如果要一次性控制多个组件的展示与隐藏，可以使用一个 ")),s(i),a[4]||(a[4]=e(" 标签将多个组件包装起来，并在")),s(i),a[5]||(a[5]=e(" 标签上使用 wx:if 控制属性，示例如下："))]),a[13]||(a[13]=t("p",null,[e("​ "),t("img",{src:N,alt:"image-20230302223102505",style:{zoom:"67%"}})],-1)),t("blockquote",null,[t("p",null,[a[6]||(a[6]=e("注意： ")),s(i),a[7]||(a[7]=e(" 并不是一个组件，它只是一个包裹性质的容器，不会在页面中做任何渲染。"))])]),a[14]||(a[14]=t("hr",null,null,-1)),a[15]||(a[15]=t("h4",{id:"_14-3-3-hidden",tabindex:"-1"},[e("14.3.3 hidden "),t("a",{class:"header-anchor",href:"#_14-3-3-hidden","aria-label":'Permalink to "14.3.3 hidden"'},"​")],-1)),t("p",null,'​ 在小程序中，直接使用 hidden="'+d(r.condition)+'" 也能控制元素的显示与隐藏：',1),a[16]||(a[16]=o('<img src="'+O+'" alt="image-20230302223233492" style="zoom:67%;"><hr><h4 id="_14-3-4-wx-if-与-hidden-的对比" tabindex="-1">14.3.4 wx:if 与 hidden 的对比 <a class="header-anchor" href="#_14-3-4-wx-if-与-hidden-的对比" aria-label="Permalink to &quot;14.3.4 wx:if 与 hidden 的对比&quot;">​</a></h4><h5 id="_1运行方式不同" tabindex="-1">①运行方式不同 <a class="header-anchor" href="#_1运行方式不同" aria-label="Permalink to &quot;①运行方式不同&quot;">​</a></h5><p>​ wx:if 以动态创建和移除元素的方式，控制元素的展示与隐藏</p><p>​ hidden 以切换样式的方式（display: none/block;），控制元素的显示与隐藏</p><h5 id="_2使用建议" tabindex="-1">②使用建议 <a class="header-anchor" href="#_2使用建议" aria-label="Permalink to &quot;②使用建议&quot;">​</a></h5><p>​ 频繁切换时，建议使用 hidden</p><p>​ 控制条件复杂时，建议使用 wx:if 搭配 wx:elif、wx:else 进行展示与隐藏的切换</p><hr><h4 id="_12-4-模板语法-列表渲染" tabindex="-1">12.4 模板语法 - 列表渲染 <a class="header-anchor" href="#_12-4-模板语法-列表渲染" aria-label="Permalink to &quot;12.4 模板语法 - 列表渲染&quot;">​</a></h4><h4 id="_14-4-1-wx-for" tabindex="-1">14.4.1 wx:for <a class="header-anchor" href="#_14-4-1-wx-for" aria-label="Permalink to &quot;14.4.1  wx:for&quot;">​</a></h4><p>​ 通过 wx:for 可以根据指定的数组，循环渲染重复的组件结构，语法示例如下：</p><img src="'+S+'" alt="image-20230302223608411" style="zoom:67%;"><p>​ 默认情况下，当前循环项的索引用 index 表示；当前循环项用 item 表示。</p><hr><h4 id="_14-4-2-手动指定索引和当前项的变量名" tabindex="-1">14.4.2 手动指定索引和当前项的变量名 <a class="header-anchor" href="#_14-4-2-手动指定索引和当前项的变量名" aria-label="Permalink to &quot;14.4.2 手动指定索引和当前项的变量名&quot;">​</a></h4><p>​ 使用 wx:for-index 可以指定当前循环项的索引的变量名</p><p>​ 使用 wx:for-item 可以指定当前项的变量名</p><p>​ 示例代码如下：</p><img src="'+V+'" alt="image-20230302223754872" style="zoom:67%;"><hr><h4 id="_14-4-3-wx-key-的使用" tabindex="-1">14.4.3 wx:key 的使用 <a class="header-anchor" href="#_14-4-3-wx-key-的使用" aria-label="Permalink to &quot;14.4.3  wx:key 的使用&quot;">​</a></h4><p>​ 类似于 Vue 列表渲染中的 :key，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的 key 值，从而提高渲染的效率，示例代码如下：</p><p>​ <img src="'+$+'" alt="image-20230302223916385" style="zoom:67%;"></p>',25))])}const Y=n(H,[["render",X]]);export{R as __pageData,Y as default};
