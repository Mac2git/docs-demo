import{_ as p,c as r,a2 as x,o as a}from"./chunks/framework.3VuPyQdv.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx17.md","filePath":"doc-text/wx/wx17.md","lastUpdated":1744450383000}'),e={name:"doc-text/wx/wx17.md"};function d(o,t,h,i,n,s){return a(),r("div",null,t[0]||(t[0]=[x('<h2 id="_16-wxss-模板样式-rpx" tabindex="-1">16. WXSS 模板样式 - rpx <a class="header-anchor" href="#_16-wxss-模板样式-rpx" aria-label="Permalink to &quot;16. WXSS 模板样式 - rpx&quot;">​</a></h2><h4 id="_16-1-1-什么是-rpx-尺寸单位" tabindex="-1">16.1.1 什么是 rpx 尺寸单位 <a class="header-anchor" href="#_16-1-1-什么是-rpx-尺寸单位" aria-label="Permalink to &quot;16.1.1 什么是 rpx 尺寸单位&quot;">​</a></h4><p>​ rpx（responsive pixel）是微信小程序独有的，用来解决屏适配的尺寸单位。</p><hr><h4 id="_16-1-2-rpx-的实现原理" tabindex="-1">16.1.2. rpx 的实现原理 <a class="header-anchor" href="#_16-1-2-rpx-的实现原理" aria-label="Permalink to &quot;16.1.2. rpx 的实现原理&quot;">​</a></h4><p>​ rpx 的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把所有设备的屏幕，在宽度上等分为 750 份（即：当前屏幕的总宽度为 750rpx）。</p><p>​ 在较小的设备上，1rpx 所代表的宽度较小</p><p>​ 在较大的设备上，1rpx 所代表的宽度较大</p><p>​ 小程序在不同设备上运行的时候，会自动把 rpx 的样式单位换算成对应的像素单位来渲染，从而实现屏幕适配。</p><hr><h4 id="_16-1-3-rpx-与-px-之间的单位换算" tabindex="-1">16.1.3. rpx 与 px 之间的单位换算/* <a class="header-anchor" href="#_16-1-3-rpx-与-px-之间的单位换算" aria-label="Permalink to &quot;16.1.3. rpx 与 px 之间的单位换算/*&quot;">​</a></h4><p>​ 在 iPhone6 上，屏幕宽度为375px，共有 750 个物理像素，等分为 750rpx。则：</p><p>​</p><p>​ 750rpx = 375px = 750 物理像素</p><p>​ 1rpx = 0.5px = 1物理像素</p><table tabindex="0"><thead><tr><th>设备</th><th>rpx换算px (屏幕宽度/750)</th><th>px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td>iPhone5</td><td>1rpx = 0.42px</td><td>1px = 2.34rpx</td></tr><tr><td>iPhone6</td><td>1rpx = 0.5px</td><td>1px = 2rpx</td></tr><tr><td>iPhone6 Plus</td><td>1rpx = 0.552px</td><td>1px = 1.81rpx</td></tr></tbody></table><p>​ 官方建议：开发微信小程序时，设计师可以用 iPhone6 作为视觉稿的标准。</p><p>​ 开发举例：在 iPhone6 上如果要绘制宽100px，高20px的盒子，换算成rpx单位，宽高分别为 200rpx 和 40rpx。</p>',18)]))}const _=p(e,[["render",d]]);export{c as __pageData,_ as default};
