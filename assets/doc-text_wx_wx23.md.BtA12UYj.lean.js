import{_ as n,c as d,a2 as s,j as e,a,G as i,B as r,o}from"./chunks/framework.3VuPyQdv.js";const p="/docs-demo/wxImages/%E5%AF%BC%E8%88%AA%E5%88%B0tabBar%E9%A1%B5%E9%9D%A2.png",h="/docs-demo/wxImages/%E5%AF%BC%E8%88%AA%E5%88%B0%E9%9D%9EtabBar%E9%A1%B5%E9%9D%A2.png",g="/docs-demo/wxImages/%E5%90%8E%E9%80%80%E5%AF%BC%E8%88%AA.png",x="/docs-demo/wxImages/%E5%AF%BC%E8%88%AA%E5%88%B0tabBar%E9%A1%B5%E9%9D%A2(%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA).png",E="/docs-demo/wxImages/%E5%AF%BC%E8%88%AA%E5%88%B0%E9%9D%9EtabBar%E9%A1%B5%E9%9D%A2(%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA).png",m="/docs-demo/wxImages/%E5%90%8E%E9%80%80%E5%AF%BC%E8%88%AA(%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA).png",c="/docs-demo/wxImages/%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%AF%BC%E8%88%AA%E4%BC%A0%E5%8F%82.png",f="/docs-demo/wxImages/%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA%E4%BC%A0%E5%8F%82.png",y="/docs-demo/wxImages/%E5%9C%A8onLoad%E4%B8%AD%E6%8E%A5%E6%94%B6%E5%AF%BC%E8%88%AA%E5%8F%82%E6%95%B0.png",b="/docs-demo/wxImages/%E7%9B%91%E5%90%AC%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E4%BA%8B%E4%BB%B6.png",u="/docs-demo/wxImages/%E8%A7%A6%E5%8F%91%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E4%BA%8B%E4%BB%B6.png",k="/docs-demo/wxImages/%E5%81%9C%E6%AD%A2%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E7%9A%84%E6%95%88%E6%9E%9C.png",B="/docs-demo/wxImages/%E7%9B%91%E5%90%AC%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%B8%8A%E6%8B%89%E8%A7%A6%E5%BA%95%E4%BA%8B%E4%BB%B6.png",A="/docs-demo/wxImages/%E4%B8%8A%E6%8B%89%E8%A7%A6%E5%BA%95%E6%A1%88%E4%BE%8B.png",q="/docs-demo/wxImages/%E5%AE%9A%E4%B9%89%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2%E7%9A%84%E5%8A%9E%E6%B3%95.png",w="/docs-demo/wxImages/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%97%B6%E8%8E%B7%E5%8F%96%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE.png",_="/docs-demo/wxImages/%E6%B8%B2%E6%9F%93UI%E7%BB%93%E6%9E%84%E5%B9%B6%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C.png",C="/docs-demo/wxImages/%E4%B8%8A%E6%8B%89%E8%A7%A6%E5%BA%95%E6%97%B6%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2.png",F="/docs-demo/wxImages/%E6%B7%BB%E5%8A%A0loading%E6%8F%90%E7%A4%BA%E6%95%88%E6%9E%9C.png",O=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx23.md","filePath":"doc-text/wx/wx23.md","lastUpdated":1745056071000}'),v={name:"doc-text/wx/wx23.md"};function P(I,t,D,j,z,T){const l=r("navigator");return o(),d("div",null,[t[8]||(t[8]=s('<h2 id="_22-页面导航" tabindex="-1">22.页面导航 <a class="header-anchor" href="#_22-页面导航" aria-label="Permalink to &quot;22.页面导航&quot;">​</a></h2><h4 id="_22-1-1-什么是页面导航" tabindex="-1">22.1.1 什么是页面导航 <a class="header-anchor" href="#_22-1-1-什么是页面导航" aria-label="Permalink to &quot;22.1.1 什么是页面导航&quot;">​</a></h4><p>​ 页面导航指的是页面之间的相互跳转。例如，浏览器中实现页面导航的方式有如下两种：</p><p>​ ①<a></a> 链接</p><p>​ ②location.href</p><hr><h4 id="_22-2-2小程序中实现页面导航的两种方式" tabindex="-1">22.2 .2小程序中实现页面导航的两种方式 <a class="header-anchor" href="#_22-2-2小程序中实现页面导航的两种方式" aria-label="Permalink to &quot;22.2 .2小程序中实现页面导航的两种方式&quot;">​</a></h4><p>​</p><p>​ ① 声明式导航</p>',9)),e("p",null,[t[0]||(t[0]=a("​ 在页面上声明一个 ")),i(l),t[1]||(t[1]=a(" 导航组件"))]),e("p",null,[t[2]||(t[2]=a("​ 通过点击 ")),i(l),t[3]||(t[3]=a(" 组件实现页面跳转"))]),t[9]||(t[9]=e("p",null,"​ ② 编程式导航",-1)),t[10]||(t[10]=e("p",null,"​ 调用小程序的导航 API，实现页面的跳转",-1)),t[11]||(t[11]=e("hr",null,null,-1)),t[12]||(t[12]=e("h4",{id:"_22-3-页面导航-声明式导航",tabindex:"-1"},[a("22.3 页面导航 - 声明式导航 "),e("a",{class:"header-anchor",href:"#_22-3-页面导航-声明式导航","aria-label":'Permalink to "22.3 页面导航 - 声明式导航"'},"​")],-1)),t[13]||(t[13]=e("h5",{id:"_22-3-1-导航到-tabbar-页面",tabindex:"-1"},[a("22.3.1. 导航到 tabBar 页面 "),e("a",{class:"header-anchor",href:"#_22-3-1-导航到-tabbar-页面","aria-label":'Permalink to "22.3.1. 导航到 tabBar 页面"'},"​")],-1)),t[14]||(t[14]=e("p",null,"​ tabBar 页面指的是被配置为 tabBar 的页面。",-1)),e("p",null,[t[4]||(t[4]=a("​ 在使用 ")),i(l),t[5]||(t[5]=a(" 组件跳转到指定的 tabBar 页面时，需要指定 url 属性和 open-type 属性，其中："))]),t[15]||(t[15]=e("p",null,"​ url 表示要跳转的页面的地址，必须以 / 开头",-1)),t[16]||(t[16]=e("p",null,"​ open-type 表示跳转的方式，必须为 switchTab",-1)),t[17]||(t[17]=e("p",null,"​ 示例代码如下：",-1)),t[18]||(t[18]=e("img",{src:p,alt:"image-20230310232805319",style:{zoom:"50%"}},null,-1)),t[19]||(t[19]=e("hr",null,null,-1)),t[20]||(t[20]=e("h5",{id:"_22-3-2-导航到非-tabbar-页面",tabindex:"-1"},[a("22.3.2 导航到非 tabBar 页面 "),e("a",{class:"header-anchor",href:"#_22-3-2-导航到非-tabbar-页面","aria-label":'Permalink to "22.3.2 导航到非 tabBar 页面"'},"​")],-1)),t[21]||(t[21]=e("p",null,"​ 非 tabBar 页面指的是没有被配置为 tabBar 的页面。",-1)),e("p",null,[t[6]||(t[6]=a("​ 在使用 ")),i(l),t[7]||(t[7]=a(" 组件跳转到普通的非 tabBar 页面时，则需要指定 url 属性和 open-type 属性，其中："))]),t[22]||(t[22]=s('<p>​ url 表示要跳转的页面的地址，必须以 / 开头</p><p>​ open-type 表示跳转的方式，必须为 navigate</p><p>​ 示例代码如下：</p><img src="'+h+'" alt="image-20230310232952363" style="zoom:50%;"><blockquote><p>注意：为了简便，在导航到非 tabBar 页面时，open-type=&quot;navigate&quot; 属性可以省略。</p></blockquote><hr><h5 id="_22-3-3-后退导航" tabindex="-1">22.3.3 后退导航 <a class="header-anchor" href="#_22-3-3-后退导航" aria-label="Permalink to &quot;22.3.3 后退导航&quot;">​</a></h5><p>​ 如果要后退到上一页面或多级页面，则需要指定 open-type 属性和 delta 属性，其中：</p><p>​ open-type 的值必须是 navigateBack，表示要进行后退导航</p><p>​ delta 的值必须是数字，表示要后退的层级</p><p>​ 示例代码如下：</p><img src="'+g+'" alt="image-20230310233131857" style="zoom:67%;"><blockquote><p>注意：为了简便，如果只是后退到上一页面，则可以省略 delta 属性，因为其默认值就是 1。</p></blockquote><hr><h4 id="_22-4-页面导航-编程式导航" tabindex="-1">22.4 页面导航 - 编程式导航 <a class="header-anchor" href="#_22-4-页面导航-编程式导航" aria-label="Permalink to &quot;22.4 页面导航 - 编程式导航&quot;">​</a></h4><h5 id="_22-4-1-导航到-tabbar-页面" tabindex="-1">22.4.1 导航到 tabBar 页面 <a class="header-anchor" href="#_22-4-1-导航到-tabbar-页面" aria-label="Permalink to &quot;22.4.1 导航到 tabBar 页面&quot;">​</a></h5><p>​ 调用 wx.switchTab(Object object) 方法，可以跳转到 tabBar 页面。其中 Object 参数对象的属性列表如下：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的 tabBar 页面的路径，路径后不能带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p>​ 示例代码如下：</p><img src="'+x+'" alt="image-20230310233340259" style="zoom:50%;"><hr><h5 id="_22-4-2-导航到非-tabbar-页面" tabindex="-1">22.4.2 导航到非 tabBar 页面 <a class="header-anchor" href="#_22-4-2-导航到非-tabbar-页面" aria-label="Permalink to &quot;22.4.2 导航到非 tabBar 页面&quot;">​</a></h5><p>​ 调用 wx.navigateTo(Object object) 方法，可以跳转到非 tabBar 的页面。其中 Object 参数对象的属性列表如下：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转到的非 tabBar 页面的路径，路径后可以带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p>​ 示例代码如下：</p><img src="'+E+'" alt="image-20230310233504066" style="zoom:67%;"><hr><h5 id="_22-4-3-后退导航" tabindex="-1">22.4.3 后退导航 <a class="header-anchor" href="#_22-4-3-后退导航" aria-label="Permalink to &quot;22.4.3 后退导航&quot;">​</a></h5><p>​</p><p>​ 调用 wx.navigateBack(Object object) 方法，可以返回上一页面或多级页面。其中 Object 参数对象可选的属性列表如下：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>delta</td><td>number</td><td>1</td><td>否</td><td>返回的页面数，如果 delta 大于现有页面数，则返回到首页</td></tr><tr><td>success</td><td>function</td><td></td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td></td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td></td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p>​</p><p>​ 示例代码如下：</p><p>​ <img src="'+m+'" alt="image-20230310233621532" style="zoom:67%;"></p><hr><h4 id="_22-5-页面导航-导航传参" tabindex="-1">22.5 页面导航 - 导航传参 <a class="header-anchor" href="#_22-5-页面导航-导航传参" aria-label="Permalink to &quot;22.5 页面导航 - 导航传参&quot;">​</a></h4><p>​</p><h5 id="_22-5-1-声明式导航传参" tabindex="-1">22.5.1 声明式导航传参 <a class="header-anchor" href="#_22-5-1-声明式导航传参" aria-label="Permalink to &quot;22.5.1 声明式导航传参&quot;">​</a></h5><p>​ navigator 组件的 url 属性用来指定将要跳转到的页面的路径。同时，路径的后面还可以携带参数：</p><p>​ 参数与路径之间使用 ? 分隔</p><p>​ 参数键与参数值用 = 相连</p><p>​ 不同参数用 &amp; 分隔</p><p>​ 代码示例如下：</p><img src="'+c+'" alt="image-20230310233802478" style="zoom:67%;"><hr><h5 id="_22-5-2-编程式导航传参" tabindex="-1">22.5.2 编程式导航传参 <a class="header-anchor" href="#_22-5-2-编程式导航传参" aria-label="Permalink to &quot;22.5.2 编程式导航传参&quot;">​</a></h5><p>​ 调用 wx.navigateTo(Object object) 方法跳转页面时，也可以携带参数，代码示例如下：</p><p>​</p><p>​ <img src="'+f+'" alt="image-20230310233911335" style="zoom:67%;"></p><hr><h5 id="_22-5-3-在-onload-中接收导航参数" tabindex="-1">22.5.3 在 onLoad 中接收导航参数 <a class="header-anchor" href="#_22-5-3-在-onload-中接收导航参数" aria-label="Permalink to &quot;22.5.3 在 onLoad 中接收导航参数&quot;">​</a></h5><p>​ 通过声明式导航传参或编程式导航传参所携带的参数，可以直接在 onLoad 事件中直接获取到，示例代码如下</p><p>​ <img src="'+y+'" alt="image-20230310234015614" style="zoom:67%;"></p><hr><h3 id="_22-6-页面事件" tabindex="-1">22.6 页面事件 <a class="header-anchor" href="#_22-6-页面事件" aria-label="Permalink to &quot;22.6 页面事件&quot;">​</a></h3><hr><h4 id="_22-7页面事件-下拉刷新事件" tabindex="-1">22.7页面事件 - 下拉刷新事件 <a class="header-anchor" href="#_22-7页面事件-下拉刷新事件" aria-label="Permalink to &quot;22.7页面事件 - 下拉刷新事件&quot;">​</a></h4><h5 id="_22-7-1-什么是下拉刷新" tabindex="-1">22.7.1 什么是下拉刷新 <a class="header-anchor" href="#_22-7-1-什么是下拉刷新" aria-label="Permalink to &quot;22.7.1 什么是下拉刷新&quot;">​</a></h5><p>​ 下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行为。</p><hr><p>​ 22.7.2 启用下拉刷新</p><p>​ 启用下拉刷新有两种方式：</p><p>​ ①全局开启下拉刷新</p><p>​ 在 app.json 的 window 节点中，将 enablePullDownRefresh 设置为 true</p><p>​ ②局部开启下拉刷新</p><p>​ 在页面的 .json 配置文件中，将 enablePullDownRefresh 设置为 true</p><p>在实际开发中，推荐使用第 2 种方式，为需要的页面单独开启下拉刷新的效果。</p><hr><h5 id="_22-7-3-配置下拉刷新窗口的样式" tabindex="-1">22.7.3 配置下拉刷新窗口的样式 <a class="header-anchor" href="#_22-7-3-配置下拉刷新窗口的样式" aria-label="Permalink to &quot;22.7.3 配置下拉刷新窗口的样式&quot;">​</a></h5><p>​ 在全局或页面的 .json 配置文件中，通过 backgroundColor 和 backgroundTextStyle 来配置下拉刷新窗口的样式，其中：</p><p>​ backgroundColor 用来配置下拉刷新窗口的背景颜色，仅支持16 进制的颜色值</p><p>​ backgroundTextStyle 用来配置下拉刷新 loading 的样式，仅支持 dark 和 light</p><hr><h5 id="_22-7-4-监听页面的下拉刷新事件" tabindex="-1">22.7.4 监听页面的下拉刷新事件 <a class="header-anchor" href="#_22-7-4-监听页面的下拉刷新事件" aria-label="Permalink to &quot;22.7.4 监听页面的下拉刷新事件&quot;">​</a></h5><p>​ 在页面的 .js 文件中，通过 onPullDownRefresh() 函数即可监听当前页面的下拉刷新事件。</p><p>​ 例如，在页面的 wxml 中有如下的 UI 结构，点击按钮可以让 count 值自增 +1：</p><p>​ <img src="'+b+'" alt="image-202		30310234523079" style="zoom:67%;"></p><p>​ 在触发页面的下拉刷新事件的时候，如果要把 count 的值重置为 0，示例代码如下：</p><p>​ <img src="'+u+'" alt="image-20230310234601318" style="zoom:67%;"></p><hr><h5 id="_22-7-5-停止下拉刷新的效果" tabindex="-1">22.7.5 停止下拉刷新的效果 <a class="header-anchor" href="#_22-7-5-停止下拉刷新的效果" aria-label="Permalink to &quot;22.7.5 停止下拉刷新的效果&quot;">​</a></h5><p>​ 当处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，不会主动消失，所以需要手动隐藏下拉刷新的 loading 效果。此时，调用 wx.stopPullDownRefresh() 可以停止当前页面的下拉刷新。示例代码如下：</p><p>​ <img src="'+k+'" alt="image-20230310234717784" style="zoom:67%;"></p><hr><h4 id="_22-8-页面事件-上拉触底事件" tabindex="-1">22.8 页面事件 - 上拉触底事件 <a class="header-anchor" href="#_22-8-页面事件-上拉触底事件" aria-label="Permalink to &quot;22.8 页面事件 - 上拉触底事件&quot;">​</a></h4><h5 id="_1-什么是上拉触底" tabindex="-1">1. 什么是上拉触底 <a class="header-anchor" href="#_1-什么是上拉触底" aria-label="Permalink to &quot;1. 什么是上拉触底&quot;">​</a></h5><p>​ 上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。</p><p>​</p><hr><h5 id="_2-监听页面的上拉触底事件" tabindex="-1">2. 监听页面的上拉触底事件 <a class="header-anchor" href="#_2-监听页面的上拉触底事件" aria-label="Permalink to &quot;2. 监听页面的上拉触底事件&quot;">​</a></h5><p>​ 在页面的 .js 文件中，通过 onReachBottom() 函数即可监听当前页面的上拉触底事件。示例代码如下：</p><p>​ <img src="'+B+`" alt="image-20230310234855889" style="zoom:67%;"></p><hr><h5 id="_3-配置上拉触底距离" tabindex="-1">3. 配置上拉触底距离 <a class="header-anchor" href="#_3-配置上拉触底距离" aria-label="Permalink to &quot;3. 配置上拉触底距离&quot;">​</a></h5><p>​ 上拉触底距离指的是触发上拉触底事件时，滚动条距离页面底部的距离。</p><p>​ 可以在全局或页面的 .json 配置文件中，通过 onReachBottomDistance 属性来配置上拉触底的距离。</p><p>​ 小程序默认的触底距离是 50px，在实际开发中，可以根据自己的需求修改这个默认值。</p><p>​</p><hr><h5 id="_4-消息提示框" tabindex="-1">4. 消息提示框 <a class="header-anchor" href="#_4-消息提示框" aria-label="Permalink to &quot;4. 消息提示框&quot;">​</a></h5><p>​ 参数</p><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:left;">title</td><td style="text-align:left;">string</td><td style="text-align:left;"></td><td style="text-align:left;">是</td><td style="text-align:left;">提示的内容</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">icon</td><td style="text-align:left;">string</td><td style="text-align:left;">success</td><td style="text-align:left;">否</td><td style="text-align:left;">图标</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">success</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">显示成功图标，此时 title 文本最多显示 7 个汉字长度</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">error</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">显示失败图标，此时 title 文本最多显示 7 个汉字长度</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">loading</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">显示加载图标，此时 title 文本最多显示 7 个汉字长度</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">none</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">不显示图标，此时 title 文本最多可显示两行，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noreferrer">1.9.0</a>及以上版本支持</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">image</td><td style="text-align:left;">string</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">自定义图标的本地路径，image 的优先级高于 icon</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">duration</td><td style="text-align:left;">number</td><td style="text-align:left;">1500</td><td style="text-align:left;">否</td><td style="text-align:left;">提示的延迟时间</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">mask</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">否</td><td style="text-align:left;">是否显示透明蒙层，防止触摸穿透</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">success</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">fail</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;">complete</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td><td style="text-align:center;"></td></tr></tbody></table><p>代码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>注意</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html" target="_blank" rel="noreferrer">wx.showLoading</a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html" target="_blank" rel="noreferrer">wx.showToast</a> 同时只能显示一个</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html" target="_blank" rel="noreferrer">wx.showToast</a> 应与 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html" target="_blank" rel="noreferrer">wx.hideToast</a> 配对使用</li></ul></blockquote><p>​</p><hr><p>​</p><h5 id="_5-显示-loading-提示框" tabindex="-1">5.显示 loading 提示框 <a class="header-anchor" href="#_5-显示-loading-提示框" aria-label="Permalink to &quot;5.显示 loading 提示框&quot;">​</a></h5><p>​ 显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框</p><p>​ 参数：</p><p>​</p><table tabindex="0"><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">title</td><td style="text-align:left;">string</td><td style="text-align:left;"></td><td style="text-align:left;">是</td><td style="text-align:left;">提示的内容</td></tr><tr><td style="text-align:left;">mask</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">否</td><td style="text-align:left;">是否显示透明蒙层，防止触摸穿透</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p>示例代码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;加载中&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hideLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>注意</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html" target="_blank" rel="noreferrer">wx.showLoading</a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html" target="_blank" rel="noreferrer">wx.showToast</a> 同时只能显示一个</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html" target="_blank" rel="noreferrer">wx.showLoading</a> 应与 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html" target="_blank" rel="noreferrer">wx.hideLoading</a> 配对使用</li></ul></blockquote><hr><h5 id="_6-隐藏消息提示框" tabindex="-1">6.隐藏消息提示框 <a class="header-anchor" href="#_6-隐藏消息提示框" aria-label="Permalink to &quot;6.隐藏消息提示框&quot;">​</a></h5><p>​</p><p>​ 参数：</p><table tabindex="0"><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th><th style="text-align:left;">最低版本</th></tr></thead><tbody><tr><td style="text-align:left;">noConflict</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">否</td><td style="text-align:left;">目前 toast 和 loading 相关接口可以相互混用，此参数可用于取消混用特性</td><td style="text-align:left;"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noreferrer">2.22.1</a></td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">function</td><td style="text-align:left;"></td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td><td style="text-align:left;"></td></tr></tbody></table><hr><h4 id="页面事件-上拉触底案例" tabindex="-1">页面事件 - 上拉触底案例 <a class="header-anchor" href="#页面事件-上拉触底案例" aria-label="Permalink to &quot;页面事件 - 上拉触底案例&quot;">​</a></h4><h5 id="_1-案例效果展示" tabindex="-1">1. 案例效果展示 <a class="header-anchor" href="#_1-案例效果展示" aria-label="Permalink to &quot;1. 案例效果展示&quot;">​</a></h5><p>​ <img src="`+A+'" alt="image-20230310235058179" style="zoom:67%;"></p><hr><h5 id="_2-案例的实现步骤" tabindex="-1">2. 案例的实现步骤 <a class="header-anchor" href="#_2-案例的实现步骤" aria-label="Permalink to &quot;2. 案例的实现步骤&quot;">​</a></h5><p>​ ①定义获取随机颜色的方法</p><p>​ ②在页面加载时获取初始数据</p><p>​ ③渲染 UI 结构并美化页面效果</p><p>​ ④在上拉触底时调用获取随机颜色的方法</p><p>​ ⑤添加 loading 提示效果</p><p>​ ⑥对上拉触底进行节流处理</p><hr><h5 id="_3-步骤1-定义获取随机颜色的方法" tabindex="-1">3. 步骤1 - 定义获取随机颜色的方法 <a class="header-anchor" href="#_3-步骤1-定义获取随机颜色的方法" aria-label="Permalink to &quot;3. 步骤1 - 定义获取随机颜色的方法&quot;">​</a></h5><p>​ <img src="'+q+'" alt="image-20230310235234957" style="zoom:67%;"></p><hr><h5 id="_3-步骤2-在页面加载时获取初始数据" tabindex="-1">3. 步骤2 - 在页面加载时获取初始数据 <a class="header-anchor" href="#_3-步骤2-在页面加载时获取初始数据" aria-label="Permalink to &quot;3. 步骤2 - 在页面加载时获取初始数据&quot;">​</a></h5><p>​ <img src="'+w+'" alt="image-20230310235323155" style="zoom:67%;"></p><hr><p>​</p><h5 id="_3-步骤3-渲染-ui-结构并美化页面效果" tabindex="-1">3. 步骤3 - 渲染 UI 结构并美化页面效果 <a class="header-anchor" href="#_3-步骤3-渲染-ui-结构并美化页面效果" aria-label="Permalink to &quot;3. 步骤3 - 渲染 UI 结构并美化页面效果&quot;">​</a></h5><p>​ <img src="'+_+'" alt="image-20230310235427207" style="zoom:67%;"></p><hr><h5 id="_3-步骤4-上拉触底时获取随机颜色" tabindex="-1">3. 步骤4 - 上拉触底时获取随机颜色 <a class="header-anchor" href="#_3-步骤4-上拉触底时获取随机颜色" aria-label="Permalink to &quot;3. 步骤4 - 上拉触底时获取随机颜色&quot;">​</a></h5><p>​ <img src="'+C+'" alt="image-20230310235519253" style="zoom:67%;"></p><hr><h5 id="_3-步骤5-添加-loading-提示效果" tabindex="-1">3. 步骤5 - 添加 loading 提示效果 <a class="header-anchor" href="#_3-步骤5-添加-loading-提示效果" aria-label="Permalink to &quot;3. 步骤5 - 添加 loading 提示效果&quot;">​</a></h5><p>​ <img src="'+F+'" alt="image-20230310235609182" style="zoom:67%;"></p><hr><h5 id="_3-步骤6-对上拉触底进行节流处理" tabindex="-1">3. 步骤6 - 对上拉触底进行节流处理 <a class="header-anchor" href="#_3-步骤6-对上拉触底进行节流处理" aria-label="Permalink to &quot;3. 步骤6 - 对上拉触底进行节流处理&quot;">​</a></h5><p>​ ①在 data 中定义 isloading 节流阀</p><p>​ false 表示当前没有进行任何数据请求</p><p>​ true 表示当前正在进行数据请求</p><p>​ ②在 getColors() 方法中修改 isloading 节流阀的值</p><p>​ 在刚调用 getColors 时将节流阀设置 true</p><p>​ 在网络请求的 complete 回调函数中，将节流阀重置为 false</p><p>​ ③在 onReachBottom 中判断节流阀的值，从而对数据请求进行节流控制</p><p>​ 如果节流阀的值为 true，则阻止当前请求</p><p>​ 如果节流阀的值为 false，则发起数据请求</p>',160))])}const R=n(v,[["render",P]]);export{O as __pageData,R as default};
