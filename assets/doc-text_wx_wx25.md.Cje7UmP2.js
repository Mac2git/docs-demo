import{_ as r,c as i,a2 as s,j as o,a as e,G as p,B as l,o as n}from"./chunks/framework.3VuPyQdv.js";const x="/docs-demo/wxImages/%E5%86%85%E5%B5%8Cwxs%E8%84%9A%E6%9C%AC.png",d="/docs-demo/wxImages/%E5%AE%9A%E4%B9%89%E5%A4%96%E8%81%94%E7%9A%84wxs%E8%84%9A%E6%9C%AC.png",c="/docs-demo/wxImages/%E4%BD%BF%E7%94%A8%E5%A4%96%E8%81%94%E7%9A%84wxs%E8%84%9A%E6%9C%AC.png",h="/docs-demo/wxImages/%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83.png",m="/docs-demo/wxImages/%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%832.png",k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx25.md","filePath":"doc-text/wx/wx25.md","lastUpdated":1745056071000}'),w={name:"doc-text/wx/wx25.md"};function E(u,a,B,_,b,g){const t=l("wxs");return n(),i("div",null,[a[2]||(a[2]=s('<h2 id="_24-wxs-脚本" tabindex="-1">24.WXS 脚本 <a class="header-anchor" href="#_24-wxs-脚本" aria-label="Permalink to &quot;24.WXS 脚本&quot;">​</a></h2><hr><h4 id="_1-什么是-wxs" tabindex="-1">1. 什么是 wxs <a class="header-anchor" href="#_1-什么是-wxs" aria-label="Permalink to &quot;1. 什么是 wxs&quot;">​</a></h4><p>​ WXS（WeiXin Script）是小程序独有的一套脚本语言，结合 WXML，可以构建出页面的结构。</p><hr><h4 id="_2-wxs-的应用场景" tabindex="-1">2. wxs 的应用场景 <a class="header-anchor" href="#_2-wxs-的应用场景" aria-label="Permalink to &quot;2. wxs 的应用场景&quot;">​</a></h4><p>​ wxml 中无法调用在页面的 .js 中定义的函数，但是，wxml 中可以调用 wxs 中定义的函数。因此，小程序中 wxs 的典型应用场景就是“过滤器”。</p><hr><h4 id="_3-wxs-和-javascript-的关系" tabindex="-1">3. wxs 和 JavaScript 的关系 <a class="header-anchor" href="#_3-wxs-和-javascript-的关系" aria-label="Permalink to &quot;3. wxs 和 JavaScript 的关系&quot;">​</a></h4><p>​ 虽然 wxs 的语法类似于 JavaScript，但是 wxs 和 JavaScript 是完全不同的两种语言：</p><p>​ ①wxs 有自己的数据类型</p><p>​ number 数值类型、string 字符串类型、boolean 布尔类型、object 对象类型、</p><p>​ function 函数类型、array 数组类型、 date 日期类型、 regexp 正则</p><p>​ ②wxs 不支持类似于 ES6 及以上的语法形式</p><p>​ 不支持：let、const、解构赋值、展开运算符、箭头函数、对象属性简写、etc...</p><p>​ 支持：var 定义变量、普通 function 函数等类似于 ES5 的语法</p><p>​ ③wxs 遵循 CommonJS 规范</p><p>​ module 对象</p><p>​ require() 函数</p><div class="language-apl vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">apl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h4 id="_4-内嵌-wxs-脚本" tabindex="-1">4. 内嵌 wxs 脚本 <a class="header-anchor" href="#_4-内嵌-wxs-脚本" aria-label="Permalink to &quot;4. 内嵌 wxs 脚本&quot;">​</a></h4><p>​ wxs 代码可以编写在 wxml 文件中的 wxs 标签内，就像 Javascript 代码可以编写在 html 文件中的 script 标签内一样。</p>',23)),o("p",null,[a[0]||(a[0]=e("wxml 文件中的每个 ")),p(t),a[1]||(a[1]=e(" 标签，必须提供 module 属性，用来指定当前 wxs 的模块名称，方便在 wxml 中访问模块中的成员："))]),a[3]||(a[3]=s('<p>​ <img src="'+x+'" alt="image-20230311231440407" style="zoom:50%;"></p><hr><h4 id="_5-定义外联的-wxs-脚本" tabindex="-1">5.定义外联的 wxs 脚本 <a class="header-anchor" href="#_5-定义外联的-wxs-脚本" aria-label="Permalink to &quot;5.定义外联的 wxs 脚本&quot;">​</a></h4><p>​ wxs 代码还可以编写在以 .wxs 为后缀名的文件内，就像 javascript 代码可以编写在以 .js 为后缀名的文件中一样。示例代码如下：</p><img src="'+d+'" alt="image-20230311231534072" style="zoom:50%;"><hr><h4 id="_6-使用外联的-wxs-脚本" tabindex="-1">6.使用外联的 wxs 脚本 <a class="header-anchor" href="#_6-使用外联的-wxs-脚本" aria-label="Permalink to &quot;6.使用外联的 wxs 脚本&quot;">​</a></h4><p>​ 在 wxml 中引入外联的 wxs 脚本时，必须为 wxs 标签添加 module 和 src 属性，其中：</p><p>​ module 用来指定模块的名称</p><p>​ src 用来指定要引入的脚本的路径，且必须是相对路径</p><p>​ 示例代码如下：</p><img src="'+c+'" alt="image-20230311231635531" style="zoom:50%;"><hr><h4 id="_7-wxs-的特点" tabindex="-1">7.WXS 的特点 <a class="header-anchor" href="#_7-wxs-的特点" aria-label="Permalink to &quot;7.WXS 的特点&quot;">​</a></h4><h5 id="_1-与-javascript-不同" tabindex="-1">1. 与 JavaScript 不同 <a class="header-anchor" href="#_1-与-javascript-不同" aria-label="Permalink to &quot;1. 与 JavaScript 不同&quot;">​</a></h5><p>​ 为了降低 wxs（WeiXin Script）的学习成本， wxs 语言在设计时借大量鉴了 JavaScript 的语法。但是本质上，wxs 和 JavaScript 是完全不同的两种语言！</p><hr><h5 id="_2-不能作为组件的事件回调" tabindex="-1">2. 不能作为组件的事件回调 <a class="header-anchor" href="#_2-不能作为组件的事件回调" aria-label="Permalink to &quot;2. 不能作为组件的事件回调&quot;">​</a></h5><p>​ wxs 典型的应用场景就是“过滤器”，经常配合 Mustache 语法进行使用，例如：</p><img src="'+h+'" alt="image-20230311231807360" style="zoom:50%;"><p>​</p><p>​ 但是，在 wxs 中定义的函数不能作为组件的事件回调函数。例如，下面的用法是错误的：</p><p>​ <img src="'+m+'" alt="image-20230311231842365" style="zoom:50%;"></p><hr><h5 id="_3-隔离性" tabindex="-1">3. 隔离性 <a class="header-anchor" href="#_3-隔离性" aria-label="Permalink to &quot;3. 隔离性&quot;">​</a></h5><p>​ 隔离性指的是 wxs 的运行环境和其他 JavaScript 代码是隔离的。体现在如下两方面：</p><p>​ ①wxs 不能调用 js 中定义的函数</p><p>​ ②wxs 不能调用小程序提供的 API</p><hr><h5 id="_4-性能好" tabindex="-1">4. 性能好 <a class="header-anchor" href="#_4-性能好" aria-label="Permalink to &quot;4. 性能好&quot;">​</a></h5><p>​</p><p>​ 在 iOS 设备上，小程序内的 WXS 会比 JavaScript 代码快 2 ~ 20 倍</p><p>​ 在 android 设备上，二者的运行效率无差异</p>',33))])}const q=r(w,[["render",E]]);export{k as __pageData,q as default};
