import{_ as e,c as o,a2 as t,o as r}from"./chunks/framework.3VuPyQdv.js";const p="/docs-demo/wxImages/VantWeapp%E5%AE%98%E6%96%B9%E5%B0%8F%E7%A8%8B%E5%BA%8F.png",s="/docs-demo/wxImages/%E4%BD%BF%E7%94%A8Vant%E7%BB%84%E4%BB%B6.png",i="/docs-demo/wxImages/%E5%AE%9A%E5%88%B6%E5%85%A8%E5%B1%80%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F.png",m="/docs-demo/wxImages/%E5%9F%BA%E4%BA%8E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5API%E7%9A%84%E7%BC%BA%E7%82%B9.png",n="/docs-demo/wxImages/%E5%AE%9E%E7%8E%B0API-Promise%E5%8C%961.png",l="/docs-demo/wxImages/%E5%AE%9E%E7%8E%B0API-Promise%E5%8C%962.png",h="/docs-demo/wxImages/%E8%B0%83%E7%94%A8Promise%E5%8C%96%E4%B9%8B%E5%90%8E%E7%9A%84%E5%BC%82%E6%AD%A5.png",E="/docs-demo/wxImages/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB.png",d="/docs-demo/wxImages/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E6%96%B9%E6%A1%88.png",c="/docs-demo/wxImages/%E5%AE%89%E8%A3%85Mobx%E7%9B%B8%E5%85%B3%E7%9A%84%E5%8C%85.png",B="/docs-demo/wxImages/%E5%88%9B%E5%BB%BAMobX%E7%9A%84%E5%AE%9E%E4%BE%8B.png",_="/docs-demo/wxImages/%E5%B0%86Store%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E7%BB%91%E5%AE%9A%E5%88%B0%E9%A1%B5%E9%9D%A2%E4%B8%AD.png",b="/docs-demo/wxImages/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%BD%BF%E7%94%A8Store%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98.png",g="/docs-demo/wxImages/%E5%B0%86Store%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6%E4%B8%AD.png",A="/docs-demo/wxImages/%E5%9C%A8%E7%BB%84%E5%BB%BA%E4%B8%AD%E4%BD%BF%E7%94%A8Store%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98.png",S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx27.md","filePath":"doc-text/wx/wx27.md","lastUpdated":1743335057000}'),u={name:"doc-text/wx/wx27.md"};function x(P,a,q,f,I,k){return r(),o("div",null,a[0]||(a[0]=[t('<h2 id="_26-使用-npm-包" tabindex="-1">26. 使用 npm 包 <a class="header-anchor" href="#_26-使用-npm-包" aria-label="Permalink to &quot;26. 使用 npm 包&quot;">​</a></h2><h4 id="_26-1-小程序对-npm-的支持与限制" tabindex="-1">26.1 小程序对 npm 的支持与限制 <a class="header-anchor" href="#_26-1-小程序对-npm-的支持与限制" aria-label="Permalink to &quot;26.1 小程序对 npm 的支持与限制&quot;">​</a></h4><p>​ 目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。但是，在小程序中使用 npm 包有如下 3 个限制：</p><p>​ ①不支持依赖于 Node.js 内置库的包</p><p>​ ②不支持依赖于浏览器内置对象的包</p><p>​ ③不支持依赖于 C++ 插件的包</p><p>总结：虽然 npm 上的包有千千万，但是能供小程序使用的包却“为数不多”。</p><hr><h4 id="_26-2-vant-weapp" tabindex="-1">26.2 Vant Weapp <a class="header-anchor" href="#_26-2-vant-weapp" aria-label="Permalink to &quot;26.2 Vant Weapp&quot;">​</a></h4><h5 id="_1-什么是-vant-weapp" tabindex="-1">1. 什么是 Vant Weapp <a class="header-anchor" href="#_1-什么是-vant-weapp" aria-label="Permalink to &quot;1. 什么是 Vant Weapp&quot;">​</a></h5><p>​ Vant Weapp 是有赞前端团队开源的一套小程序 UI 组件库，助力开发者快速搭建小程序应用。它所使用的是 MIT 开源许可协议，对商业使用比较友好。</p><p>​ 官方文档地址 <a href="https://youzan.github.io/vant-weapp" target="_blank" rel="noreferrer">https://youzan.github.io/vant-weapp</a></p><p>​ 扫描下方的小程序二维码，体验组件库示例：</p><img src="'+p+'" alt="image-20230313215307038" style="zoom:67%;"><hr><h5 id="_2-安装-vant-组件库" tabindex="-1">2. 安装 Vant 组件库 <a class="header-anchor" href="#_2-安装-vant-组件库" aria-label="Permalink to &quot;2. 安装 Vant 组件库&quot;">​</a></h5><p>​ 在小程序项目中，安装 Vant 组件库主要分为如下 3 步：</p><p>​ ①通过 npm 安装（建议指定版本为@1.3.3）</p><p>​ ②构建 npm 包</p><p>​ ③修改 app.json</p><p>​ 详细的操作步骤，大家可以参考 Vant 官方提供的快速上手教程：</p><p>​ <a href="https://youzan.github.io/vant-weapp/" target="_blank" rel="noreferrer">https://youzan.github.io/vant-weapp/#/quickstart#an-zhuang</a></p><hr><h5 id="_3-使用-vant-组件" tabindex="-1">3. 使用 Vant 组件 <a class="header-anchor" href="#_3-使用-vant-组件" aria-label="Permalink to &quot;3. 使用 Vant 组件&quot;">​</a></h5><p>​ 安装完 Vant 组件库之后，可以在 app.json 的 usingComponents 节点中引入需要的组件，即可在 wxml 中直接使用组件。示例代码如下：</p><img src="'+s+'" alt="image-20230313220003693" style="zoom:67%;"><hr><p>​ 4. 定制全局主题样式</p><p>​ Vant Weapp 使用 CSS 变量来实现定制主题。 关于 CSS 变量的基本用法，请参考 MDN 文档：</p><p>​ <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties</a></p><hr><h5 id="_5-定制全局主题样式" tabindex="-1">5. 定制全局主题样式 <a class="header-anchor" href="#_5-定制全局主题样式" aria-label="Permalink to &quot;5. 定制全局主题样式&quot;">​</a></h5><p>​ 在 app.wxss 中，写入 CSS 变量，即可对全局生效：</p><p>​ <img src="'+i+'" alt="image-20230313220137451" style="zoom:67%;"></p><p>​ 所有可用的颜色变量，请参考 Vant 官方提供的配置文件：</p><p>​ <a href="https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less" target="_blank" rel="noreferrer">https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less</a></p><hr><h4 id="_26-3使用-npm-包-api-promise化" tabindex="-1">26.3使用 npm 包 - API Promise化 <a class="header-anchor" href="#_26-3使用-npm-包-api-promise化" aria-label="Permalink to &quot;26.3使用 npm 包 - API Promise化&quot;">​</a></h4><h5 id="_1-基于回调函数的异步-api-的缺点" tabindex="-1">1. 基于回调函数的异步 API 的缺点 <a class="header-anchor" href="#_1-基于回调函数的异步-api-的缺点" aria-label="Permalink to &quot;1. 基于回调函数的异步 API 的缺点&quot;">​</a></h5><p>​ 默认情况下，小程序官方提供的异步 API 都是基于回调函数实现的，例如，网络请求的 API 需要按照如下的方式调用：</p><p>​ <img src="'+m+'" alt="image-20230313220307571" style="zoom:67%;"></p><blockquote><p>​ 缺点：容易造成回调地狱的问题，代码的可读性、维护性差</p></blockquote><hr><h5 id="_2-什么是-api-promise-化" tabindex="-1">2. 什么是 API Promise 化 <a class="header-anchor" href="#_2-什么是-api-promise-化" aria-label="Permalink to &quot;2. 什么是 API Promise 化&quot;">​</a></h5><p>​ API Promise化，指的是通过额外的配置，将官方提供的、基于回调函数的异步 API，升级改造为基于 Promise 的异步 API，从而提高代码的可读性、维护性，避免回调地狱的问题。</p><hr><h5 id="_3-实现-api-promise-化" tabindex="-1">3. 实现 API Promise 化 <a class="header-anchor" href="#_3-实现-api-promise-化" aria-label="Permalink to &quot;3. 实现 API Promise 化&quot;">​</a></h5><p>​ 在小程序中，实现 API Promise 化主要依赖于 miniprogram-api-promise 这个第三方的 npm 包。它的安装和使用步骤如下：</p><img src="'+n+'" alt="image-20230313220441525" style="zoom:67%;"><img src="'+l+'" alt="image-20230313220509851" style="zoom:67%;"><hr><h5 id="_4-调用-promise-化之后的异步-api" tabindex="-1">4. 调用 Promise 化之后的异步 API <a class="header-anchor" href="#_4-调用-promise-化之后的异步-api" aria-label="Permalink to &quot;4. 调用 Promise 化之后的异步 API&quot;">​</a></h5><p>​ <img src="'+h+'" alt="image-20230313220542225" style="zoom:67%;"></p><hr><h4 id="_26-4-全局数据共享" tabindex="-1">26.4 全局数据共享 <a class="header-anchor" href="#_26-4-全局数据共享" aria-label="Permalink to &quot;26.4 全局数据共享&quot;">​</a></h4><p>​</p><hr><h5 id="_1-什么是全局数据共享" tabindex="-1">1. 什么是全局数据共享 <a class="header-anchor" href="#_1-什么是全局数据共享" aria-label="Permalink to &quot;1. 什么是全局数据共享&quot;">​</a></h5><p>​ 全局数据共享（又叫做：状态管理）是为了解决组件之间数据共享的问题。</p><p>​ 开发中常用的全局数据共享方案有：Vuex、Redux、MobX 等。</p><img src="'+E+'" alt="image-20230313220707175" style="zoom:67%;"><h5 id="_2-小程序中的全局数据共享方案" tabindex="-1">2. 小程序中的全局数据共享方案 <a class="header-anchor" href="#_2-小程序中的全局数据共享方案" aria-label="Permalink to &quot;2. 小程序中的全局数据共享方案&quot;">​</a></h5><p>​ 在小程序中，可使用 mobx-miniprogram 配合 mobx-miniprogram-bindings 实现全局数据共享。其中：</p><p>​ mobx-miniprogram 用来创建 Store 实例对象</p><p>​ mobx-miniprogram-bindings 用来把 Store 中的共享数据或方法，绑定到组件或页面中使用</p><p>​ <img src="'+d+'" alt="image-20230313221256822" style="zoom:67%;"></p><hr><h4 id="_26-5-全局数据共享-mobx" tabindex="-1">26.5 全局数据共享 - MobX <a class="header-anchor" href="#_26-5-全局数据共享-mobx" aria-label="Permalink to &quot;26.5 全局数据共享 - MobX&quot;">​</a></h4><hr><h5 id="_1-安装-mobx-相关的包" tabindex="-1">1. 安装 MobX 相关的包 <a class="header-anchor" href="#_1-安装-mobx-相关的包" aria-label="Permalink to &quot;1. 安装 MobX 相关的包&quot;">​</a></h5><p>​ 在项目中运行如下的命令，安装 MobX 相关的包：</p><img src="'+c+'" alt="image-20230313221515199" style="zoom:67%;"><blockquote><p>​ 注意：MobX 相关的包安装完毕之后，记得删除 miniprogram_npm 目录后，重新构建 npm。</p></blockquote><hr><h5 id="_2-创建-mobx-的-store-实例" tabindex="-1">2. 创建 MobX 的 Store 实例 <a class="header-anchor" href="#_2-创建-mobx-的-store-实例" aria-label="Permalink to &quot;2. 创建 MobX 的 Store 实例&quot;">​</a></h5><p>​ <img src="'+B+'" alt="image-20230313221614637" style="zoom:67%;"></p><hr><h5 id="_3-将-store-中的成员绑定到页面中" tabindex="-1">3. 将 Store 中的成员绑定到页面中 <a class="header-anchor" href="#_3-将-store-中的成员绑定到页面中" aria-label="Permalink to &quot;3. 将 Store 中的成员绑定到页面中&quot;">​</a></h5><p>​ <img src="'+_+'" alt="image-20230313221804950" style="zoom:67%;"></p><hr><h5 id="_4-在页面上使用-store-中的成员" tabindex="-1">4. 在页面上使用 Store 中的成员 <a class="header-anchor" href="#_4-在页面上使用-store-中的成员" aria-label="Permalink to &quot;4. 在页面上使用 Store 中的成员&quot;">​</a></h5><p>​ <img src="'+b+'" alt="image-20230313222006090" style="zoom:67%;"></p><hr><h5 id="_5-将-store-中的成员绑定到组件中" tabindex="-1">5. 将 Store 中的成员绑定到组件中 <a class="header-anchor" href="#_5-将-store-中的成员绑定到组件中" aria-label="Permalink to &quot;5. 将 Store 中的成员绑定到组件中&quot;">​</a></h5><p>​ <img src="'+g+'" alt="image-20230313222058961" style="zoom:67%;"></p><hr><h5 id="_6-在组件中使用-store-中的成员" tabindex="-1">6. 在组件中使用 Store 中的成员 <a class="header-anchor" href="#_6-在组件中使用-store-中的成员" aria-label="Permalink to &quot;6. 在组件中使用 Store 中的成员&quot;">​</a></h5><p>​ <img src="'+A+'" alt="image-20230313222149500" style="zoom:67%;"></p>',88)]))}const z=e(u,[["render",x]]);export{S as __pageData,z as default};
