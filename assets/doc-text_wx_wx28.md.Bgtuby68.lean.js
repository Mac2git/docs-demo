import{_ as o,c as r,a2 as t,o as s}from"./chunks/framework.3VuPyQdv.js";const i="/docs-demo/wxImages/%E5%88%86%E5%8C%85%E5%89%8D%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E6%88%90.png",h="/docs-demo/wxImages/%E5%88%86%E5%8C%85%E5%90%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E6%88%90.png",l="/docs-demo/wxImages/%E5%88%86%E5%8C%85-%E9%85%8D%E7%BD%AE1.png",e="/docs-demo/wxImages/%E7%AE%AD%E5%A4%B4.png",p="/docs-demo/wxImages/%E5%88%86%E5%8C%85-%E9%85%8D%E7%BD%AE2.png",d="/docs-demo/wxImages/%E5%88%86%E5%8C%85-%E5%BC%95%E7%94%A8%E5%8E%9F%E5%88%99.png",n="/docs-demo/wxImages/%E4%BB%80%E4%B9%88%E6%98%AF%E7%8B%AC%E7%AB%8B%E5%88%86%E5%8C%85.png",m="/docs-demo/wxImages/%E7%8B%AC%E7%AB%8B%E5%88%86%E5%8C%85%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%951.png",c="/docs-demo/wxImages/%E7%8B%AC%E7%AB%8B%E5%88%86%E5%8C%85%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%952.png",E="/docs-demo/wxImages/%E9%85%8D%E7%BD%AE%E5%88%86%E5%8C%85%E7%9A%84%E9%A2%84%E4%B8%8B%E8%BD%BD.png",_="/docs-demo/wxImages/%E5%88%86%E5%8C%85%E9%A2%84%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%99%90%E5%88%B61.png",u="/docs-demo/wxImages/%E5%88%86%E5%8C%85%E9%A2%84%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%99%90%E5%88%B62.png",P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc-text/wx/wx28.md","filePath":"doc-text/wx/wx28.md","lastUpdated":1744449209000}'),b={name:"doc-text/wx/wx28.md"};function g(q,a,x,B,f,A){return s(),r("div",null,a[0]||(a[0]=[t('<h2 id="_27-分包" tabindex="-1">27. 分包 <a class="header-anchor" href="#_27-分包" aria-label="Permalink to &quot;27. 分包&quot;">​</a></h2><hr><h4 id="_27-1-分包—基础概念" tabindex="-1">27.1 分包—基础概念 <a class="header-anchor" href="#_27-1-分包—基础概念" aria-label="Permalink to &quot;27.1 分包—基础概念&quot;">​</a></h4><h5 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h5><h5 id="_1-什么是分包" tabindex="-1">1. 什么是分包 <a class="header-anchor" href="#_1-什么是分包" aria-label="Permalink to &quot;1. 什么是分包&quot;">​</a></h5><p>​ 分包指的是把一个完整的小程序项目，按照需求划分为不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载。</p><hr><h5 id="_2-分包的好处" tabindex="-1">2. 分包的好处 <a class="header-anchor" href="#_2-分包的好处" aria-label="Permalink to &quot;2. 分包的好处&quot;">​</a></h5><p>​ 对小程序进行分包的好处主要有以下两点：</p><p>​ ① 可以优化小程序首次启动的下载时间</p><p>​ ② 在多团队共同开发时可以更好的解耦协作</p><hr><h5 id="_3-分包前项目的构成" tabindex="-1">3. 分包前项目的构成 <a class="header-anchor" href="#_3-分包前项目的构成" aria-label="Permalink to &quot;3. 分包前项目的构成&quot;">​</a></h5><p>​ 分包前，小程序项目中所有的页面和资源都被打包到了一起，导致整个项目体积过大，影响小程序首次启动的下载时间。</p><p>​ <img src="'+i+'" alt="image-20230313222456802" style="zoom:67%;"></p><hr><h5 id="_4-分包后项目的构成" tabindex="-1">4. 分包后项目的构成 <a class="header-anchor" href="#_4-分包后项目的构成" aria-label="Permalink to &quot;4. 分包后项目的构成&quot;">​</a></h5><p>​</p><p>​ 分包后，小程序项目由 1 个主包 + 多个分包组成：</p><p>​ 主包：一般只包含项目的启动页面或 TabBar 页面、以及所有分包都需要用到的一些公共资源</p><p>​ 分包：只包含和当前分包有关的页面和私有资源</p><img src="'+h+'" alt="image-20230313222558538" style="zoom:67%;"><hr><h5 id="_5-分包的加载规则" tabindex="-1">5. 分包的加载规则 <a class="header-anchor" href="#_5-分包的加载规则" aria-label="Permalink to &quot;5. 分包的加载规则&quot;">​</a></h5><p>​ ①在小程序启动时，默认会下载主包并启动主包内页面</p><p>​ tabBar 页面需要放到主包中</p><p>​ ②当用户进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示</p><p>​ 非 tabBar 页面可以按照功能的不同，划分为不同的分包之后，进行按需下载</p><hr><h5 id="_6-分包的体积限制" tabindex="-1">6. 分包的体积限制 <a class="header-anchor" href="#_6-分包的体积限制" aria-label="Permalink to &quot;6. 分包的体积限制&quot;">​</a></h5><p>​ 目前，小程序分包的大小有以下两个限制：</p><p>​ 整个小程序所有分包大小不超过 16M（主包 + 所有分包）</p><p>​ 单个分包/主包大小不能超过 2M</p><hr><h4 id="_27-2-分包-使用分包" tabindex="-1">27.2 分包 - 使用分包 <a class="header-anchor" href="#_27-2-分包-使用分包" aria-label="Permalink to &quot;27.2 分包 - 使用分包&quot;">​</a></h4><h5 id="_1-配置方法" tabindex="-1">1. 配置方法 <a class="header-anchor" href="#_1-配置方法" aria-label="Permalink to &quot;1. 配置方法&quot;">​</a></h5><p>​ <img src="'+l+'" alt="image-20230313222926582" style="zoom:50%;"> <img src="'+e+'" style="zoom:50%;"><img src="'+p+'" alt="image-20230313222950251" style="zoom:50%;"></p><hr><h5 id="_2-打包原则" tabindex="-1">2. 打包原则 <a class="header-anchor" href="#_2-打包原则" aria-label="Permalink to &quot;2. 打包原则&quot;">​</a></h5><p>​ ①小程序会按 subpackages 的配置进行分包，subpackages 之外的目录将被打包到主包中</p><p>​ ②主包也可以有自己的 pages（即最外层的 pages 字段）</p><p>​ ③tabBar 页面必须在主包内</p><p>​ ④分包之间不能互相嵌套</p><hr><h5 id="_3-引用原则" tabindex="-1">3. 引用原则 <a class="header-anchor" href="#_3-引用原则" aria-label="Permalink to &quot;3. 引用原则&quot;">​</a></h5><p>​ ①主包无法引用分包内的私有资源</p><p>​ ②分包之间不能相互引用私有资源</p><p>​ ③分包可以引用主包内的公共资源</p><img src="'+d+'" alt="image-20230313223317953" style="zoom:67%;"><hr><h4 id="_27-3-分包-独立分包" tabindex="-1">27.3 分包 - 独立分包 <a class="header-anchor" href="#_27-3-分包-独立分包" aria-label="Permalink to &quot;27.3 分包 - 独立分包&quot;">​</a></h4><hr><h5 id="_1-什么是独立分包" tabindex="-1">1. 什么是独立分包 <a class="header-anchor" href="#_1-什么是独立分包" aria-label="Permalink to &quot;1. 什么是独立分包&quot;">​</a></h5><p>​ 独立分包本质上也是分包，只不过它比较特殊，可以独立于主包和其他分包而单独运行。</p><img src="'+n+'" alt="image-20230313223426009" style="zoom:67%;"><hr><h5 id="_2-独立分包和普通分包的区别" tabindex="-1">2. 独立分包和普通分包的区别 <a class="header-anchor" href="#_2-独立分包和普通分包的区别" aria-label="Permalink to &quot;2. 独立分包和普通分包的区别&quot;">​</a></h5><p>​ 最主要的区别：是否依赖于主包才能运行</p><p>​ 普通分包必须依赖于主包才能运行</p><p>​ 独立分包可以在不下载主包的情况下，独立运行</p><hr><h5 id="_3-独立分包的应用场景" tabindex="-1">3. 独立分包的应用场景 <a class="header-anchor" href="#_3-独立分包的应用场景" aria-label="Permalink to &quot;3. 独立分包的应用场景&quot;">​</a></h5><p>​ 开发者可以按需，将某些具有一定功能独立性的页面配置到独立分包中。原因如下：</p><p>​ 当小程序从普通的分包页面启动时，需要首先下载主包</p><p>​ 而独立分包不依赖主包即可运行，可以很大程度上提升分包页面的启动速度</p><blockquote><p>​ 注意：一个小程序中可以有多个独立分包。</p></blockquote><hr><h5 id="_4-独立分包的配置方法" tabindex="-1">4. 独立分包的配置方法 <a class="header-anchor" href="#_4-独立分包的配置方法" aria-label="Permalink to &quot;4. 独立分包的配置方法&quot;">​</a></h5><p>​ <img src="'+m+'" alt="image-20230313223614065" style="zoom:50%;"> <img src="'+e+'" alt="image-20230313225124242" style="zoom:50%;"><img src="'+c+'" alt="image-20230313223638528" style="zoom:50%;"></p><hr><h5 id="_5-引用原则" tabindex="-1">5. 引用原则 <a class="header-anchor" href="#_5-引用原则" aria-label="Permalink to &quot;5. 引用原则&quot;">​</a></h5><p>​ 独立分包和普通分包以及主包之间，是相互隔绝的，不能相互引用彼此的资源！例如：</p><p>​ ①主包无法引用独立分包内的私有资源</p><p>​ ②独立分包之间，不能相互引用私有资源</p><p>​ ③独立分包和普通分包之间，不能相互引用私有资源</p><p>​ ④特别注意：独立分包中不能引用主包内的公共资源</p><hr><h4 id="_27-4-分包-分包预下载" tabindex="-1">27.4 分包 - 分包预下载 <a class="header-anchor" href="#_27-4-分包-分包预下载" aria-label="Permalink to &quot;27.4 分包 - 分包预下载&quot;">​</a></h4><hr><h5 id="_1-什么是分包预下载" tabindex="-1">1. 什么是分包预下载 <a class="header-anchor" href="#_1-什么是分包预下载" aria-label="Permalink to &quot;1. 什么是分包预下载&quot;">​</a></h5><p>​ 分包预下载指的是：在进入小程序的某个页面时，由框架自动预下载可能需要的分包，从而提升进入后续分包页面时的启动速度。</p><hr><h5 id="_2-配置分包的预下载" tabindex="-1">2. 配置分包的预下载 <a class="header-anchor" href="#_2-配置分包的预下载" aria-label="Permalink to &quot;2. 配置分包的预下载&quot;">​</a></h5><p>​ 预下载分包的行为，会在进入指定的页面时触发。在 app.json 中，使用 preloadRule 节点定义分包的预下载规则，示例代码如下：</p><p>​ <img src="'+E+'" alt="image-20230313223934288" style="zoom:67%;"></p><hr><h5 id="_3-分包预下载的限制" tabindex="-1">3. 分包预下载的限制 <a class="header-anchor" href="#_3-分包预下载的限制" aria-label="Permalink to &quot;3. 分包预下载的限制&quot;">​</a></h5><p>​ 同一个分包中的页面享有共同的预下载大小限额 2M，例如：</p><p>​ <img src="'+_+'" alt="image-20230313224020720" style="zoom:67%;"><img src="'+u+'" alt="image-20230313224042073" style="zoom:67%;"></p>',89)]))}const w=o(b,[["render",g]]);export{P as __pageData,w as default};
